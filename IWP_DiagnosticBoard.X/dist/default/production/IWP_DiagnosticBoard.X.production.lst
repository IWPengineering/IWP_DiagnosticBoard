

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Sep 14 11:44:01 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18LF26K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41  0000                     
    42                           ; Version 1.44
    43                           ; Generated 14/09/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18LF26K40 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77                           	psect	idataCOMRAM
    78  00247E                     __pidataCOMRAM:
    79                           	opt stack 0
    80                           
    81                           ;initializer for _waterPresenceSensorPin
    82  00247E  0005               	dw	5
    83                           
    84                           	psect	idataBANK0
    85  00246E                     __pidataBANK0:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _batteryLevelPin
    89  00246E  000B               	dw	11
    90                           
    91                           ;initializer for _yAxisAccelerometerPin
    92  002470  0017               	dw	23
    93                           
    94                           ;initializer for _xAxisAccelerometerPin
    95  002472  0018               	dw	24
    96                           
    97                           ;initializer for _rxPin
    98  002474  0006               	dw	6
    99                           
   100                           ;initializer for _Pin4
   101  002476  0004               	dw	4
   102                           
   103                           ;initializer for _depthSensorPin
   104  002478  0002               	dw	2
   105                           
   106                           	psect	smallconst
   107  000F00                     __psmallconst:
   108                           	opt stack 0
   109  000F00  00                 	db	0
   110  000F01                     _handleMovementThreshold:
   111                           	opt stack 0
   112  000F01  00                 	db	0
   113  000F02  A0                 	db	160
   114  000F03  40                 	db	64
   115  000F04                     __end_of_handleMovementThreshold:
   116                           	opt stack 0
   117  000F04                     _angleThresholdSmall:
   118                           	opt stack 0
   119  000F04  CD                 	db	205
   120  000F05  CC                 	db	204
   121  000F06  3D                 	db	61
   122  000F07                     __end_of_angleThresholdSmall:
   123                           	opt stack 0
   124  000F07                     _PI:
   125                           	opt stack 0
   126  000F07  10                 	db	16
   127  000F08  49                 	db	73
   128  000F09  40                 	db	64
   129  000F0A                     __end_of_PI:
   130                           	opt stack 0
   131  000F0A                     _pulseWidthThreshold:
   132                           	opt stack 0
   133  000F0A  0014               	dw	20
   134  000F0C                     __end_of_pulseWidthThreshold:
   135                           	opt stack 0
   136  000F0C                     _upstrokeInterval:
   137                           	opt stack 0
   138  000F0C  000A               	dw	10
   139  000F0E                     __end_of_upstrokeInterval:
   140                           	opt stack 0
   141  000F0E                     _signedNumAdjustADC:
   142                           	opt stack 0
   143  000F0E  01FF               	dw	511
   144  000F10                     __end_of_signedNumAdjustADC:
   145                           	opt stack 0
   146  000F10                     _yAxis:
   147                           	opt stack 0
   148  000F10  0007               	dw	7
   149  000F12                     __end_of_yAxis:
   150                           	opt stack 0
   151  000F12                     _xAxis:
   152                           	opt stack 0
   153  000F12  0006               	dw	6
   154  000F14                     __end_of_xAxis:
   155                           	opt stack 0
   156  000F14                     atan@coeff_a:
   157                           	opt stack 0
   158  000F14  3C                 	db	60
   159  000F15  04                 	db	4
   160  000F16  42                 	db	66
   161  000F17  9F                 	db	159
   162  000F18  6A                 	db	106
   163  000F19  42                 	db	66
   164  000F1A  90                 	db	144
   165  000F1B  01                 	db	1
   166  000F1C  42                 	db	66
   167  000F1D  4D                 	db	77
   168  000F1E  BB                 	db	187
   169  000F1F  40                 	db	64
   170  000F20  EC                 	db	236
   171  000F21  47                 	db	71
   172  000F22  3E                 	db	62
   173  000F23  8E                 	db	142
   174  000F24  1F                 	db	31
   175  000F25  BB                 	db	187
   176  000F26                     __end_ofatan@coeff_a:
   177                           	opt stack 0
   178  000F26                     atan@coeff_b:
   179                           	opt stack 0
   180  000F26  3C                 	db	60
   181  000F27  04                 	db	4
   182  000F28  42                 	db	66
   183  000F29  5A                 	db	90
   184  000F2A  8B                 	db	139
   185  000F2B  42                 	db	66
   186  000F2C  04                 	db	4
   187  000F2D  44                 	db	68
   188  000F2E  42                 	db	66
   189  000F2F  9C                 	db	156
   190  000F30  4F                 	db	79
   191  000F31  41                 	db	65
   192  000F32  00                 	db	0
   193  000F33  80                 	db	128
   194  000F34  3F                 	db	63
   195  000F35                     __end_ofatan@coeff_b:
   196                           	opt stack 0
   197  0000                     _RC5PPS	set	3836
   198  0000                     _RC3PPS	set	3834
   199  0000                     _SSP1DATPPS	set	3768
   200  0000                     _ADPCHbits	set	3935
   201  0000                     _ADCLK	set	3927
   202  0000                     _ADREFbits	set	3928
   203  0000                     _ANSELAbits	set	3857
   204  0000                     _ANSELC	set	3873
   205  0000                     _ANSELB	set	3865
   206  0000                     _ANSELA	set	3857
   207  0000                     _ADRES	set	3939
   208  0000                     _PORTAbits	set	3981
   209  0000                     _PORTBbits	set	3982
   210  0000                     _TRISBbits	set	3977
   211  0000                     _TRISAbits	set	3976
   212  0000                     _ADCON0bits	set	3936
   213  0000                     _TMR0	set	4051
   214  0000                     _SSP1BUF	set	3986
   215  0000                     _SSP1STATbits	set	3989
   216  0000                     _PORTCbits	set	3983
   217  0000                     _SSP1CON3bits	set	3992
   218  0000                     _SSP1CON1bits	set	3990
   219  0000                     _TRISCbits	set	3978
   220  0000                     _T3CONbits	set	4041
   221  0000                     _TMR3CLKbits	set	4044
   222  0000                     _T1GCONbits	set	4048
   223  0000                     _T1CONbits	set	4047
   224  0000                     _TMR1CLKbits	set	4050
   225  0000                     _T0CON0bits	set	4053
   226  0000                     _T0CON1bits	set	4054
   227  0000                     _TRISC	set	3978
   228  0000                     _TRISB	set	3977
   229  0000                     _TRISA	set	3976
   230                           
   231                           ; #config settings
   232  000F35  00                 	db	0	; dummy byte at the end
   233  0000                     
   234                           	psect	cinit
   235  0022E0                     __pcinit:
   236                           	opt stack 0
   237  0022E0                     start_initialization:
   238                           	opt stack 0
   239  0022E0                     __initialization:
   240                           	opt stack 0
   241                           
   242                           ; Initialize objects allocated to BANK0 (12 bytes)
   243                           ; load TBLPTR registers with __pidataBANK0
   244  0022E0  0E6E               	movlw	low __pidataBANK0
   245  0022E2  6EF6               	movwf	tblptrl,c
   246  0022E4  0E24               	movlw	high __pidataBANK0
   247  0022E6  6EF7               	movwf	tblptrh,c
   248  0022E8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   249  0022EA  6EF8               	movwf	tblptru,c
   250  0022EC  EE00  F0C9         	lfsr	0,__pdataBANK0
   251  0022F0  EE10 F00C          	lfsr	1,12
   252  0022F4                     copy_data0:
   253  0022F4  0009               	tblrd		*+
   254  0022F6  CFF5 FFEE          	movff	tablat,postinc0
   255  0022FA  50E5               	movf	postdec1,w,c
   256  0022FC  50E1               	movf	fsr1l,w,c
   257  0022FE  E1FA               	bnz	copy_data0
   258                           
   259                           ; Initialize objects allocated to COMRAM (2 bytes)
   260                           ; load TBLPTR registers with __pidataCOMRAM
   261  002300  0E7E               	movlw	low __pidataCOMRAM
   262  002302  6EF6               	movwf	tblptrl,c
   263  002304  0E24               	movlw	high __pidataCOMRAM
   264  002306  6EF7               	movwf	tblptrh,c
   265  002308  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   266  00230A  6EF8               	movwf	tblptru,c
   267  00230C  0009               	tblrd		*+	;fetch initializer
   268  00230E  CFF5 F05D          	movff	tablat,__pdataCOMRAM
   269  002312  0009               	tblrd		*+	;fetch initializer
   270  002314  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
   271                           
   272                           ; Clear objects allocated to BANK0 (36 bytes)
   273  002318  EE00  F0A5         	lfsr	0,__pbssBANK0
   274  00231C  0E24               	movlw	36
   275  00231E                     clear_0:
   276  00231E  6AEE               	clrf	postinc0,c
   277  002320  06E8               	decf	wreg,f,c
   278  002322  E1FD               	bnz	clear_0
   279  002324                     end_of_initialization:
   280                           	opt stack 0
   281  002324                     __end_of__initialization:
   282                           	opt stack 0
   283  002324  0E00               	movlw	low (__Lmediumconst shr (0+16))
   284  002326  6EF8               	movwf	tblptru,c
   285  002328  0100               	movlb	0
   286  00232A  EF66  F00B         	goto	_main	;jump to C main() function
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           postdec1	equ	0xFE5
   294                           fsr1l	equ	0xFE1
   295                           
   296                           	psect	dataCOMRAM
   297  00005D                     __pdataCOMRAM:
   298                           	opt stack 0
   299  00005D                     _waterPresenceSensorPin:
   300                           	opt stack 0
   301  00005D                     	ds	2
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           postdec1	equ	0xFE5
   309                           fsr1l	equ	0xFE1
   310                           
   311                           	psect	bssBANK0
   312  0000A5                     __pbssBANK0:
   313                           	opt stack 0
   314  0000A5                     _angle10:
   315                           	opt stack 0
   316  0000A5                     	ds	3
   317  0000A8                     _angle9:
   318                           	opt stack 0
   319  0000A8                     	ds	3
   320  0000AB                     _angle8:
   321                           	opt stack 0
   322  0000AB                     	ds	3
   323  0000AE                     _angle7:
   324                           	opt stack 0
   325  0000AE                     	ds	3
   326  0000B1                     _angle6:
   327                           	opt stack 0
   328  0000B1                     	ds	3
   329  0000B4                     _angle5:
   330                           	opt stack 0
   331  0000B4                     	ds	3
   332  0000B7                     _angle4:
   333                           	opt stack 0
   334  0000B7                     	ds	3
   335  0000BA                     _angle3:
   336                           	opt stack 0
   337  0000BA                     	ds	3
   338  0000BD                     _angle2:
   339                           	opt stack 0
   340  0000BD                     	ds	3
   341  0000C0                     _angle1:
   342                           	opt stack 0
   343  0000C0                     	ds	3
   344  0000C3                     _errno:
   345                           	opt stack 0
   346  0000C3                     	ds	2
   347  0000C5                     _hour:
   348                           	opt stack 0
   349  0000C5                     	ds	2
   350  0000C7                     _TimeSinceLastHourCheck:
   351                           	opt stack 0
   352  0000C7                     	ds	2
   353                           tblptru	equ	0xFF8
   354                           tblptrh	equ	0xFF7
   355                           tblptrl	equ	0xFF6
   356                           tablat	equ	0xFF5
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           postdec1	equ	0xFE5
   360                           fsr1l	equ	0xFE1
   361                           
   362                           	psect	dataBANK0
   363  0000C9                     __pdataBANK0:
   364                           	opt stack 0
   365  0000C9                     _batteryLevelPin:
   366                           	opt stack 0
   367  0000C9                     	ds	2
   368  0000CB                     _yAxisAccelerometerPin:
   369                           	opt stack 0
   370  0000CB                     	ds	2
   371  0000CD                     _xAxisAccelerometerPin:
   372                           	opt stack 0
   373  0000CD                     	ds	2
   374  0000CF                     _rxPin:
   375                           	opt stack 0
   376  0000CF                     	ds	2
   377  0000D1                     _Pin4:
   378                           	opt stack 0
   379  0000D1                     	ds	2
   380  0000D3                     _depthSensorPin:
   381                           	opt stack 0
   382  0000D3                     	ds	2
   383                           tblptru	equ	0xFF8
   384                           tblptrh	equ	0xFF7
   385                           tblptrl	equ	0xFF6
   386                           tablat	equ	0xFF5
   387                           postinc0	equ	0xFEE
   388                           wreg	equ	0xFE8
   389                           postdec1	equ	0xFE5
   390                           fsr1l	equ	0xFE1
   391                           
   392                           	psect	cstackBANK0
   393  000060                     __pcstackBANK0:
   394                           	opt stack 0
   395  000060                     _atan2$1810:
   396                           	opt stack 0
   397                           
   398                           ; 3 bytes @ 0x0
   399  000060                     	ds	3
   400  000063                     _atan2$1809:
   401                           	opt stack 0
   402                           
   403                           ; 3 bytes @ 0x3
   404  000063                     	ds	3
   405  000066                     atan2@v:
   406                           	opt stack 0
   407                           
   408                           ; 3 bytes @ 0x6
   409  000066                     	ds	3
   410  000069                     getHandleAngle@averageAngle:
   411                           	opt stack 0
   412                           
   413                           ; 3 bytes @ 0x9
   414  000069                     	ds	3
   415  00006C                     _getHandleAngle$1800:
   416                           	opt stack 0
   417                           
   418                           ; 3 bytes @ 0xC
   419  00006C                     	ds	3
   420  00006F                     _getHandleAngle$1801:
   421                           	opt stack 0
   422                           
   423                           ; 3 bytes @ 0xF
   424  00006F                     	ds	3
   425  000072                     _getHandleAngle$1802:
   426                           	opt stack 0
   427                           
   428                           ; 3 bytes @ 0x12
   429  000072                     	ds	3
   430  000075                     _getHandleAngle$1803:
   431                           	opt stack 0
   432                           
   433                           ; 3 bytes @ 0x15
   434  000075                     	ds	3
   435  000078                     _getHandleAngle$1804:
   436                           	opt stack 0
   437                           
   438                           ; 3 bytes @ 0x18
   439  000078                     	ds	3
   440  00007B                     _getHandleAngle$1805:
   441                           	opt stack 0
   442                           
   443                           ; 3 bytes @ 0x1B
   444  00007B                     	ds	3
   445  00007E                     _getHandleAngle$1806:
   446                           	opt stack 0
   447                           
   448                           ; 3 bytes @ 0x1E
   449  00007E                     	ds	3
   450  000081                     _getHandleAngle$1807:
   451                           	opt stack 0
   452                           
   453                           ; 3 bytes @ 0x21
   454  000081                     	ds	3
   455  000084                     _getHandleAngle$1808:
   456                           	opt stack 0
   457                           
   458                           ; 3 bytes @ 0x24
   459  000084                     	ds	3
   460  000087                     getHandleAngle@xValue:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x27
   464  000087                     	ds	2
   465  000089                     getHandleAngle@yValue:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x29
   469  000089                     	ds	2
   470  00008B                     getHandleAngle@angle:
   471                           	opt stack 0
   472                           
   473                           ; 3 bytes @ 0x2B
   474  00008B                     	ds	3
   475  00008E                     main@adcVoltage:
   476                           	opt stack 0
   477                           
   478                           ; 3 bytes @ 0x2E
   479  00008E                     	ds	3
   480  000091                     main@angleCurrent:
   481                           	opt stack 0
   482                           
   483                           ; 3 bytes @ 0x31
   484  000091                     	ds	3
   485  000094                     main@angleDelta:
   486                           	opt stack 0
   487                           
   488                           ; 3 bytes @ 0x34
   489  000094                     	ds	3
   490  000097                     main@newAngle:
   491                           	opt stack 0
   492                           
   493                           ; 3 bytes @ 0x37
   494  000097                     	ds	3
   495  00009A                     main@anglePrevious:
   496                           	opt stack 0
   497                           
   498                           ; 3 bytes @ 0x3A
   499  00009A                     	ds	3
   500  00009D                     main@handleMovement:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x3D
   504  00009D                     	ds	2
   505  00009F                     main@readWater:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x3F
   509  00009F                     	ds	2
   510  0000A1                     main@EEPROMdata:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x41
   514  0000A1                     	ds	1
   515  0000A2                     main@deltaAngle:
   516                           	opt stack 0
   517                           
   518                           ; 3 bytes @ 0x42
   519  0000A2                     	ds	3
   520                           tblptru	equ	0xFF8
   521                           tblptrh	equ	0xFF7
   522                           tblptrl	equ	0xFF6
   523                           tablat	equ	0xFF5
   524                           postinc0	equ	0xFEE
   525                           wreg	equ	0xFE8
   526                           postdec1	equ	0xFE5
   527                           fsr1l	equ	0xFE1
   528                           
   529                           	psect	cstackCOMRAM
   530  000001                     __pcstackCOMRAM:
   531                           	opt stack 0
   532  000001                     ?_digitalPinStatus:
   533                           	opt stack 0
   534  000001                     ?_readAdc:
   535                           	opt stack 0
   536  000001                     ?___wmul:
   537                           	opt stack 0
   538  000001                     ?___ftpack:
   539                           	opt stack 0
   540  000001                     writeSPI@output_data:
   541                           	opt stack 0
   542  000001                     readAdc@pin:
   543                           	opt stack 0
   544  000001                     digitalPinStatus@pin:
   545                           	opt stack 0
   546  000001                     ___wmul@multiplier:
   547                           	opt stack 0
   548  000001                     ___ftpack@arg:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x0
   552  000001                     	ds	2
   553  000003                     ??_digitalPinStatus:
   554  000003                     ??_readAdc:
   555  000003                     ___wmul@multiplicand:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x2
   559  000003                     	ds	1
   560  000004                     ___ftpack@exp:
   561                           	opt stack 0
   562  000004                     digitalPinStatus@pinValue:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x3
   566  000004                     	ds	1
   567  000005                     ___ftpack@sign:
   568                           	opt stack 0
   569  000005                     readAdc@adcValue:
   570                           	opt stack 0
   571  000005                     ___wmul@product:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x4
   575  000005                     	ds	1
   576  000006                     ??___ftpack:
   577                           
   578                           ; 1 bytes @ 0x5
   579  000006                     	ds	3
   580  000009                     ?___awtoft:
   581                           	opt stack 0
   582  000009                     ?___ftneg:
   583                           	opt stack 0
   584  000009                     ___awtoft@c:
   585                           	opt stack 0
   586  000009                     ___ftneg@f1:
   587                           	opt stack 0
   588                           
   589                           ; 3 bytes @ 0x8
   590  000009                     	ds	3
   591  00000C                     ?___ftadd:
   592                           	opt stack 0
   593  00000C                     ?_fabs:
   594                           	opt stack 0
   595  00000C                     ___awtoft@sign:
   596                           	opt stack 0
   597  00000C                     fabs@d:
   598                           	opt stack 0
   599  00000C                     ___ftadd@f1:
   600                           	opt stack 0
   601                           
   602                           ; 3 bytes @ 0xB
   603  00000C                     	ds	3
   604  00000F                     ___ftadd@f2:
   605                           	opt stack 0
   606  00000F                     ___ftge@ff1:
   607                           	opt stack 0
   608                           
   609                           ; 3 bytes @ 0xE
   610  00000F                     	ds	3
   611  000012                     ??___ftadd:
   612  000012                     ___ftge@ff2:
   613                           	opt stack 0
   614                           
   615                           ; 3 bytes @ 0x11
   616  000012                     	ds	3
   617  000015                     ??___ftge:
   618  000015                     ___ftadd@sign:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x14
   622  000015                     	ds	1
   623  000016                     ___ftadd@exp2:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x15
   627  000016                     	ds	1
   628  000017                     ___ftadd@exp1:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x16
   632  000017                     	ds	1
   633  000018                     ?___ftdiv:
   634                           	opt stack 0
   635  000018                     ?___ftsub:
   636                           	opt stack 0
   637  000018                     ___ftdiv@f1:
   638                           	opt stack 0
   639  000018                     ___ftsub@f1:
   640                           	opt stack 0
   641                           
   642                           ; 3 bytes @ 0x17
   643  000018                     	ds	3
   644  00001B                     ___ftdiv@f2:
   645                           	opt stack 0
   646  00001B                     ___ftsub@f2:
   647                           	opt stack 0
   648                           
   649                           ; 3 bytes @ 0x1A
   650  00001B                     	ds	3
   651  00001E                     ??___ftdiv:
   652  00001E                     
   653                           ; 1 bytes @ 0x1D
   654  00001E                     	ds	3
   655  000021                     ___ftdiv@cntr:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x20
   659  000021                     	ds	1
   660  000022                     ___ftdiv@f3:
   661                           	opt stack 0
   662                           
   663                           ; 3 bytes @ 0x21
   664  000022                     	ds	3
   665  000025                     ___ftdiv@exp:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x24
   669  000025                     	ds	1
   670  000026                     ___ftdiv@sign:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x25
   674  000026                     	ds	1
   675  000027                     ?___ftmul:
   676                           	opt stack 0
   677  000027                     ___ftmul@f1:
   678                           	opt stack 0
   679                           
   680                           ; 3 bytes @ 0x26
   681  000027                     	ds	3
   682  00002A                     ___ftmul@f2:
   683                           	opt stack 0
   684                           
   685                           ; 3 bytes @ 0x29
   686  00002A                     	ds	3
   687  00002D                     ??___ftmul:
   688                           
   689                           ; 1 bytes @ 0x2C
   690  00002D                     	ds	3
   691  000030                     ___ftmul@exp:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x2F
   695  000030                     	ds	1
   696  000031                     ___ftmul@f3_as_product:
   697                           	opt stack 0
   698                           
   699                           ; 3 bytes @ 0x30
   700  000031                     	ds	3
   701  000034                     ___ftmul@cntr:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x33
   705  000034                     	ds	1
   706  000035                     ___ftmul@sign:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x34
   710  000035                     	ds	1
   711  000036                     ?_eval_poly:
   712                           	opt stack 0
   713  000036                     ?___fttol:
   714                           	opt stack 0
   715  000036                     ___fttol@f1:
   716                           	opt stack 0
   717  000036                     eval_poly@x:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x35
   721  000036                     	ds	3
   722  000039                     eval_poly@d:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x38
   726  000039                     	ds	1
   727  00003A                     ??___fttol:
   728                           
   729                           ; 1 bytes @ 0x39
   730  00003A                     	ds	1
   731  00003B                     eval_poly@n:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x3A
   735  00003B                     	ds	2
   736  00003D                     ??_eval_poly:
   737                           
   738                           ; 1 bytes @ 0x3C
   739  00003D                     	ds	2
   740  00003F                     ___fttol@sign1:
   741                           	opt stack 0
   742  00003F                     eval_poly@res:
   743                           	opt stack 0
   744                           
   745                           ; 3 bytes @ 0x3E
   746  00003F                     	ds	1
   747  000040                     ___fttol@lval:
   748                           	opt stack 0
   749                           
   750                           ; 4 bytes @ 0x3F
   751  000040                     	ds	2
   752  000042                     ?_atan:
   753                           	opt stack 0
   754  000042                     atan@f:
   755                           	opt stack 0
   756                           
   757                           ; 3 bytes @ 0x41
   758  000042                     	ds	2
   759  000044                     ___fttol@exp1:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0x43
   763  000044                     	ds	1
   764  000045                     delayMs@ms:
   765                           	opt stack 0
   766  000045                     atan@y:
   767                           	opt stack 0
   768                           
   769                           ; 3 bytes @ 0x44
   770  000045                     	ds	2
   771  000047                     ??_delayMs:
   772                           
   773                           ; 1 bytes @ 0x46
   774  000047                     	ds	1
   775  000048                     atan@x:
   776                           	opt stack 0
   777                           
   778                           ; 3 bytes @ 0x47
   779  000048                     	ds	2
   780  00004A                     delayMs@debug:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x49
   784  00004A                     	ds	1
   785  00004B                     atan@recip:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x4A
   789  00004B                     	ds	1
   790  00004C                     delayMs@end_count:
   791                           	opt stack 0
   792  00004C                     atan@val_squared:
   793                           	opt stack 0
   794                           
   795                           ; 3 bytes @ 0x4B
   796  00004C                     	ds	2
   797  00004E                     ?_readWaterSensor:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0x4D
   801  00004E                     	ds	1
   802  00004F                     atan@val:
   803                           	opt stack 0
   804                           
   805                           ; 3 bytes @ 0x4E
   806  00004F                     	ds	1
   807  000050                     ??_readWaterSensor:
   808                           
   809                           ; 1 bytes @ 0x4F
   810  000050                     	ds	2
   811  000052                     ?_atan2:
   812                           	opt stack 0
   813  000052                     atan2@y:
   814                           	opt stack 0
   815                           
   816                           ; 3 bytes @ 0x51
   817  000052                     	ds	1
   818  000053                     readWaterSensor@varToSee:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x52
   822  000053                     	ds	2
   823  000055                     readWaterSensor@WaterPresent:
   824                           	opt stack 0
   825  000055                     atan2@x:
   826                           	opt stack 0
   827                           
   828                           ; 3 bytes @ 0x54
   829  000055                     	ds	3
   830  000058                     ?_getHandleAngle:
   831                           	opt stack 0
   832                           
   833                           ; 3 bytes @ 0x57
   834  000058                     	ds	3
   835  00005B                     ??_getHandleAngle:
   836                           
   837                           ; 1 bytes @ 0x5A
   838  00005B                     	ds	2
   839  00005D                     tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           postdec1	equ	0xFE5
   846                           fsr1l	equ	0xFE1
   847                           
   848                           ; 1 bytes @ 0x5C
   849 ;;
   850 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   851 ;;
   852 ;; *************** function _main *****************
   853 ;; Defined at:
   854 ;;		line 564 in file "Main.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;		None
   857 ;; Auto vars:     Size  Location     Type
   858 ;;  deltaAngle      3   66[BANK0 ] float 
   859 ;;  newAngle        3   55[BANK0 ] float 
   860 ;;  anglePreviou    3   58[BANK0 ] float 
   861 ;;  angleDelta      3   52[BANK0 ] float 
   862 ;;  angleCurrent    3   49[BANK0 ] float 
   863 ;;  adcVoltage      3   46[BANK0 ] float 
   864 ;;  readWater       2   63[BANK0 ] int 
   865 ;;  handleMoveme    2   61[BANK0 ] int 
   866 ;;  EEPROMdata      1   65[BANK0 ] unsigned char 
   867 ;; Return value:  Size  Location     Type
   868 ;;                  1    wreg      void 
   869 ;; Registers used:
   870 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   877 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   879 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   880 ;;Total ram usage:       23 bytes
   881 ;; Hardware stack levels required when called:    6
   882 ;; This function calls:
   883 ;;		_ClearWatchDogTimer
   884 ;;		___ftadd
   885 ;;		___ftge
   886 ;;		___ftmul
   887 ;;		___ftneg
   888 ;;		_delayMs
   889 ;;		_getHandleAngle
   890 ;;		_initialization
   891 ;;		_readWaterSensor
   892 ;;		_writeSPI
   893 ;; This function is called by:
   894 ;;		Startup code after reset
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           	psect	text0
   899  0016CC                     __ptext0:
   900                           	opt stack 0
   901  0016CC                     _main:
   902                           	opt stack 25
   903                           
   904                           ;Main.c: 565: initialization();
   905                           
   906                           ;incstack = 0
   907  0016CC  EC1E  F011         	call	_initialization	;wreg free
   908                           
   909                           ;Main.c: 568: char EEPROMdata = 0;
   910  0016D0  0E00               	movlw	0
   911  0016D2  0100               	movlb	0	; () banked
   912  0016D4  6FA1               	movwf	main@EEPROMdata& (0+255),b
   913                           
   914                           ; BSR set to: 0
   915                           ;Main.c: 569: EEPROMdata = 0xAA;
   916  0016D6  0EAA               	movlw	170
   917  0016D8  6FA1               	movwf	main@EEPROMdata& (0+255),b
   918                           
   919                           ;Main.c: 570: writeSPI(EEPROMdata);
   920  0016DA  51A1               	movf	main@EEPROMdata& (0+255),w,b
   921  0016DC  EC30  F012         	call	_writeSPI
   922                           
   923                           ;Main.c: 571: EEPROMdata = 7;
   924  0016E0  0E07               	movlw	7
   925  0016E2  0100               	movlb	0	; () banked
   926  0016E4  6FA1               	movwf	main@EEPROMdata& (0+255),b
   927                           
   928                           ; BSR set to: 0
   929                           ;Main.c: 572: writeSPI(EEPROMdata);
   930  0016E6  51A1               	movf	main@EEPROMdata& (0+255),w,b
   931  0016E8  EC30  F012         	call	_writeSPI
   932                           
   933                           ;Main.c: 576: float adcVoltage = getHandleAngle();
   934  0016EC  EC9B  F007         	call	_getHandleAngle	;wreg free
   935  0016F0  C058  F08E         	movff	?_getHandleAngle,main@adcVoltage
   936  0016F4  C059  F08F         	movff	?_getHandleAngle+1,main@adcVoltage+1
   937  0016F8  C05A  F090         	movff	?_getHandleAngle+2,main@adcVoltage+2
   938                           
   939                           ;Main.c: 581: TRISBbits.TRISB3 = 0;
   940  0016FC  9689               	bcf	3977,3,c	;volatile
   941                           
   942                           ;Main.c: 582: TRISBbits.TRISB4 = 0;
   943  0016FE  9889               	bcf	3977,4,c	;volatile
   944                           
   945                           ;Main.c: 584: int handleMovement = 0;
   946  001700  0E00               	movlw	0
   947  001702  0100               	movlb	0	; () banked
   948  001704  6F9E               	movwf	(main@handleMovement+1)& (0+255),b
   949  001706  0E00               	movlw	0
   950  001708  6F9D               	movwf	main@handleMovement& (0+255),b
   951                           
   952                           ; BSR set to: 0
   953                           ;Main.c: 585: float angleCurrent = 0;
   954  00170A  0E00               	movlw	0
   955  00170C  6F91               	movwf	main@angleCurrent& (0+255),b
   956  00170E  0E00               	movlw	0
   957  001710  6F92               	movwf	(main@angleCurrent+1)& (0+255),b
   958  001712  0E00               	movlw	0
   959  001714  6F93               	movwf	(main@angleCurrent+2)& (0+255),b
   960                           
   961                           ; BSR set to: 0
   962                           ;Main.c: 586: float anglePrevious = 0;
   963  001716  0E00               	movlw	0
   964  001718  6F9A               	movwf	main@anglePrevious& (0+255),b
   965  00171A  0E00               	movlw	0
   966  00171C  6F9B               	movwf	(main@anglePrevious+1)& (0+255),b
   967  00171E  0E00               	movlw	0
   968  001720  6F9C               	movwf	(main@anglePrevious+2)& (0+255),b
   969                           
   970                           ; BSR set to: 0
   971                           ;Main.c: 587: float angleDelta = 0;
   972  001722  0E00               	movlw	0
   973  001724  6F94               	movwf	main@angleDelta& (0+255),b
   974  001726  0E00               	movlw	0
   975  001728  6F95               	movwf	(main@angleDelta+1)& (0+255),b
   976  00172A  0E00               	movlw	0
   977  00172C  6F96               	movwf	(main@angleDelta+2)& (0+255),b
   978                           
   979                           ; BSR set to: 0
   980                           ;Main.c: 588: int readWater = 0;
   981  00172E  0E00               	movlw	0
   982  001730  6FA0               	movwf	(main@readWater+1)& (0+255),b
   983  001732  0E00               	movlw	0
   984  001734  6F9F               	movwf	main@readWater& (0+255),b
   985                           
   986                           ; BSR set to: 0
   987                           ;Main.c: 594: PORTBbits.RB3 = 0;
   988  001736  968E               	bcf	3982,3,c	;volatile
   989  001738                     
   990                           ; BSR set to: 0
   991                           ;Main.c: 595: PORTBbits.RB4 = 0;
   992  001738  988E               	bcf	3982,4,c	;volatile
   993  00173A                     l200:
   994                           
   995                           ; BSR set to: 0
   996                           ;Main.c: 597: {
   997                           ;Main.c: 599: anglePrevious = getHandleAngle();
   998  00173A  EC9B  F007         	call	_getHandleAngle	;wreg free
   999  00173E  C058  F09A         	movff	?_getHandleAngle,main@anglePrevious
  1000  001742  C059  F09B         	movff	?_getHandleAngle+1,main@anglePrevious+1
  1001  001746  C05A  F09C         	movff	?_getHandleAngle+2,main@anglePrevious+2
  1002                           
  1003                           ;Main.c: 603: handleMovement = 0;
  1004  00174A  0E00               	movlw	0
  1005  00174C  0100               	movlb	0	; () banked
  1006  00174E  6F9E               	movwf	(main@handleMovement+1)& (0+255),b
  1007  001750  0E00               	movlw	0
  1008  001752  6F9D               	movwf	main@handleMovement& (0+255),b
  1009                           
  1010                           ;Main.c: 604: while (handleMovement == 0)
  1011  001754  D07C               	goto	l208
  1012  001756                     
  1013                           ; BSR set to: 0
  1014                           ;Main.c: 605: {
  1015                           ;Main.c: 606: ClearWatchDogTimer();
  1016                           
  1017                           ; BSR set to: 0
  1018  001756  EC3D  F012         	call	_ClearWatchDogTimer	;wreg free
  1019                           
  1020                           ;Main.c: 607: TimeSinceLastHourCheck++;
  1021  00175A  0100               	movlb	0	; () banked
  1022  00175C  4BC7               	infsnz	_TimeSinceLastHourCheck& (0+255),f,b
  1023  00175E  2BC8               	incf	(_TimeSinceLastHourCheck+1)& (0+255),f,b
  1024                           
  1025                           ; BSR set to: 0
  1026                           ;Main.c: 608: if(TimeSinceLastHourCheck > 5000){
  1027  001760  BFC8               	btfsc	(_TimeSinceLastHourCheck+1)& (0+255),7,b
  1028  001762  D00A               	goto	l203
  1029  001764  0E89               	movlw	137
  1030  001766  5DC7               	subwf	_TimeSinceLastHourCheck& (0+255),w,b
  1031  001768  0E13               	movlw	19
  1032  00176A  59C8               	subwfb	(_TimeSinceLastHourCheck+1)& (0+255),w,b
  1033  00176C  A0D8               	btfss	status,0,c
  1034  00176E  D004               	goto	l203
  1035                           
  1036                           ; BSR set to: 0
  1037                           ;Main.c: 610: TimeSinceLastHourCheck = 0;
  1038  001770  0E00               	movlw	0
  1039  001772  6FC8               	movwf	(_TimeSinceLastHourCheck+1)& (0+255),b
  1040  001774  0E00               	movlw	0
  1041  001776  6FC7               	movwf	_TimeSinceLastHourCheck& (0+255),b
  1042  001778                     l203:
  1043                           
  1044                           ; BSR set to: 0
  1045                           ;Main.c: 611: }
  1046                           ;Main.c: 612: delayMs(upstrokeInterval);
  1047                           
  1048                           ; BSR set to: 0
  1049  001778  0E0C               	movlw	low _upstrokeInterval
  1050  00177A  6EF6               	movwf	tblptrl,c
  1051  00177C                     	if	1	;There is more than 1 active tblptr byte
  1052  00177C  0E0F               	movlw	high _upstrokeInterval
  1053  00177E  6EF7               	movwf	tblptrh,c
  1054  001780                     	endif
  1055  001780                     	if	0	;There are less than 3 active tblptr bytes
  1056  001780                     	endif
  1057  001780  0009               	tblrd		*+
  1058  001782  CFF5 F045          	movff	tablat,delayMs@ms
  1059  001786  000A               	tblrd		*-
  1060  001788  CFF5 F046          	movff	tablat,delayMs@ms+1
  1061  00178C  EC8C  F010         	call	_delayMs	;wreg free
  1062                           
  1063                           ;Main.c: 613: float newAngle = getHandleAngle();
  1064  001790  EC9B  F007         	call	_getHandleAngle	;wreg free
  1065  001794  C058  F097         	movff	?_getHandleAngle,main@newAngle
  1066  001798  C059  F098         	movff	?_getHandleAngle+1,main@newAngle+1
  1067  00179C  C05A  F099         	movff	?_getHandleAngle+2,main@newAngle+2
  1068                           
  1069                           ;Main.c: 614: float deltaAngle = newAngle - anglePrevious;
  1070  0017A0  C09A  F009         	movff	main@anglePrevious,___ftneg@f1
  1071  0017A4  C09B  F00A         	movff	main@anglePrevious+1,___ftneg@f1+1
  1072  0017A8  C09C  F00B         	movff	main@anglePrevious+2,___ftneg@f1+2
  1073  0017AC  EC10  F012         	call	___ftneg	;wreg free
  1074  0017B0  C009  F00C         	movff	?___ftneg,___ftadd@f1
  1075  0017B4  C00A  F00D         	movff	?___ftneg+1,___ftadd@f1+1
  1076  0017B8  C00B  F00E         	movff	?___ftneg+2,___ftadd@f1+2
  1077  0017BC  C097  F00F         	movff	main@newAngle,___ftadd@f2
  1078  0017C0  C098  F010         	movff	main@newAngle+1,___ftadd@f2+1
  1079  0017C4  C099  F011         	movff	main@newAngle+2,___ftadd@f2+2
  1080  0017C8  EC3E  F00C         	call	___ftadd	;wreg free
  1081  0017CC  C00C  F0A2         	movff	?___ftadd,main@deltaAngle
  1082  0017D0  C00D  F0A3         	movff	?___ftadd+1,main@deltaAngle+1
  1083  0017D4  C00E  F0A4         	movff	?___ftadd+2,main@deltaAngle+2
  1084                           
  1085                           ;Main.c: 615: if(deltaAngle < 0) {
  1086  0017D8  0100               	movlb	0	; () banked
  1087  0017DA  AFA4               	btfss	(main@deltaAngle+2)& (0+255),7,b
  1088  0017DC  D014               	goto	l204
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;Main.c: 616: deltaAngle *= -1;
  1092  0017DE  C0A2  F027         	movff	main@deltaAngle,___ftmul@f1
  1093  0017E2  C0A3  F028         	movff	main@deltaAngle+1,___ftmul@f1+1
  1094  0017E6  C0A4  F029         	movff	main@deltaAngle+2,___ftmul@f1+2
  1095  0017EA  0E00               	movlw	0
  1096  0017EC  6E2A               	movwf	___ftmul@f2,c
  1097  0017EE  0E80               	movlw	128
  1098  0017F0  6E2B               	movwf	___ftmul@f2+1,c
  1099  0017F2  0EBF               	movlw	191
  1100  0017F4  6E2C               	movwf	___ftmul@f2+2,c
  1101  0017F6  ECDF  F00E         	call	___ftmul	;wreg free
  1102  0017FA  C027  F0A2         	movff	?___ftmul,main@deltaAngle
  1103  0017FE  C028  F0A3         	movff	?___ftmul+1,main@deltaAngle+1
  1104  001802  C029  F0A4         	movff	?___ftmul+2,main@deltaAngle+2
  1105  001806                     l204:
  1106                           
  1107                           ;Main.c: 617: }
  1108                           ;Main.c: 619: if(deltaAngle > handleMovementThreshold){
  1109  001806  0E01               	movlw	low _handleMovementThreshold
  1110  001808  6EF6               	movwf	tblptrl,c
  1111  00180A                     	if	1	;There is more than 1 active tblptr byte
  1112  00180A  0E0F               	movlw	high _handleMovementThreshold
  1113  00180C  6EF7               	movwf	tblptrh,c
  1114  00180E                     	endif
  1115  00180E                     	if	0	;There are less than 3 active tblptr bytes
  1116  00180E                     	endif
  1117  00180E  0009               	tblrd		*+
  1118  001810  CFF5 F00F          	movff	tablat,___ftge@ff1
  1119  001814  0009               	tblrd		*+
  1120  001816  CFF5 F010          	movff	tablat,___ftge@ff1+1
  1121  00181A  000A               	tblrd		*-
  1122  00181C  CFF5 F011          	movff	tablat,___ftge@ff1+2
  1123  001820  C0A2  F012         	movff	main@deltaAngle,___ftge@ff2
  1124  001824  C0A3  F013         	movff	main@deltaAngle+1,___ftge@ff2+1
  1125  001828  C0A4  F014         	movff	main@deltaAngle+2,___ftge@ff2+2
  1126  00182C  ECD6  F010         	call	___ftge	;wreg free
  1127  001830  B0D8               	btfsc	status,0,c
  1128  001832  D007               	goto	l205
  1129                           
  1130                           ;Main.c: 620: handleMovement = 1;
  1131  001834  0E00               	movlw	0
  1132  001836  0100               	movlb	0	; () banked
  1133  001838  6F9E               	movwf	(main@handleMovement+1)& (0+255),b
  1134  00183A  0E01               	movlw	1
  1135  00183C  6F9D               	movwf	main@handleMovement& (0+255),b
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;Main.c: 621: PORTBbits.RB3 = 1;
  1139  00183E  868E               	bsf	3982,3,c	;volatile
  1140  001840  D002               	goto	L3
  1141  001842                     l205:
  1142                           
  1143                           ;Main.c: 626: PORTBbits.RB3 = 0;
  1144  001842  968E               	bcf	3982,3,c	;volatile
  1145                           
  1146                           ;Main.c: 627: if (readWater == 0) {
  1147  001844  0100               	movlb	0	; () banked
  1148  001846                     L3:
  1149  001846  519F               	movf	main@readWater& (0+255),w,b
  1150  001848  11A0               	iorwf	(main@readWater+1)& (0+255),w,b
  1151  00184A  B4D8               	btfsc	status,2,c
  1152                           
  1153                           ; BSR set to: 0
  1154                           ;Main.c: 628: PORTBbits.RB4 = 0;
  1155  00184C  988E               	bcf	3982,4,c	;volatile
  1156  00184E                     l208:
  1157                           
  1158                           ; BSR set to: 0
  1159                           
  1160                           ; BSR set to: 0
  1161                           
  1162                           ; BSR set to: 0
  1163                           
  1164                           ; BSR set to: 0
  1165  00184E  519D               	movf	main@handleMovement& (0+255),w,b
  1166  001850  119E               	iorwf	(main@handleMovement+1)& (0+255),w,b
  1167  001852  B4D8               	btfsc	status,2,c
  1168  001854  D780               	goto	l202
  1169                           
  1170                           ; BSR set to: 0
  1171                           ;Main.c: 629: }
  1172                           ;Main.c: 632: }
  1173                           ;Main.c: 633: }
  1174                           ;Main.c: 636: if (readWaterSensor()) {
  1175                           
  1176                           ; BSR set to: 0
  1177  001856  ECCE  F00D         	call	_readWaterSensor	;wreg free
  1178  00185A  504E               	movf	?_readWaterSensor,w,c
  1179  00185C  104F               	iorwf	?_readWaterSensor+1,w,c
  1180  00185E  B4D8               	btfsc	status,2,c
  1181  001860  D007               	goto	l210
  1182                           
  1183                           ;Main.c: 637: readWater = 1;
  1184  001862  0E00               	movlw	0
  1185  001864  0100               	movlb	0	; () banked
  1186  001866  6FA0               	movwf	(main@readWater+1)& (0+255),b
  1187  001868  0E01               	movlw	1
  1188  00186A  6F9F               	movwf	main@readWater& (0+255),b
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;Main.c: 638: PORTBbits.RB4 = 1;
  1192  00186C  888E               	bsf	3982,4,c	;volatile
  1193                           
  1194                           ;Main.c: 639: }
  1195  00186E  D765               	goto	l200
  1196  001870                     l210:
  1197                           
  1198                           ;Main.c: 640: else {
  1199                           ;Main.c: 641: readWater = 0;
  1200                           
  1201                           ; BSR set to: 0
  1202  001870  0E00               	movlw	0
  1203  001872  0100               	movlb	0	; () banked
  1204  001874  6FA0               	movwf	(main@readWater+1)& (0+255),b
  1205  001876  0E00               	movlw	0
  1206  001878  6F9F               	movwf	main@readWater& (0+255),b
  1207  00187A  D75E               	goto	L4
  1208  00187C                     __end_of_main:
  1209                           	opt stack 0
  1210                           tblptru	equ	0xFF8
  1211                           tblptrh	equ	0xFF7
  1212                           tblptrl	equ	0xFF6
  1213                           tablat	equ	0xFF5
  1214                           postinc0	equ	0xFEE
  1215                           wreg	equ	0xFE8
  1216                           postdec1	equ	0xFE5
  1217                           fsr1l	equ	0xFE1
  1218                           status	equ	0xFD8
  1219                           
  1220 ;; *************** function _writeSPI *****************
  1221 ;; Defined at:
  1222 ;;		line 251 in file "Main.c"
  1223 ;; Parameters:    Size  Location     Type
  1224 ;;  output_data     1    wreg     unsigned char 
  1225 ;; Auto vars:     Size  Location     Type
  1226 ;;  output_data     1    0[COMRAM] unsigned char 
  1227 ;; Return value:  Size  Location     Type
  1228 ;;                  1    wreg      void 
  1229 ;; Registers used:
  1230 ;;		wreg
  1231 ;; Tracked objects:
  1232 ;;		On entry : 0/0
  1233 ;;		On exit  : 0/0
  1234 ;;		Unchanged: 0/0
  1235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1239 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1240 ;;Total ram usage:        1 bytes
  1241 ;; Hardware stack levels used:    1
  1242 ;; This function calls:
  1243 ;;		Nothing
  1244 ;; This function is called by:
  1245 ;;		_main
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           	psect	text1
  1250  002460                     __ptext1:
  1251                           	opt stack 0
  1252  002460                     _writeSPI:
  1253                           	opt stack 30
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;incstack = 0
  1257                           ;writeSPI@output_data stored from wreg
  1258  002460  6E01               	movwf	writeSPI@output_data,c
  1259  002462                     
  1260                           ;Main.c: 252: while(SSP1STATbits.BF==1){ }
  1261  002462  B095               	btfsc	3989,0,c	;volatile
  1262  002464  D7FE               	goto	l2286
  1263                           
  1264                           ;Main.c: 253: SSP1CON1bits.WCOL = 0;
  1265  002466  9E96               	bcf	3990,7,c	;volatile
  1266                           
  1267                           ;Main.c: 254: SSP1BUF = output_data;
  1268  002468  C001  FF92         	movff	writeSPI@output_data,3986	;volatile
  1269  00246C  0012               	return		;funcret
  1270  00246E                     __end_of_writeSPI:
  1271                           	opt stack 0
  1272                           tblptru	equ	0xFF8
  1273                           tblptrh	equ	0xFF7
  1274                           tblptrl	equ	0xFF6
  1275                           tablat	equ	0xFF5
  1276                           postinc0	equ	0xFEE
  1277                           wreg	equ	0xFE8
  1278                           postdec1	equ	0xFE5
  1279                           fsr1l	equ	0xFE1
  1280                           status	equ	0xFD8
  1281                           
  1282 ;; *************** function _readWaterSensor *****************
  1283 ;; Defined at:
  1284 ;;		line 409 in file "Main.c"
  1285 ;; Parameters:    Size  Location     Type
  1286 ;;		None
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;  WaterPresent    2   84[COMRAM] int 
  1289 ;;  varToSee        2   82[COMRAM] int 
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  2   77[COMRAM] int 
  1292 ;; Registers used:
  1293 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1299 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1300 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1301 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1302 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1303 ;;Total ram usage:        9 bytes
  1304 ;; Hardware stack levels used:    1
  1305 ;; Hardware stack levels required when called:    3
  1306 ;; This function calls:
  1307 ;;		_delayMs
  1308 ;;		_digitalPinStatus
  1309 ;; This function is called by:
  1310 ;;		_main
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           	psect	text2
  1315  001B9C                     __ptext2:
  1316                           	opt stack 0
  1317  001B9C                     _readWaterSensor:
  1318                           	opt stack 27
  1319                           
  1320                           ;Main.c: 411: int WaterPresent = 0;
  1321                           
  1322                           ;incstack = 0
  1323  001B9C  0E00               	movlw	0
  1324  001B9E  6E56               	movwf	readWaterSensor@WaterPresent+1,c
  1325  001BA0  0E00               	movlw	0
  1326  001BA2  6E55               	movwf	readWaterSensor@WaterPresent,c
  1327                           
  1328                           ;Main.c: 413: delayMs(5);
  1329  001BA4  0E00               	movlw	0
  1330  001BA6  6E46               	movwf	delayMs@ms+1,c
  1331  001BA8  0E05               	movlw	5
  1332  001BAA  6E45               	movwf	delayMs@ms,c
  1333  001BAC  EC8C  F010         	call	_delayMs	;wreg free
  1334                           
  1335                           ;Main.c: 415: TMR0 = 0;
  1336  001BB0  0E00               	movlw	0
  1337  001BB2  6ED3               	movwf	4051,c	;volatile
  1338                           
  1339                           ;Main.c: 416: if (digitalPinStatus(waterPresenceSensorPin) == 1) {
  1340  001BB4  C05D  F001         	movff	_waterPresenceSensorPin,digitalPinStatus@pin
  1341  001BB8  C05E  F002         	movff	_waterPresenceSensorPin+1,digitalPinStatus@pin+1
  1342  001BBC  EC14  F00D         	call	_digitalPinStatus	;wreg free
  1343  001BC0  0401               	decf	?_digitalPinStatus,w,c
  1344  001BC2  1002               	iorwf	?_digitalPinStatus+1,w,c
  1345  001BC4  A4D8               	btfss	status,2,c
  1346  001BC6  D01D               	goto	u2580
  1347  001BC8                     u2560:
  1348                           
  1349                           ;Main.c: 417: while ((digitalPinStatus(waterPresenceSensorPin))&&(TMR0 <= pulseWidthThre
      +                          shold)) {
  1350  001BC8  C05D  F001         	movff	_waterPresenceSensorPin,digitalPinStatus@pin
  1351  001BCC  C05E  F002         	movff	_waterPresenceSensorPin+1,digitalPinStatus@pin+1
  1352  001BD0  EC14  F00D         	call	_digitalPinStatus	;wreg free
  1353  001BD4  5001               	movf	?_digitalPinStatus,w,c
  1354  001BD6  1002               	iorwf	?_digitalPinStatus+1,w,c
  1355  001BD8  B4D8               	btfsc	status,2,c
  1356  001BDA  D013               	goto	u2580
  1357  001BDC  50D3               	movf	4051,w,c	;volatile
  1358  001BDE  6E50               	movwf	??_readWaterSensor& (0+255),c
  1359  001BE0  6A51               	clrf	(??_readWaterSensor+1)& (0+255),c
  1360  001BE2  0E0A               	movlw	low _pulseWidthThreshold
  1361  001BE4  6EF6               	movwf	tblptrl,c
  1362  001BE6                     	if	1	;There is more than 1 active tblptr byte
  1363  001BE6  0E0F               	movlw	high _pulseWidthThreshold
  1364  001BE8  6EF7               	movwf	tblptrh,c
  1365  001BEA                     	endif
  1366  001BEA                     	if	0	;There are less than 3 active tblptr bytes
  1367  001BEA                     	endif
  1368  001BEA  5050               	movf	??_readWaterSensor,w,c
  1369  001BEC  0009               	tblrd		*+
  1370  001BEE  5CF5               	subwf	tablat,w,c
  1371  001BF0  0009               	tblrd		*+
  1372  001BF2  50F5               	movf	tablat,w,c
  1373  001BF4  0A80               	xorlw	128
  1374  001BF6  6E52               	movwf	(??_readWaterSensor+2)& (0+255),c
  1375  001BF8  5051               	movf	??_readWaterSensor+1,w,c
  1376  001BFA  0A80               	xorlw	128
  1377  001BFC  5852               	subwfb	(??_readWaterSensor+2)& (0+255),w,c
  1378  001BFE  B0D8               	btfsc	status,0,c
  1379  001C00  D7E3               	goto	u2560
  1380  001C02                     u2580:
  1381                           
  1382                           ;Main.c: 419: }
  1383                           ;Main.c: 421: TMR0 = 0;
  1384                           
  1385                           ;Main.c: 418: };
  1386  001C02  0E00               	movlw	0
  1387  001C04  6ED3               	movwf	4051,c	;volatile
  1388  001C06  C05D  F001         	movff	_waterPresenceSensorPin,digitalPinStatus@pin
  1389  001C0A  C05E  F002         	movff	_waterPresenceSensorPin+1,digitalPinStatus@pin+1
  1390  001C0E  EC14  F00D         	call	_digitalPinStatus	;wreg free
  1391  001C12  5001               	movf	?_digitalPinStatus,w,c
  1392  001C14  1002               	iorwf	?_digitalPinStatus+1,w,c
  1393  001C16  A4D8               	btfss	status,2,c
  1394  001C18  D013               	goto	u2600
  1395  001C1A  50D3               	movf	4051,w,c	;volatile
  1396  001C1C  6E50               	movwf	??_readWaterSensor& (0+255),c
  1397  001C1E  6A51               	clrf	(??_readWaterSensor+1)& (0+255),c
  1398  001C20  0E0A               	movlw	low _pulseWidthThreshold
  1399  001C22  6EF6               	movwf	tblptrl,c
  1400  001C24                     	if	1	;There is more than 1 active tblptr byte
  1401  001C24  0E0F               	movlw	high _pulseWidthThreshold
  1402  001C26  6EF7               	movwf	tblptrh,c
  1403  001C28                     	endif
  1404  001C28                     	if	0	;There are less than 3 active tblptr bytes
  1405  001C28                     	endif
  1406  001C28  5050               	movf	??_readWaterSensor,w,c
  1407  001C2A  0009               	tblrd		*+
  1408  001C2C  5CF5               	subwf	tablat,w,c
  1409  001C2E  0009               	tblrd		*+
  1410  001C30  50F5               	movf	tablat,w,c
  1411  001C32  0A80               	xorlw	128
  1412  001C34  6E52               	movwf	(??_readWaterSensor+2)& (0+255),c
  1413  001C36  5051               	movf	??_readWaterSensor+1,w,c
  1414  001C38  0A80               	xorlw	128
  1415  001C3A  5852               	subwfb	(??_readWaterSensor+2)& (0+255),w,c
  1416  001C3C  B0D8               	btfsc	status,0,c
  1417  001C3E  D7E3               	goto	l144
  1418  001C40                     u2600:
  1419                           
  1420                           ;Main.c: 423: };
  1421                           ;Main.c: 425: TMR0 = 0;
  1422  001C40  0E00               	movlw	0
  1423  001C42  6ED3               	movwf	4051,c	;volatile
  1424  001C44  C05D  F001         	movff	_waterPresenceSensorPin,digitalPinStatus@pin
  1425  001C48  C05E  F002         	movff	_waterPresenceSensorPin+1,digitalPinStatus@pin+1
  1426  001C4C  EC14  F00D         	call	_digitalPinStatus	;wreg free
  1427  001C50  5001               	movf	?_digitalPinStatus,w,c
  1428  001C52  1002               	iorwf	?_digitalPinStatus+1,w,c
  1429  001C54  B4D8               	btfsc	status,2,c
  1430  001C56  D013               	goto	u2620
  1431  001C58  50D3               	movf	4051,w,c	;volatile
  1432  001C5A  6E50               	movwf	??_readWaterSensor& (0+255),c
  1433  001C5C  6A51               	clrf	(??_readWaterSensor+1)& (0+255),c
  1434  001C5E  0E0A               	movlw	low _pulseWidthThreshold
  1435  001C60  6EF6               	movwf	tblptrl,c
  1436  001C62                     	if	1	;There is more than 1 active tblptr byte
  1437  001C62  0E0F               	movlw	high _pulseWidthThreshold
  1438  001C64  6EF7               	movwf	tblptrh,c
  1439  001C66                     	endif
  1440  001C66                     	if	0	;There are less than 3 active tblptr bytes
  1441  001C66                     	endif
  1442  001C66  5050               	movf	??_readWaterSensor,w,c
  1443  001C68  0009               	tblrd		*+
  1444  001C6A  5CF5               	subwf	tablat,w,c
  1445  001C6C  0009               	tblrd		*+
  1446  001C6E  50F5               	movf	tablat,w,c
  1447  001C70  0A80               	xorlw	128
  1448  001C72  6E52               	movwf	(??_readWaterSensor+2)& (0+255),c
  1449  001C74  5051               	movf	??_readWaterSensor+1,w,c
  1450  001C76  0A80               	xorlw	128
  1451  001C78  5852               	subwfb	(??_readWaterSensor+2)& (0+255),w,c
  1452  001C7A  B0D8               	btfsc	status,0,c
  1453  001C7C  D7E3               	goto	l149
  1454  001C7E                     u2620:
  1455                           
  1456                           ;Main.c: 427: };
  1457                           ;Main.c: 428: int varToSee = digitalPinStatus(waterPresenceSensorPin);
  1458  001C7E  C05D  F001         	movff	_waterPresenceSensorPin,digitalPinStatus@pin
  1459  001C82  C05E  F002         	movff	_waterPresenceSensorPin+1,digitalPinStatus@pin+1
  1460  001C86  EC14  F00D         	call	_digitalPinStatus	;wreg free
  1461  001C8A  C001  F053         	movff	?_digitalPinStatus,readWaterSensor@varToSee
  1462  001C8E  C002  F054         	movff	?_digitalPinStatus+1,readWaterSensor@varToSee+1
  1463                           
  1464                           ;Main.c: 429: if(TMR0 <= pulseWidthThreshold){
  1465  001C92  50D3               	movf	4051,w,c	;volatile
  1466  001C94  6E50               	movwf	??_readWaterSensor& (0+255),c
  1467  001C96  6A51               	clrf	(??_readWaterSensor+1)& (0+255),c
  1468  001C98  0E0A               	movlw	low _pulseWidthThreshold
  1469  001C9A  6EF6               	movwf	tblptrl,c
  1470  001C9C                     	if	1	;There is more than 1 active tblptr byte
  1471  001C9C  0E0F               	movlw	high _pulseWidthThreshold
  1472  001C9E  6EF7               	movwf	tblptrh,c
  1473  001CA0                     	endif
  1474  001CA0                     	if	0	;There are less than 3 active tblptr bytes
  1475  001CA0                     	endif
  1476  001CA0  5050               	movf	??_readWaterSensor,w,c
  1477  001CA2  0009               	tblrd		*+
  1478  001CA4  5CF5               	subwf	tablat,w,c
  1479  001CA6  0009               	tblrd		*+
  1480  001CA8  50F5               	movf	tablat,w,c
  1481  001CAA  0A80               	xorlw	128
  1482  001CAC  6E52               	movwf	(??_readWaterSensor+2)& (0+255),c
  1483  001CAE  5051               	movf	??_readWaterSensor+1,w,c
  1484  001CB0  0A80               	xorlw	128
  1485  001CB2  5852               	subwfb	(??_readWaterSensor+2)& (0+255),w,c
  1486  001CB4  A0D8               	btfss	status,0,c
  1487  001CB6  D004               	goto	l153
  1488                           
  1489                           ;Main.c: 430: WaterPresent = 1;
  1490  001CB8  0E00               	movlw	0
  1491  001CBA  6E56               	movwf	readWaterSensor@WaterPresent+1,c
  1492  001CBC  0E01               	movlw	1
  1493  001CBE  6E55               	movwf	readWaterSensor@WaterPresent,c
  1494  001CC0                     l153:
  1495                           
  1496                           ;Main.c: 431: }
  1497                           ;Main.c: 432: return WaterPresent;
  1498  001CC0  C055  F04E         	movff	readWaterSensor@WaterPresent,?_readWaterSensor
  1499  001CC4  C056  F04F         	movff	readWaterSensor@WaterPresent+1,?_readWaterSensor+1
  1500  001CC8  0012               	return	
  1501  001CCA                     __end_of_readWaterSensor:
  1502                           	opt stack 0
  1503                           tblptru	equ	0xFF8
  1504                           tblptrh	equ	0xFF7
  1505                           tblptrl	equ	0xFF6
  1506                           tablat	equ	0xFF5
  1507                           postinc0	equ	0xFEE
  1508                           wreg	equ	0xFE8
  1509                           postdec1	equ	0xFE5
  1510                           fsr1l	equ	0xFE1
  1511                           status	equ	0xFD8
  1512                           
  1513 ;; *************** function _digitalPinStatus *****************
  1514 ;; Defined at:
  1515 ;;		line 266 in file "Pin_Manager.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;  pin             2    0[COMRAM] int 
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;  pinValue        2    3[COMRAM] int 
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  2    0[COMRAM] int 
  1522 ;; Registers used:
  1523 ;;		wreg, status,2, status,0
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1529 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1530 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1531 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1532 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1533 ;;Total ram usage:        5 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; This function calls:
  1536 ;;		Nothing
  1537 ;; This function is called by:
  1538 ;;		_readWaterSensor
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text3
  1543  001A28                     __ptext3:
  1544                           	opt stack 0
  1545  001A28                     _digitalPinStatus:
  1546                           	opt stack 29
  1547                           
  1548                           ;Pin_Manager.c: 268: int pinValue;
  1549                           ;Pin_Manager.c: 269: if (pin == 2)
  1550                           
  1551                           ;incstack = 0
  1552  001A28  0E02               	movlw	2
  1553  001A2A  1801               	xorwf	digitalPinStatus@pin,w,c
  1554  001A2C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1555  001A2E  A4D8               	btfss	status,2,c
  1556  001A30  D003               	goto	l235
  1557                           
  1558                           ;Pin_Manager.c: 270: {
  1559                           ;Pin_Manager.c: 271: pinValue = PORTAbits.RA0;
  1560  001A32  A08D               	btfss	3981,0,c	;volatile
  1561  001A34  D0AA               	goto	L5
  1562  001A36  D09F               	goto	u2421
  1563  001A38                     l235:
  1564                           
  1565                           ;Pin_Manager.c: 273: else if (pin == 3)
  1566  001A38  0E03               	movlw	3
  1567  001A3A  1801               	xorwf	digitalPinStatus@pin,w,c
  1568  001A3C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1569  001A3E  A4D8               	btfss	status,2,c
  1570  001A40  D003               	goto	l237
  1571                           
  1572                           ;Pin_Manager.c: 274: {
  1573                           ;Pin_Manager.c: 275: pinValue = PORTAbits.RA1;
  1574  001A42  A28D               	btfss	3981,1,c	;volatile
  1575  001A44  D0A2               	goto	L5
  1576  001A46  D097               	goto	u2421
  1577  001A48                     l237:
  1578                           
  1579                           ;Pin_Manager.c: 277: else if (pin == 4)
  1580  001A48  0E04               	movlw	4
  1581  001A4A  1801               	xorwf	digitalPinStatus@pin,w,c
  1582  001A4C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1583  001A4E  A4D8               	btfss	status,2,c
  1584  001A50  D003               	goto	l239
  1585                           
  1586                           ;Pin_Manager.c: 278: {
  1587                           ;Pin_Manager.c: 279: pinValue = PORTAbits.RA2;
  1588  001A52  A48D               	btfss	3981,2,c	;volatile
  1589  001A54  D09A               	goto	L5
  1590  001A56  D08F               	goto	u2421
  1591  001A58                     l239:
  1592                           
  1593                           ;Pin_Manager.c: 281: else if (pin == 5)
  1594  001A58  0E05               	movlw	5
  1595  001A5A  1801               	xorwf	digitalPinStatus@pin,w,c
  1596  001A5C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1597  001A5E  A4D8               	btfss	status,2,c
  1598  001A60  D003               	goto	l241
  1599                           
  1600                           ;Pin_Manager.c: 282: {
  1601                           ;Pin_Manager.c: 283: pinValue = PORTAbits.RA3;
  1602  001A62  A68D               	btfss	3981,3,c	;volatile
  1603  001A64  D092               	goto	L5
  1604  001A66  D087               	goto	u2421
  1605  001A68                     l241:
  1606                           
  1607                           ;Pin_Manager.c: 285: else if (pin == 6)
  1608  001A68  0E06               	movlw	6
  1609  001A6A  1801               	xorwf	digitalPinStatus@pin,w,c
  1610  001A6C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1611  001A6E  A4D8               	btfss	status,2,c
  1612  001A70  D003               	goto	l243
  1613                           
  1614                           ;Pin_Manager.c: 286: {
  1615                           ;Pin_Manager.c: 287: pinValue = PORTAbits.RA4;
  1616  001A72  A88D               	btfss	3981,4,c	;volatile
  1617  001A74  D08A               	goto	L5
  1618  001A76  D07F               	goto	u2421
  1619  001A78                     l243:
  1620                           
  1621                           ;Pin_Manager.c: 289: else if (pin == 7)
  1622  001A78  0E07               	movlw	7
  1623  001A7A  1801               	xorwf	digitalPinStatus@pin,w,c
  1624  001A7C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1625  001A7E  A4D8               	btfss	status,2,c
  1626  001A80  D003               	goto	l245
  1627                           
  1628                           ;Pin_Manager.c: 290: {
  1629                           ;Pin_Manager.c: 291: pinValue = PORTAbits.RA5;
  1630  001A82  AA8D               	btfss	3981,5,c	;volatile
  1631  001A84  D082               	goto	L5
  1632  001A86  D077               	goto	u2421
  1633  001A88                     l245:
  1634                           
  1635                           ;Pin_Manager.c: 294: else if (pin == 9)
  1636  001A88  0E09               	movlw	9
  1637  001A8A  1801               	xorwf	digitalPinStatus@pin,w,c
  1638  001A8C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1639  001A8E  A4D8               	btfss	status,2,c
  1640  001A90  D003               	goto	l247
  1641                           
  1642                           ;Pin_Manager.c: 295: {
  1643                           ;Pin_Manager.c: 296: pinValue = PORTAbits.RA7;
  1644  001A92  AE8D               	btfss	3981,7,c	;volatile
  1645  001A94  D07A               	goto	L5
  1646  001A96  D06F               	goto	u2421
  1647  001A98                     l247:
  1648                           
  1649                           ;Pin_Manager.c: 298: else if (pin == 10)
  1650  001A98  0E0A               	movlw	10
  1651  001A9A  1801               	xorwf	digitalPinStatus@pin,w,c
  1652  001A9C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1653  001A9E  A4D8               	btfss	status,2,c
  1654  001AA0  D003               	goto	l249
  1655                           
  1656                           ;Pin_Manager.c: 299: {
  1657                           ;Pin_Manager.c: 300: pinValue = PORTAbits.RA6;
  1658  001AA2  AC8D               	btfss	3981,6,c	;volatile
  1659  001AA4  D072               	goto	L5
  1660  001AA6  D067               	goto	u2421
  1661  001AA8                     l249:
  1662                           
  1663                           ;Pin_Manager.c: 302: else if (pin == 11)
  1664  001AA8  0E0B               	movlw	11
  1665  001AAA  1801               	xorwf	digitalPinStatus@pin,w,c
  1666  001AAC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1667  001AAE  A4D8               	btfss	status,2,c
  1668  001AB0  D003               	goto	l251
  1669                           
  1670                           ;Pin_Manager.c: 303: {
  1671                           ;Pin_Manager.c: 304: pinValue = PORTCbits.RC0;
  1672  001AB2  A08F               	btfss	3983,0,c	;volatile
  1673  001AB4  D06A               	goto	L5
  1674  001AB6  D05F               	goto	u2421
  1675  001AB8                     l251:
  1676                           
  1677                           ;Pin_Manager.c: 306: else if (pin == 12)
  1678  001AB8  0E0C               	movlw	12
  1679  001ABA  1801               	xorwf	digitalPinStatus@pin,w,c
  1680  001ABC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1681  001ABE  A4D8               	btfss	status,2,c
  1682  001AC0  D003               	goto	l253
  1683                           
  1684                           ;Pin_Manager.c: 307: {
  1685                           ;Pin_Manager.c: 308: pinValue = PORTCbits.RC1;
  1686  001AC2  A28F               	btfss	3983,1,c	;volatile
  1687  001AC4  D062               	goto	L5
  1688  001AC6  D057               	goto	u2421
  1689  001AC8                     l253:
  1690                           
  1691                           ;Pin_Manager.c: 310: else if (pin == 13)
  1692  001AC8  0E0D               	movlw	13
  1693  001ACA  1801               	xorwf	digitalPinStatus@pin,w,c
  1694  001ACC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1695  001ACE  A4D8               	btfss	status,2,c
  1696  001AD0  D003               	goto	l255
  1697                           
  1698                           ;Pin_Manager.c: 311: {
  1699                           ;Pin_Manager.c: 312: pinValue = PORTCbits.RC2;
  1700  001AD2  A48F               	btfss	3983,2,c	;volatile
  1701  001AD4  D05A               	goto	L5
  1702  001AD6  D04F               	goto	u2421
  1703  001AD8                     l255:
  1704                           
  1705                           ;Pin_Manager.c: 314: else if (pin == 14)
  1706  001AD8  0E0E               	movlw	14
  1707  001ADA  1801               	xorwf	digitalPinStatus@pin,w,c
  1708  001ADC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1709  001ADE  A4D8               	btfss	status,2,c
  1710  001AE0  D003               	goto	l257
  1711                           
  1712                           ;Pin_Manager.c: 315: {
  1713                           ;Pin_Manager.c: 316: pinValue = PORTCbits.RC3;
  1714  001AE2  A68F               	btfss	3983,3,c	;volatile
  1715  001AE4  D052               	goto	L5
  1716  001AE6  D047               	goto	u2421
  1717  001AE8                     l257:
  1718                           
  1719                           ;Pin_Manager.c: 318: else if (pin == 15)
  1720  001AE8  0E0F               	movlw	15
  1721  001AEA  1801               	xorwf	digitalPinStatus@pin,w,c
  1722  001AEC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1723  001AEE  A4D8               	btfss	status,2,c
  1724  001AF0  D003               	goto	l259
  1725                           
  1726                           ;Pin_Manager.c: 319: {
  1727                           ;Pin_Manager.c: 320: pinValue = PORTCbits.RC4;
  1728  001AF2  A88F               	btfss	3983,4,c	;volatile
  1729  001AF4  D04A               	goto	L5
  1730  001AF6  D03F               	goto	u2421
  1731  001AF8                     l259:
  1732                           
  1733                           ;Pin_Manager.c: 322: else if (pin == 16)
  1734  001AF8  0E10               	movlw	16
  1735  001AFA  1801               	xorwf	digitalPinStatus@pin,w,c
  1736  001AFC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1737  001AFE  A4D8               	btfss	status,2,c
  1738  001B00  D003               	goto	l261
  1739                           
  1740                           ;Pin_Manager.c: 323: {
  1741                           ;Pin_Manager.c: 324: pinValue = PORTCbits.RC5;
  1742  001B02  AA8F               	btfss	3983,5,c	;volatile
  1743  001B04  D042               	goto	L5
  1744  001B06  D037               	goto	u2421
  1745  001B08                     l261:
  1746                           
  1747                           ;Pin_Manager.c: 326: else if (pin == 17)
  1748  001B08  0E11               	movlw	17
  1749  001B0A  1801               	xorwf	digitalPinStatus@pin,w,c
  1750  001B0C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1751  001B0E  A4D8               	btfss	status,2,c
  1752  001B10  D003               	goto	l263
  1753                           
  1754                           ;Pin_Manager.c: 327: {
  1755                           ;Pin_Manager.c: 328: pinValue = PORTCbits.RC6;
  1756  001B12  AC8F               	btfss	3983,6,c	;volatile
  1757  001B14  D03A               	goto	L5
  1758  001B16  D02F               	goto	u2421
  1759  001B18                     l263:
  1760                           
  1761                           ;Pin_Manager.c: 330: else if (pin == 18)
  1762  001B18  0E12               	movlw	18
  1763  001B1A  1801               	xorwf	digitalPinStatus@pin,w,c
  1764  001B1C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1765  001B1E  A4D8               	btfss	status,2,c
  1766  001B20  D003               	goto	l265
  1767                           
  1768                           ;Pin_Manager.c: 331: {
  1769                           ;Pin_Manager.c: 332: pinValue = PORTCbits.RC7;
  1770  001B22  AE8F               	btfss	3983,7,c	;volatile
  1771  001B24  D032               	goto	L5
  1772  001B26  D027               	goto	u2421
  1773  001B28                     l265:
  1774                           
  1775                           ;Pin_Manager.c: 335: else if (pin == 21)
  1776  001B28  0E15               	movlw	21
  1777  001B2A  1801               	xorwf	digitalPinStatus@pin,w,c
  1778  001B2C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1779  001B2E  A4D8               	btfss	status,2,c
  1780  001B30  D003               	goto	l267
  1781                           
  1782                           ;Pin_Manager.c: 336: {
  1783                           ;Pin_Manager.c: 337: pinValue = PORTBbits.RB0;
  1784  001B32  A08E               	btfss	3982,0,c	;volatile
  1785  001B34  D02A               	goto	L5
  1786  001B36  D01F               	goto	u2421
  1787  001B38                     l267:
  1788                           
  1789                           ;Pin_Manager.c: 339: else if (pin == 22)
  1790  001B38  0E16               	movlw	22
  1791  001B3A  1801               	xorwf	digitalPinStatus@pin,w,c
  1792  001B3C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1793  001B3E  A4D8               	btfss	status,2,c
  1794  001B40  D003               	goto	l269
  1795                           
  1796                           ;Pin_Manager.c: 340: {
  1797                           ;Pin_Manager.c: 341: pinValue = PORTBbits.RB1;
  1798  001B42  A28E               	btfss	3982,1,c	;volatile
  1799  001B44  D022               	goto	L5
  1800  001B46  D017               	goto	u2421
  1801  001B48                     l269:
  1802                           
  1803                           ;Pin_Manager.c: 343: else if (pin == 23)
  1804  001B48  0E17               	movlw	23
  1805  001B4A  1801               	xorwf	digitalPinStatus@pin,w,c
  1806  001B4C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1807  001B4E  A4D8               	btfss	status,2,c
  1808  001B50  D003               	goto	l271
  1809                           
  1810                           ;Pin_Manager.c: 344: {
  1811                           ;Pin_Manager.c: 345: pinValue = PORTBbits.RB2;
  1812  001B52  A48E               	btfss	3982,2,c	;volatile
  1813  001B54  D01A               	goto	L5
  1814  001B56  D00F               	goto	u2421
  1815  001B58                     l271:
  1816                           
  1817                           ;Pin_Manager.c: 347: else if (pin == 24)
  1818  001B58  0E18               	movlw	24
  1819  001B5A  1801               	xorwf	digitalPinStatus@pin,w,c
  1820  001B5C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1821  001B5E  A4D8               	btfss	status,2,c
  1822  001B60  D003               	goto	l273
  1823                           
  1824                           ;Pin_Manager.c: 348: {
  1825                           ;Pin_Manager.c: 349: pinValue = PORTBbits.RB3;
  1826  001B62  A68E               	btfss	3982,3,c	;volatile
  1827  001B64  D012               	goto	L5
  1828  001B66  D007               	goto	u2421
  1829  001B68                     l273:
  1830                           
  1831                           ;Pin_Manager.c: 351: else if (pin == 25)
  1832  001B68  0E19               	movlw	25
  1833  001B6A  1801               	xorwf	digitalPinStatus@pin,w,c
  1834  001B6C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1835  001B6E  A4D8               	btfss	status,2,c
  1836  001B70  D005               	goto	l275
  1837                           
  1838                           ;Pin_Manager.c: 352: {
  1839                           ;Pin_Manager.c: 353: pinValue = PORTBbits.RB4;
  1840  001B72  A88E               	btfss	3982,4,c	;volatile
  1841  001B74  D00A               	goto	L5
  1842  001B76                     u2421:
  1843  001B76  6A03               	clrf	??_digitalPinStatus& (0+255),c
  1844  001B78  2A03               	incf	??_digitalPinStatus& (0+255),f,c
  1845  001B7A  D008               	goto	u2448
  1846  001B7C                     l275:
  1847                           
  1848                           ;Pin_Manager.c: 355: else if (pin == 26)
  1849  001B7C  0E1A               	movlw	26
  1850  001B7E  1801               	xorwf	digitalPinStatus@pin,w,c
  1851  001B80  1002               	iorwf	digitalPinStatus@pin+1,w,c
  1852  001B82  A4D8               	btfss	status,2,c
  1853  001B84  D006               	goto	l277
  1854                           
  1855                           ;Pin_Manager.c: 356: {
  1856                           ;Pin_Manager.c: 357: pinValue = PORTBbits.RB5;
  1857  001B86  BA8E               	btfsc	3982,5,c	;volatile
  1858  001B88  D7F6               	goto	u2421
  1859  001B8A                     L5:
  1860  001B8A  6A03               	clrf	??_digitalPinStatus& (0+255),c
  1861  001B8C                     u2448:
  1862  001B8C  5003               	movf	??_digitalPinStatus,w,c
  1863  001B8E  6E04               	movwf	digitalPinStatus@pinValue,c
  1864  001B90  6A05               	clrf	digitalPinStatus@pinValue+1,c
  1865  001B92                     l277:
  1866                           
  1867                           ;Pin_Manager.c: 358: }
  1868                           ;Pin_Manager.c: 360: return pinValue;
  1869  001B92  C004  F001         	movff	digitalPinStatus@pinValue,?_digitalPinStatus
  1870  001B96  C005  F002         	movff	digitalPinStatus@pinValue+1,?_digitalPinStatus+1
  1871  001B9A  0012               	return	
  1872  001B9C                     __end_of_digitalPinStatus:
  1873                           	opt stack 0
  1874                           tblptru	equ	0xFF8
  1875                           tblptrh	equ	0xFF7
  1876                           tblptrl	equ	0xFF6
  1877                           tablat	equ	0xFF5
  1878                           postinc0	equ	0xFEE
  1879                           wreg	equ	0xFE8
  1880                           postdec1	equ	0xFE5
  1881                           fsr1l	equ	0xFE1
  1882                           status	equ	0xFD8
  1883                           
  1884 ;; *************** function _delayMs *****************
  1885 ;; Defined at:
  1886 ;;		line 267 in file "Main.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;  ms              2   68[COMRAM] int 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  end_count       2   75[COMRAM] int 
  1891 ;;  debug           2   73[COMRAM] int 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, status,2, status,0, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1901 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1902 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1903 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1904 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1905 ;;Total ram usage:        9 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    2
  1908 ;; This function calls:
  1909 ;;		___awtoft
  1910 ;;		___ftmul
  1911 ;;		___fttol
  1912 ;; This function is called by:
  1913 ;;		_readWaterSensor
  1914 ;;		_main
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text4
  1919  002118                     __ptext4:
  1920                           	opt stack 0
  1921  002118                     _delayMs:
  1922                           	opt stack 27
  1923                           
  1924                           ;Main.c: 268: int debug = 0;
  1925                           
  1926                           ;incstack = 0
  1927  002118  0E00               	movlw	0
  1928  00211A  6E4B               	movwf	delayMs@debug+1,c
  1929  00211C  0E00               	movlw	0
  1930  00211E  6E4A               	movwf	delayMs@debug,c
  1931                           
  1932                           ;Main.c: 269: int end_count;
  1933                           ;Main.c: 271: while(ms > 4000) {
  1934  002120  D009               	goto	l129
  1935  002122                     
  1936                           ;Main.c: 272: TMR0 = 0;
  1937  002122  0E00               	movlw	0
  1938  002124  6ED3               	movwf	4051,c	;volatile
  1939  002126                     
  1940                           ;Main.c: 274: ms = ms - 4000;
  1941  002126  0E60               	movlw	96
  1942  002128  2445               	addwf	delayMs@ms,w,c
  1943  00212A  6E45               	movwf	delayMs@ms,c
  1944  00212C  0EF0               	movlw	240
  1945  00212E  2046               	addwfc	delayMs@ms+1,w,c
  1946  002130  6E46               	movwf	delayMs@ms+1,c
  1947  002132  D7F9               	goto	l128
  1948  002134                     l129:
  1949  002134  BE46               	btfsc	delayMs@ms+1,7,c
  1950  002136  D006               	goto	u1990
  1951  002138  0EA1               	movlw	161
  1952  00213A  5C45               	subwf	delayMs@ms,w,c
  1953  00213C  0E0F               	movlw	15
  1954  00213E  5846               	subwfb	delayMs@ms+1,w,c
  1955  002140  B0D8               	btfsc	status,0,c
  1956  002142  D7EF               	goto	l126
  1957  002144                     u1990:
  1958                           
  1959                           ;Main.c: 275: }
  1960                           ;Main.c: 276: }
  1961                           ;Main.c: 278: end_count = ms * 15.625;
  1962  002144  0E00               	movlw	0
  1963  002146  6E2A               	movwf	___ftmul@f2,c
  1964  002148  0E7A               	movlw	122
  1965  00214A  6E2B               	movwf	___ftmul@f2+1,c
  1966  00214C  0E41               	movlw	65
  1967  00214E  6E2C               	movwf	___ftmul@f2+2,c
  1968  002150  C045  F009         	movff	delayMs@ms,___awtoft@c
  1969  002154  C046  F00A         	movff	delayMs@ms+1,___awtoft@c+1
  1970  002158  ECB7  F011         	call	___awtoft	;wreg free
  1971  00215C  C009  F027         	movff	?___awtoft,___ftmul@f1
  1972  002160  C00A  F028         	movff	?___awtoft+1,___ftmul@f1+1
  1973  002164  C00B  F029         	movff	?___awtoft+2,___ftmul@f1+2
  1974  002168  ECDF  F00E         	call	___ftmul	;wreg free
  1975  00216C  C027  F036         	movff	?___ftmul,___fttol@f1
  1976  002170  C028  F037         	movff	?___ftmul+1,___fttol@f1+1
  1977  002174  C029  F038         	movff	?___ftmul+2,___fttol@f1+2
  1978  002178  EC65  F00E         	call	___fttol	;wreg free
  1979  00217C  C036  F04C         	movff	?___fttol,delayMs@end_count
  1980  002180  C037  F04D         	movff	?___fttol+1,delayMs@end_count+1
  1981                           
  1982                           ;Main.c: 279: TMR0 = 0;
  1983  002184  0E00               	movlw	0
  1984  002186  6ED3               	movwf	4051,c	;volatile
  1985                           
  1986                           ;Main.c: 280: while(TMR0<end_count){
  1987  002188  D003               	goto	l131
  1988  00218A                     l132:
  1989                           
  1990                           ;Main.c: 281: debug = TMR0;
  1991  00218A  CFD3 F04A          	movff	4051,delayMs@debug	;volatile
  1992  00218E  6A4B               	clrf	delayMs@debug+1,c
  1993  002190                     l131:
  1994  002190  50D3               	movf	4051,w,c	;volatile
  1995  002192  6E47               	movwf	??_delayMs& (0+255),c
  1996  002194  6A48               	clrf	(??_delayMs+1)& (0+255),c
  1997  002196  504C               	movf	delayMs@end_count,w,c
  1998  002198  5C47               	subwf	??_delayMs,w,c
  1999  00219A  5048               	movf	??_delayMs+1,w,c
  2000  00219C  0A80               	xorlw	128
  2001  00219E  6E49               	movwf	(??_delayMs+2)& (0+255),c
  2002  0021A0  504D               	movf	delayMs@end_count+1,w,c
  2003  0021A2  0A80               	xorlw	128
  2004  0021A4  5849               	subwfb	(??_delayMs+2)& (0+255),w,c
  2005  0021A6  B0D8               	btfsc	status,0,c
  2006  0021A8  0012               	return	
  2007  0021AA  D7EF               	goto	l132
  2008  0021AC                     __end_of_delayMs:
  2009                           	opt stack 0
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           postinc0	equ	0xFEE
  2015                           wreg	equ	0xFE8
  2016                           postdec1	equ	0xFE5
  2017                           fsr1l	equ	0xFE1
  2018                           status	equ	0xFD8
  2019                           
  2020 ;; *************** function ___fttol *****************
  2021 ;; Defined at:
  2022 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;  f1              3   53[COMRAM] float 
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;  lval            4   63[COMRAM] unsigned long 
  2027 ;;  exp1            1   67[COMRAM] unsigned char 
  2028 ;;  sign1           1   62[COMRAM] unsigned char 
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  4   53[COMRAM] long 
  2031 ;; Registers used:
  2032 ;;		wreg, status,2, status,0
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2038 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2039 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2040 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2041 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2042 ;;Total ram usage:       15 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_delayMs
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text5
  2052  001CCA                     __ptext5:
  2053                           	opt stack 0
  2054  001CCA                     ___fttol:
  2055                           	opt stack 28
  2056                           
  2057                           ;incstack = 0
  2058  001CCA  C038  F03A         	movff	___fttol@f1+2,??___fttol
  2059  001CCE  6A3B               	clrf	(??___fttol+1)& (0+255),c
  2060  001CD0  6A3C               	clrf	(??___fttol+2)& (0+255),c
  2061  001CD2  3437               	rlcf	___fttol@f1+1,w,c
  2062  001CD4  363A               	rlcf	??___fttol& (0+255),f,c
  2063  001CD6  E301               	bnc	u1911
  2064  001CD8  803B               	bsf	(??___fttol+1)& (0+255),0,c
  2065  001CDA                     u1911:
  2066  001CDA  503A               	movf	??___fttol,w,c
  2067  001CDC  6E44               	movwf	___fttol@exp1,c
  2068  001CDE  5044               	movf	___fttol@exp1,w,c
  2069  001CE0  A4D8               	btfss	status,2,c
  2070  001CE2  D009               	goto	l621
  2071  001CE4  0E00               	movlw	0
  2072  001CE6  6E36               	movwf	?___fttol,c
  2073  001CE8  0E00               	movlw	0
  2074  001CEA  6E37               	movwf	?___fttol+1,c
  2075  001CEC  0E00               	movlw	0
  2076  001CEE  6E38               	movwf	?___fttol+2,c
  2077  001CF0  0E00               	movlw	0
  2078  001CF2  6E39               	movwf	?___fttol+3,c
  2079  001CF4  0012               	return	
  2080  001CF6                     l621:
  2081  001CF6  0E17               	movlw	23
  2082  001CF8  6E3A               	movwf	??___fttol& (0+255),c
  2083  001CFA  C036  F03B         	movff	___fttol@f1,??___fttol+1
  2084  001CFE  C037  F03C         	movff	___fttol@f1+1,??___fttol+2
  2085  001D02  C038  F03D         	movff	___fttol@f1+2,??___fttol+3
  2086  001D06  283A               	incf	??___fttol,w,c
  2087  001D08  6E3E               	movwf	(??___fttol+4)& (0+255),c
  2088  001D0A  D004               	goto	u1930
  2089  001D0C                     u1935:
  2090  001D0C  90D8               	bcf	status,0,c
  2091  001D0E  323D               	rrcf	??___fttol+3,f,c
  2092  001D10  323C               	rrcf	??___fttol+2,f,c
  2093  001D12  323B               	rrcf	??___fttol+1,f,c
  2094  001D14                     u1930:
  2095  001D14  2E3E               	decfsz	(??___fttol+4)& (0+255),f,c
  2096  001D16  D7FA               	goto	u1935
  2097  001D18  503B               	movf	??___fttol+1,w,c
  2098  001D1A  6E3F               	movwf	___fttol@sign1,c
  2099  001D1C  8E37               	bsf	___fttol@f1+1,7,c
  2100  001D1E  0EFF               	movlw	255
  2101  001D20  1636               	andwf	___fttol@f1,f,c
  2102  001D22  0EFF               	movlw	255
  2103  001D24  1637               	andwf	___fttol@f1+1,f,c
  2104  001D26  0E00               	movlw	0
  2105  001D28  1638               	andwf	___fttol@f1+2,f,c
  2106  001D2A  5036               	movf	___fttol@f1,w,c
  2107  001D2C  6E40               	movwf	___fttol@lval,c
  2108  001D2E  5037               	movf	___fttol@f1+1,w,c
  2109  001D30  6E41               	movwf	___fttol@lval+1,c
  2110  001D32  5038               	movf	___fttol@f1+2,w,c
  2111  001D34  6E42               	movwf	___fttol@lval+2,c
  2112  001D36  6A43               	clrf	___fttol@lval+3,c
  2113  001D38  0E8E               	movlw	142
  2114  001D3A  5E44               	subwf	___fttol@exp1,f,c
  2115  001D3C  AE44               	btfss	___fttol@exp1,7,c
  2116  001D3E  D016               	goto	l623
  2117  001D40  5044               	movf	___fttol@exp1,w,c
  2118  001D42  0A80               	xorlw	128
  2119  001D44  0F8F               	addlw	143
  2120  001D46  B0D8               	btfsc	status,0,c
  2121  001D48  D009               	goto	l624
  2122  001D4A  0E00               	movlw	0
  2123  001D4C  6E36               	movwf	?___fttol,c
  2124  001D4E  0E00               	movlw	0
  2125  001D50  6E37               	movwf	?___fttol+1,c
  2126  001D52  0E00               	movlw	0
  2127  001D54  6E38               	movwf	?___fttol+2,c
  2128  001D56  0E00               	movlw	0
  2129  001D58  6E39               	movwf	?___fttol+3,c
  2130  001D5A  0012               	return	
  2131  001D5C                     l624:
  2132  001D5C  90D8               	bcf	status,0,c
  2133  001D5E  3243               	rrcf	___fttol@lval+3,f,c
  2134  001D60  3242               	rrcf	___fttol@lval+2,f,c
  2135  001D62  3241               	rrcf	___fttol@lval+1,f,c
  2136  001D64  3240               	rrcf	___fttol@lval,f,c
  2137  001D66  3E44               	incfsz	___fttol@exp1,f,c
  2138  001D68  D7F9               	goto	l624
  2139  001D6A  D015               	goto	u1970
  2140  001D6C                     l623:
  2141  001D6C  0E17               	movlw	23
  2142  001D6E  6444               	cpfsgt	___fttol@exp1,c
  2143  001D70  D00F               	goto	l629
  2144  001D72  0E00               	movlw	0
  2145  001D74  6E36               	movwf	?___fttol,c
  2146  001D76  0E00               	movlw	0
  2147  001D78  6E37               	movwf	?___fttol+1,c
  2148  001D7A  0E00               	movlw	0
  2149  001D7C  6E38               	movwf	?___fttol+2,c
  2150  001D7E  0E00               	movlw	0
  2151  001D80  6E39               	movwf	?___fttol+3,c
  2152  001D82  0012               	return	
  2153  001D84  90D8               	bcf	status,0,c
  2154  001D86  3640               	rlcf	___fttol@lval,f,c
  2155  001D88  3641               	rlcf	___fttol@lval+1,f,c
  2156  001D8A  3642               	rlcf	___fttol@lval+2,f,c
  2157  001D8C  3643               	rlcf	___fttol@lval+3,f,c
  2158  001D8E  0644               	decf	___fttol@exp1,f,c
  2159  001D90                     l629:
  2160  001D90  5044               	movf	___fttol@exp1,w,c
  2161  001D92  A4D8               	btfss	status,2,c
  2162  001D94  D7F7               	goto	l630
  2163  001D96                     u1970:
  2164  001D96  503F               	movf	___fttol@sign1,w,c
  2165  001D98  B4D8               	btfsc	status,2,c
  2166  001D9A  D008               	goto	l632
  2167  001D9C  1E43               	comf	___fttol@lval+3,f,c
  2168  001D9E  1E42               	comf	___fttol@lval+2,f,c
  2169  001DA0  1E41               	comf	___fttol@lval+1,f,c
  2170  001DA2  6C40               	negf	___fttol@lval,c
  2171  001DA4  0E00               	movlw	0
  2172  001DA6  2241               	addwfc	___fttol@lval+1,f,c
  2173  001DA8  2242               	addwfc	___fttol@lval+2,f,c
  2174  001DAA  2243               	addwfc	___fttol@lval+3,f,c
  2175  001DAC                     l632:
  2176  001DAC  C040  F036         	movff	___fttol@lval,?___fttol
  2177  001DB0  C041  F037         	movff	___fttol@lval+1,?___fttol+1
  2178  001DB4  C042  F038         	movff	___fttol@lval+2,?___fttol+2
  2179  001DB8  C043  F039         	movff	___fttol@lval+3,?___fttol+3
  2180  001DBC  0012               	return	
  2181  001DBE                     __end_of___fttol:
  2182                           	opt stack 0
  2183                           tblptru	equ	0xFF8
  2184                           tblptrh	equ	0xFF7
  2185                           tblptrl	equ	0xFF6
  2186                           tablat	equ	0xFF5
  2187                           postinc0	equ	0xFEE
  2188                           wreg	equ	0xFE8
  2189                           postdec1	equ	0xFE5
  2190                           fsr1l	equ	0xFE1
  2191                           status	equ	0xFD8
  2192                           
  2193 ;; *************** function _initialization *****************
  2194 ;; Defined at:
  2195 ;;		line 139 in file "Main.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;		None
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;		None
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      void 
  2202 ;; Registers used:
  2203 ;;		wreg, status,2, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2213 ;;Total ram usage:        0 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; Hardware stack levels required when called:    1
  2216 ;; This function calls:
  2217 ;;		_initAdc
  2218 ;;		_initSPI
  2219 ;; This function is called by:
  2220 ;;		_main
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text6
  2225  00223C                     __ptext6:
  2226                           	opt stack 0
  2227  00223C                     _initialization:
  2228                           	opt stack 29
  2229                           
  2230                           ;Main.c: 143: ANSELA = 0;
  2231                           
  2232                           ;incstack = 0
  2233  00223C  0E00               	movlw	0
  2234  00223E  010F               	movlb	15	; () banked
  2235  002240  6F11               	movwf	17,b	;volatile
  2236                           
  2237                           ; BSR set to: 15
  2238                           ;Main.c: 144: TRISA = 0xFFFF;
  2239  002242  6888               	setf	3976,c	;volatile
  2240                           
  2241                           ;Main.c: 145: ANSELB = 0;
  2242  002244  0E00               	movlw	0
  2243  002246  6F19               	movwf	25,b	;volatile
  2244                           
  2245                           ; BSR set to: 15
  2246                           ;Main.c: 146: TRISB = 0xFFFF;
  2247  002248  6889               	setf	3977,c	;volatile
  2248                           
  2249                           ;Main.c: 147: ANSELC = 0;
  2250  00224A  0E00               	movlw	0
  2251  00224C  6F21               	movwf	33,b	;volatile
  2252                           
  2253                           ; BSR set to: 15
  2254                           ;Main.c: 148: TRISC = 0xFFFF;
  2255  00224E  688A               	setf	3978,c	;volatile
  2256                           
  2257                           ;Main.c: 151: T0CON1bits.T0CS = 3;
  2258  002250  50D6               	movf	4054,w,c	;volatile
  2259  002252  0B1F               	andlw	-225
  2260  002254  0960               	iorlw	96
  2261  002256  6ED6               	movwf	4054,c	;volatile
  2262                           
  2263                           ; BSR set to: 15
  2264                           ;Main.c: 152: T0CON0bits.T016BIT = 1;
  2265  002258  88D5               	bsf	4053,4,c	;volatile
  2266                           
  2267                           ;Main.c: 153: T0CON1bits.T0CKPS = 8;
  2268  00225A  50D6               	movf	4054,w,c	;volatile
  2269  00225C  0BF0               	andlw	-16
  2270  00225E  0908               	iorlw	8
  2271  002260  6ED6               	movwf	4054,c	;volatile
  2272                           
  2273                           ; BSR set to: 15
  2274                           ;Main.c: 154: T0CON0bits.T0EN = 1;
  2275  002262  8ED5               	bsf	4053,7,c	;volatile
  2276                           
  2277                           ;Main.c: 159: TMR1CLKbits.CS = 3;
  2278  002264  50D2               	movf	4050,w,c	;volatile
  2279  002266  0BF0               	andlw	-16
  2280  002268  0903               	iorlw	3
  2281  00226A  6ED2               	movwf	4050,c	;volatile
  2282                           
  2283                           ;Main.c: 160: T1CONbits.CKPS = 3;
  2284  00226C  0E30               	movlw	48
  2285  00226E  12CF               	iorwf	4047,f,c	;volatile
  2286                           
  2287                           ; BSR set to: 15
  2288                           ;Main.c: 161: T1CONbits.RD16 = 1;
  2289  002270  82CF               	bsf	4047,1,c	;volatile
  2290                           
  2291                           ; BSR set to: 15
  2292                           ;Main.c: 162: T1CONbits.ON = 1;
  2293  002272  80CF               	bsf	4047,0,c	;volatile
  2294                           
  2295                           ; BSR set to: 15
  2296                           ;Main.c: 163: T1GCONbits.GE = 0;
  2297  002274  9ED0               	bcf	4048,7,c	;volatile
  2298                           
  2299                           ;Main.c: 166: TMR3CLKbits.CS = 3;
  2300  002276  50CC               	movf	4044,w,c	;volatile
  2301  002278  0BF0               	andlw	-16
  2302  00227A  0903               	iorlw	3
  2303  00227C  6ECC               	movwf	4044,c	;volatile
  2304                           
  2305                           ; BSR set to: 15
  2306                           ;Main.c: 167: T3CONbits.RD16 = 1;
  2307  00227E  82C9               	bsf	4041,1,c	;volatile
  2308                           
  2309                           ;Main.c: 168: T3CONbits.CKPS = 3;
  2310  002280  0E30               	movlw	48
  2311  002282  12C9               	iorwf	4041,f,c	;volatile
  2312                           
  2313                           ; BSR set to: 15
  2314                           ;Main.c: 169: T3CONbits.ON = 1;
  2315  002284  80C9               	bsf	4041,0,c	;volatile
  2316                           
  2317                           ; BSR set to: 15
  2318                           ;Main.c: 171: initAdc();
  2319  002286  EC22  F012         	call	_initAdc	;wreg free
  2320                           
  2321                           ;Main.c: 172: initSPI();
  2322  00228A  ECFE  F011         	call	_initSPI	;wreg free
  2323  00228E  0012               	return		;funcret
  2324  002290                     __end_of_initialization:
  2325                           	opt stack 0
  2326                           tblptru	equ	0xFF8
  2327                           tblptrh	equ	0xFF7
  2328                           tblptrl	equ	0xFF6
  2329                           tablat	equ	0xFF5
  2330                           postinc0	equ	0xFEE
  2331                           wreg	equ	0xFE8
  2332                           postdec1	equ	0xFE5
  2333                           fsr1l	equ	0xFE1
  2334                           status	equ	0xFD8
  2335                           
  2336 ;; *************** function _initSPI *****************
  2337 ;; Defined at:
  2338 ;;		line 228 in file "Main.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;		None
  2341 ;; Auto vars:     Size  Location     Type
  2342 ;;		None
  2343 ;; Return value:  Size  Location     Type
  2344 ;;                  1    wreg      void 
  2345 ;; Registers used:
  2346 ;;		wreg, status,2
  2347 ;; Tracked objects:
  2348 ;;		On entry : 0/0
  2349 ;;		On exit  : 0/0
  2350 ;;		Unchanged: 0/0
  2351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2356 ;;Total ram usage:        0 bytes
  2357 ;; Hardware stack levels used:    1
  2358 ;; This function calls:
  2359 ;;		Nothing
  2360 ;; This function is called by:
  2361 ;;		_initialization
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365                           	psect	text7
  2366  0023FC                     __ptext7:
  2367                           	opt stack 0
  2368  0023FC                     _initSPI:
  2369                           	opt stack 29
  2370                           
  2371                           ;Main.c: 229: TRISCbits.TRISC4 = 0;
  2372                           
  2373                           ;incstack = 0
  2374  0023FC  988A               	bcf	3978,4,c	;volatile
  2375                           
  2376                           ;Main.c: 230: TRISCbits.TRISC5 = 0;
  2377  0023FE  9A8A               	bcf	3978,5,c	;volatile
  2378                           
  2379                           ;Main.c: 232: SSP1CON1bits.SSPEN = 1;
  2380  002400  8A96               	bsf	3990,5,c	;volatile
  2381                           
  2382                           ;Main.c: 233: SSP1CON1bits.CKP = 0;
  2383  002402  9896               	bcf	3990,4,c	;volatile
  2384                           
  2385                           ;Main.c: 234: SSP1CON1bits.SSPM = 0;
  2386  002404  9096               	bcf	3990,0,c	;volatile
  2387  002406  9296               	bcf	3990,1,c	;volatile
  2388  002408  9496               	bcf	3990,2,c	;volatile
  2389  00240A  9696               	bcf	3990,3,c	;volatile
  2390                           
  2391                           ;Main.c: 235: SSP1CON3bits.BOEN = 0;
  2392  00240C  9898               	bcf	3992,4,c	;volatile
  2393                           
  2394                           ;Main.c: 236: SSP1DATPPS = 20;
  2395  00240E  0E14               	movlw	20
  2396  002410  010E               	movlb	14	; () banked
  2397  002412  6FB8               	movwf	184,b	;volatile
  2398                           
  2399                           ;Main.c: 237: RC3PPS = 16;
  2400  002414  0E10               	movlw	16
  2401  002416  6FFA               	movwf	250,b	;volatile
  2402                           
  2403                           ;Main.c: 238: RC5PPS = 15;
  2404  002418  0E0F               	movlw	15
  2405  00241A  6FFC               	movwf	252,b	;volatile
  2406                           
  2407                           ; BSR set to: 14
  2408                           ;Main.c: 239: PORTCbits.RC0 = 0;
  2409  00241C  908F               	bcf	3983,0,c	;volatile
  2410                           
  2411                           ; BSR set to: 14
  2412  00241E  0012               	return		;funcret
  2413  002420                     __end_of_initSPI:
  2414                           	opt stack 0
  2415                           tblptru	equ	0xFF8
  2416                           tblptrh	equ	0xFF7
  2417                           tblptrl	equ	0xFF6
  2418                           tablat	equ	0xFF5
  2419                           postinc0	equ	0xFEE
  2420                           wreg	equ	0xFE8
  2421                           postdec1	equ	0xFE5
  2422                           fsr1l	equ	0xFE1
  2423                           status	equ	0xFD8
  2424                           
  2425 ;; *************** function _initAdc *****************
  2426 ;; Defined at:
  2427 ;;		line 462 in file "Main.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;		None
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;		None
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  1    wreg      void 
  2434 ;; Registers used:
  2435 ;;		wreg, status,2
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2445 ;;Total ram usage:        0 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; This function calls:
  2448 ;;		Nothing
  2449 ;; This function is called by:
  2450 ;;		_initialization
  2451 ;; This function uses a non-reentrant model
  2452 ;;
  2453                           
  2454                           	psect	text8
  2455  002444                     __ptext8:
  2456                           	opt stack 0
  2457  002444                     _initAdc:
  2458                           	opt stack 29
  2459                           
  2460                           ;Main.c: 464: ADCON0bits.ADON = 0;
  2461                           
  2462                           ; BSR set to: 14
  2463                           ;incstack = 0
  2464  002444  9E60               	bcf	3936,7,c	;volatile
  2465                           
  2466                           ;Main.c: 466: TRISAbits.TRISA4 = 1;
  2467  002446  8888               	bsf	3976,4,c	;volatile
  2468                           
  2469                           ;Main.c: 467: ANSELAbits.ANSELA4 = 1;
  2470  002448  010F               	movlb	15	; () banked
  2471  00244A  8911               	bsf	17,4,b	;volatile
  2472                           
  2473                           ;Main.c: 468: TRISAbits.TRISA5 = 1;
  2474  00244C  8A88               	bsf	3976,5,c	;volatile
  2475                           
  2476                           ;Main.c: 469: ANSELAbits.ANSELA5 = 1;
  2477  00244E  8B11               	bsf	17,5,b	;volatile
  2478                           
  2479                           ; BSR set to: 15
  2480                           ;Main.c: 472: ADREFbits.ADPREF = 0;
  2481  002450  0EFC               	movlw	-4
  2482  002452  1758               	andwf	88,f,b	;volatile
  2483                           
  2484                           ; BSR set to: 15
  2485                           ;Main.c: 473: ADREFbits.ADNREF = 0;
  2486  002454  9958               	bcf	88,4,b	;volatile
  2487                           
  2488                           ; BSR set to: 15
  2489                           ;Main.c: 476: ADCON0bits.ADCS = 0;
  2490  002456  9860               	bcf	3936,4,c	;volatile
  2491                           
  2492                           ;Main.c: 477: ADCLK = 3;
  2493  002458  0E03               	movlw	3
  2494  00245A  6F57               	movwf	87,b	;volatile
  2495                           
  2496                           ; BSR set to: 15
  2497                           ;Main.c: 482: ADCON0bits.ADFM = 1;
  2498  00245C  8460               	bsf	3936,2,c	;volatile
  2499                           
  2500                           ; BSR set to: 15
  2501  00245E  0012               	return		;funcret
  2502  002460                     __end_of_initAdc:
  2503                           	opt stack 0
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           postinc0	equ	0xFEE
  2509                           wreg	equ	0xFE8
  2510                           postdec1	equ	0xFE5
  2511                           fsr1l	equ	0xFE1
  2512                           status	equ	0xFD8
  2513                           
  2514 ;; *************** function _getHandleAngle *****************
  2515 ;; Defined at:
  2516 ;;		line 533 in file "Main.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;		None
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  angle           3   43[BANK0 ] float 
  2521 ;;  averageAngle    3    9[BANK0 ] float 
  2522 ;;  yValue          2   41[BANK0 ] int 
  2523 ;;  xValue          2   39[BANK0 ] int 
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  3   87[COMRAM] float 
  2526 ;; Registers used:
  2527 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2533 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2534 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2535 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2536 ;;      Totals:         5      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2537 ;;Total ram usage:       42 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    5
  2540 ;; This function calls:
  2541 ;;		___awtoft
  2542 ;;		___ftadd
  2543 ;;		___ftdiv
  2544 ;;		___ftge
  2545 ;;		___ftmul
  2546 ;;		_atan2
  2547 ;;		_readAdc
  2548 ;; This function is called by:
  2549 ;;		_main
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           	psect	text9
  2554  000F36                     __ptext9:
  2555                           	opt stack 0
  2556  000F36                     _getHandleAngle:
  2557                           	opt stack 25
  2558                           
  2559                           ;Main.c: 535: signed int xValue = readAdc(xAxis) - signedNumAdjustADC;
  2560                           
  2561                           ; BSR set to: 15
  2562                           ;incstack = 0
  2563  000F36  0E0E               	movlw	low _signedNumAdjustADC
  2564  000F38  6EF6               	movwf	tblptrl,c
  2565  000F3A                     	if	1	;There is more than 1 active tblptr byte
  2566  000F3A  0E0F               	movlw	high _signedNumAdjustADC
  2567  000F3C  6EF7               	movwf	tblptrh,c
  2568  000F3E                     	endif
  2569  000F3E                     	if	0	;There are less than 3 active tblptr bytes
  2570  000F3E                     	endif
  2571  000F3E  0009               	tblrd		*+
  2572  000F40  CFF5 F05B          	movff	tablat,??_getHandleAngle
  2573  000F44  0009               	tblrd		*+
  2574  000F46  CFF5 F05C          	movff	tablat,??_getHandleAngle+1
  2575  000F4A  1E5B               	comf	??_getHandleAngle,f,c
  2576  000F4C  1E5C               	comf	??_getHandleAngle+1,f,c
  2577  000F4E  4A5B               	infsnz	??_getHandleAngle,f,c
  2578  000F50  2A5C               	incf	??_getHandleAngle+1,f,c
  2579  000F52  0E12               	movlw	low _xAxis
  2580  000F54  6EF6               	movwf	tblptrl,c
  2581  000F56                     	if	1	;There is more than 1 active tblptr byte
  2582  000F56  0E0F               	movlw	high _xAxis
  2583  000F58  6EF7               	movwf	tblptrh,c
  2584  000F5A                     	endif
  2585  000F5A                     	if	0	;There are less than 3 active tblptr bytes
  2586  000F5A                     	endif
  2587  000F5A  0009               	tblrd		*+
  2588  000F5C  CFF5 F001          	movff	tablat,readAdc@pin
  2589  000F60  000A               	tblrd		*-
  2590  000F62  CFF5 F002          	movff	tablat,readAdc@pin+1
  2591  000F66  EC48  F011         	call	_readAdc	;wreg free
  2592  000F6A  505B               	movf	??_getHandleAngle,w,c
  2593  000F6C  2401               	addwf	?_readAdc,w,c
  2594  000F6E  0100               	movlb	0	; () banked
  2595  000F70  6F87               	movwf	getHandleAngle@xValue& (0+255),b
  2596  000F72  505C               	movf	??_getHandleAngle+1,w,c
  2597  000F74  2002               	addwfc	?_readAdc+1,w,c
  2598  000F76  6F88               	movwf	(getHandleAngle@xValue+1)& (0+255),b
  2599                           
  2600                           ;Main.c: 536: signed int yValue = readAdc(yAxis) - signedNumAdjustADC;
  2601  000F78  0E0E               	movlw	low _signedNumAdjustADC
  2602  000F7A  6EF6               	movwf	tblptrl,c
  2603  000F7C                     	if	1	;There is more than 1 active tblptr byte
  2604  000F7C  0E0F               	movlw	high _signedNumAdjustADC
  2605  000F7E  6EF7               	movwf	tblptrh,c
  2606  000F80                     	endif
  2607  000F80                     	if	0	;There are less than 3 active tblptr bytes
  2608  000F80                     	endif
  2609  000F80  0009               	tblrd		*+
  2610  000F82  CFF5 F05B          	movff	tablat,??_getHandleAngle
  2611  000F86  0009               	tblrd		*+
  2612  000F88  CFF5 F05C          	movff	tablat,??_getHandleAngle+1
  2613  000F8C  1E5B               	comf	??_getHandleAngle,f,c
  2614  000F8E  1E5C               	comf	??_getHandleAngle+1,f,c
  2615  000F90  4A5B               	infsnz	??_getHandleAngle,f,c
  2616  000F92  2A5C               	incf	??_getHandleAngle+1,f,c
  2617  000F94  0E10               	movlw	low _yAxis
  2618  000F96  6EF6               	movwf	tblptrl,c
  2619  000F98                     	if	1	;There is more than 1 active tblptr byte
  2620  000F98  0E0F               	movlw	high _yAxis
  2621  000F9A  6EF7               	movwf	tblptrh,c
  2622  000F9C                     	endif
  2623  000F9C                     	if	0	;There are less than 3 active tblptr bytes
  2624  000F9C                     	endif
  2625  000F9C  0009               	tblrd		*+
  2626  000F9E  CFF5 F001          	movff	tablat,readAdc@pin
  2627  000FA2  000A               	tblrd		*-
  2628  000FA4  CFF5 F002          	movff	tablat,readAdc@pin+1
  2629  000FA8  EC48  F011         	call	_readAdc	;wreg free
  2630  000FAC  505B               	movf	??_getHandleAngle,w,c
  2631  000FAE  2401               	addwf	?_readAdc,w,c
  2632  000FB0  0100               	movlb	0	; () banked
  2633  000FB2  6F89               	movwf	getHandleAngle@yValue& (0+255),b
  2634  000FB4  505C               	movf	??_getHandleAngle+1,w,c
  2635  000FB6  2002               	addwfc	?_readAdc+1,w,c
  2636  000FB8  6F8A               	movwf	(getHandleAngle@yValue+1)& (0+255),b
  2637                           
  2638                           ; BSR set to: 0
  2639                           ;Main.c: 537: float angle = atan2(yValue, xValue) * (180 / PI);
  2640  000FBA  C087  F009         	movff	getHandleAngle@xValue,___awtoft@c
  2641  000FBE  C088  F00A         	movff	getHandleAngle@xValue+1,___awtoft@c+1
  2642  000FC2  ECB7  F011         	call	___awtoft	;wreg free
  2643  000FC6  C009  F055         	movff	?___awtoft,atan2@x
  2644  000FCA  C00A  F056         	movff	?___awtoft+1,atan2@x+1
  2645  000FCE  C00B  F057         	movff	?___awtoft+2,atan2@x+2
  2646  000FD2  C089  F009         	movff	getHandleAngle@yValue,___awtoft@c
  2647  000FD6  C08A  F00A         	movff	getHandleAngle@yValue+1,___awtoft@c+1
  2648  000FDA  ECB7  F011         	call	___awtoft	;wreg free
  2649  000FDE  C009  F052         	movff	?___awtoft,atan2@y
  2650  000FE2  C00A  F053         	movff	?___awtoft+1,atan2@y+1
  2651  000FE6  C00B  F054         	movff	?___awtoft+2,atan2@y+2
  2652  000FEA  EC59  F009         	call	_atan2	;wreg free
  2653  000FEE  C052  F06C         	movff	?_atan2,_getHandleAngle$1800
  2654  000FF2  C053  F06D         	movff	?_atan2+1,_getHandleAngle$1800+1
  2655  000FF6  C054  F06E         	movff	?_atan2+2,_getHandleAngle$1800+2
  2656                           
  2657                           ;Main.c: 537: float angle = atan2(yValue, xValue) * (180 / PI);
  2658  000FFA  C06C  F027         	movff	_getHandleAngle$1800,___ftmul@f1
  2659  000FFE  C06D  F028         	movff	_getHandleAngle$1800+1,___ftmul@f1+1
  2660  001002  C06E  F029         	movff	_getHandleAngle$1800+2,___ftmul@f1+2
  2661  001006  0E07               	movlw	low _PI
  2662  001008  6EF6               	movwf	tblptrl,c
  2663  00100A                     	if	1	;There is more than 1 active tblptr byte
  2664  00100A  0E0F               	movlw	high _PI
  2665  00100C  6EF7               	movwf	tblptrh,c
  2666  00100E                     	endif
  2667  00100E                     	if	0	;There are less than 3 active tblptr bytes
  2668  00100E                     	endif
  2669  00100E  0009               	tblrd		*+
  2670  001010  CFF5 F01B          	movff	tablat,___ftdiv@f2
  2671  001014  0009               	tblrd		*+
  2672  001016  CFF5 F01C          	movff	tablat,___ftdiv@f2+1
  2673  00101A  000A               	tblrd		*-
  2674  00101C  CFF5 F01D          	movff	tablat,___ftdiv@f2+2
  2675  001020  0E00               	movlw	0
  2676  001022  6E18               	movwf	___ftdiv@f1,c
  2677  001024  0E34               	movlw	52
  2678  001026  6E19               	movwf	___ftdiv@f1+1,c
  2679  001028  0E43               	movlw	67
  2680  00102A  6E1A               	movwf	___ftdiv@f1+2,c
  2681  00102C  EC59  F00F         	call	___ftdiv	;wreg free
  2682  001030  C018  F02A         	movff	?___ftdiv,___ftmul@f2
  2683  001034  C019  F02B         	movff	?___ftdiv+1,___ftmul@f2+1
  2684  001038  C01A  F02C         	movff	?___ftdiv+2,___ftmul@f2+2
  2685  00103C  ECDF  F00E         	call	___ftmul	;wreg free
  2686  001040  C027  F08B         	movff	?___ftmul,getHandleAngle@angle
  2687  001044  C028  F08C         	movff	?___ftmul+1,getHandleAngle@angle+1
  2688  001048  C029  F08D         	movff	?___ftmul+2,getHandleAngle@angle+2
  2689                           
  2690                           ;Main.c: 539: if (angle > 20) {
  2691  00104C  0E00               	movlw	0
  2692  00104E  6E0F               	movwf	___ftge@ff1,c
  2693  001050  0EA0               	movlw	160
  2694  001052  6E10               	movwf	___ftge@ff1+1,c
  2695  001054  0E41               	movlw	65
  2696  001056  6E11               	movwf	___ftge@ff1+2,c
  2697  001058  C08B  F012         	movff	getHandleAngle@angle,___ftge@ff2
  2698  00105C  C08C  F013         	movff	getHandleAngle@angle+1,___ftge@ff2+1
  2699  001060  C08D  F014         	movff	getHandleAngle@angle+2,___ftge@ff2+2
  2700  001064  ECD6  F010         	call	___ftge	;wreg free
  2701  001068  B0D8               	btfsc	status,0,c
  2702  00106A  D007               	goto	l189
  2703                           
  2704                           ;Main.c: 540: angle = 20.0;
  2705  00106C  0E00               	movlw	0
  2706  00106E  0100               	movlb	0	; () banked
  2707  001070  6F8B               	movwf	getHandleAngle@angle& (0+255),b
  2708  001072  0EA0               	movlw	160
  2709  001074  6F8C               	movwf	(getHandleAngle@angle+1)& (0+255),b
  2710  001076  0E41               	movlw	65
  2711  001078  D016               	goto	L1
  2712  00107A                     l189:
  2713                           
  2714                           ; BSR set to: 0
  2715  00107A  C08B  F00F         	movff	getHandleAngle@angle,___ftge@ff1
  2716  00107E  C08C  F010         	movff	getHandleAngle@angle+1,___ftge@ff1+1
  2717  001082  C08D  F011         	movff	getHandleAngle@angle+2,___ftge@ff1+2
  2718  001086  0E00               	movlw	0
  2719  001088  6E12               	movwf	___ftge@ff2,c
  2720  00108A  0EF0               	movlw	240
  2721  00108C  6E13               	movwf	___ftge@ff2+1,c
  2722  00108E  0EC1               	movlw	193
  2723  001090  6E14               	movwf	___ftge@ff2+2,c
  2724  001092  ECD6  F010         	call	___ftge	;wreg free
  2725  001096  B0D8               	btfsc	status,0,c
  2726  001098  D007               	goto	l191
  2727                           
  2728                           ;Main.c: 542: angle = -30.0;
  2729  00109A  0E00               	movlw	0
  2730  00109C  0100               	movlb	0	; () banked
  2731  00109E  6F8B               	movwf	getHandleAngle@angle& (0+255),b
  2732  0010A0  0EF0               	movlw	240
  2733  0010A2  6F8C               	movwf	(getHandleAngle@angle+1)& (0+255),b
  2734  0010A4  0EC1               	movlw	193
  2735  0010A6                     L1:
  2736  0010A6  6F8D               	movwf	(getHandleAngle@angle+2)& (0+255),b
  2737  0010A8                     l191:
  2738                           
  2739                           ;Main.c: 543: }
  2740                           ;Main.c: 544: angle10 = angle9;
  2741                           
  2742                           ; BSR set to: 0
  2743                           
  2744                           ; BSR set to: 0
  2745  0010A8  C0A8  F0A5         	movff	_angle9,_angle10
  2746  0010AC  C0A9  F0A6         	movff	_angle9+1,_angle10+1
  2747  0010B0  C0AA  F0A7         	movff	_angle9+2,_angle10+2
  2748                           
  2749                           ;Main.c: 545: angle9 = angle8;
  2750  0010B4  C0AB  F0A8         	movff	_angle8,_angle9
  2751  0010B8  C0AC  F0A9         	movff	_angle8+1,_angle9+1
  2752  0010BC  C0AD  F0AA         	movff	_angle8+2,_angle9+2
  2753                           
  2754                           ;Main.c: 546: angle8 = angle7;
  2755  0010C0  C0AE  F0AB         	movff	_angle7,_angle8
  2756  0010C4  C0AF  F0AC         	movff	_angle7+1,_angle8+1
  2757  0010C8  C0B0  F0AD         	movff	_angle7+2,_angle8+2
  2758                           
  2759                           ;Main.c: 547: angle7 = angle6;
  2760  0010CC  C0B1  F0AE         	movff	_angle6,_angle7
  2761  0010D0  C0B2  F0AF         	movff	_angle6+1,_angle7+1
  2762  0010D4  C0B3  F0B0         	movff	_angle6+2,_angle7+2
  2763                           
  2764                           ;Main.c: 548: angle6 = angle5;
  2765  0010D8  C0B4  F0B1         	movff	_angle5,_angle6
  2766  0010DC  C0B5  F0B2         	movff	_angle5+1,_angle6+1
  2767  0010E0  C0B6  F0B3         	movff	_angle5+2,_angle6+2
  2768                           
  2769                           ;Main.c: 549: angle5 = angle4;
  2770  0010E4  C0B7  F0B4         	movff	_angle4,_angle5
  2771  0010E8  C0B8  F0B5         	movff	_angle4+1,_angle5+1
  2772  0010EC  C0B9  F0B6         	movff	_angle4+2,_angle5+2
  2773                           
  2774                           ;Main.c: 550: angle4 = angle3;
  2775  0010F0  C0BA  F0B7         	movff	_angle3,_angle4
  2776  0010F4  C0BB  F0B8         	movff	_angle3+1,_angle4+1
  2777  0010F8  C0BC  F0B9         	movff	_angle3+2,_angle4+2
  2778                           
  2779                           ;Main.c: 551: angle3 = angle2;
  2780  0010FC  C0BD  F0BA         	movff	_angle2,_angle3
  2781  001100  C0BE  F0BB         	movff	_angle2+1,_angle3+1
  2782  001104  C0BF  F0BC         	movff	_angle2+2,_angle3+2
  2783                           
  2784                           ;Main.c: 552: angle2 = angle1;
  2785  001108  C0C0  F0BD         	movff	_angle1,_angle2
  2786  00110C  C0C1  F0BE         	movff	_angle1+1,_angle2+1
  2787  001110  C0C2  F0BF         	movff	_angle1+2,_angle2+2
  2788                           
  2789                           ;Main.c: 553: angle1 = angle;
  2790  001114  C08B  F0C0         	movff	getHandleAngle@angle,_angle1
  2791  001118  C08C  F0C1         	movff	getHandleAngle@angle+1,_angle1+1
  2792  00111C  C08D  F0C2         	movff	getHandleAngle@angle+2,_angle1+2
  2793                           
  2794                           ;Main.c: 555: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  2795  001120  C0BD  F00F         	movff	_angle2,___ftadd@f2
  2796  001124  C0BE  F010         	movff	_angle2+1,___ftadd@f2+1
  2797  001128  C0BF  F011         	movff	_angle2+2,___ftadd@f2+2
  2798  00112C  C0C0  F00C         	movff	_angle1,___ftadd@f1
  2799  001130  C0C1  F00D         	movff	_angle1+1,___ftadd@f1+1
  2800  001134  C0C2  F00E         	movff	_angle1+2,___ftadd@f1+2
  2801  001138  EC3E  F00C         	call	___ftadd	;wreg free
  2802  00113C  C00C  F06F         	movff	?___ftadd,_getHandleAngle$1801
  2803  001140  C00D  F070         	movff	?___ftadd+1,_getHandleAngle$1801+1
  2804  001144  C00E  F071         	movff	?___ftadd+2,_getHandleAngle$1801+2
  2805                           
  2806                           ;Main.c: 555: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  2807  001148  C0BA  F00F         	movff	_angle3,___ftadd@f2
  2808  00114C  C0BB  F010         	movff	_angle3+1,___ftadd@f2+1
  2809  001150  C0BC  F011         	movff	_angle3+2,___ftadd@f2+2
  2810  001154  C06F  F00C         	movff	_getHandleAngle$1801,___ftadd@f1
  2811  001158  C070  F00D         	movff	_getHandleAngle$1801+1,___ftadd@f1+1
  2812  00115C  C071  F00E         	movff	_getHandleAngle$1801+2,___ftadd@f1+2
  2813  001160  EC3E  F00C         	call	___ftadd	;wreg free
  2814  001164  C00C  F072         	movff	?___ftadd,_getHandleAngle$1802
  2815  001168  C00D  F073         	movff	?___ftadd+1,_getHandleAngle$1802+1
  2816  00116C  C00E  F074         	movff	?___ftadd+2,_getHandleAngle$1802+2
  2817                           
  2818                           ;Main.c: 555: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  2819  001170  C0B7  F00F         	movff	_angle4,___ftadd@f2
  2820  001174  C0B8  F010         	movff	_angle4+1,___ftadd@f2+1
  2821  001178  C0B9  F011         	movff	_angle4+2,___ftadd@f2+2
  2822  00117C  C072  F00C         	movff	_getHandleAngle$1802,___ftadd@f1
  2823  001180  C073  F00D         	movff	_getHandleAngle$1802+1,___ftadd@f1+1
  2824  001184  C074  F00E         	movff	_getHandleAngle$1802+2,___ftadd@f1+2
  2825  001188  EC3E  F00C         	call	___ftadd	;wreg free
  2826  00118C  C00C  F075         	movff	?___ftadd,_getHandleAngle$1803
  2827  001190  C00D  F076         	movff	?___ftadd+1,_getHandleAngle$1803+1
  2828  001194  C00E  F077         	movff	?___ftadd+2,_getHandleAngle$1803+2
  2829                           
  2830                           ;Main.c: 555: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  2831  001198  C0B4  F00F         	movff	_angle5,___ftadd@f2
  2832  00119C  C0B5  F010         	movff	_angle5+1,___ftadd@f2+1
  2833  0011A0  C0B6  F011         	movff	_angle5+2,___ftadd@f2+2
  2834  0011A4  C075  F00C         	movff	_getHandleAngle$1803,___ftadd@f1
  2835  0011A8  C076  F00D         	movff	_getHandleAngle$1803+1,___ftadd@f1+1
  2836  0011AC  C077  F00E         	movff	_getHandleAngle$1803+2,___ftadd@f1+2
  2837  0011B0  EC3E  F00C         	call	___ftadd	;wreg free
  2838  0011B4  C00C  F078         	movff	?___ftadd,_getHandleAngle$1804
  2839  0011B8  C00D  F079         	movff	?___ftadd+1,_getHandleAngle$1804+1
  2840  0011BC  C00E  F07A         	movff	?___ftadd+2,_getHandleAngle$1804+2
  2841                           
  2842                           ;Main.c: 555: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  2843  0011C0  C0B1  F00F         	movff	_angle6,___ftadd@f2
  2844  0011C4  C0B2  F010         	movff	_angle6+1,___ftadd@f2+1
  2845  0011C8  C0B3  F011         	movff	_angle6+2,___ftadd@f2+2
  2846  0011CC  C078  F00C         	movff	_getHandleAngle$1804,___ftadd@f1
  2847  0011D0  C079  F00D         	movff	_getHandleAngle$1804+1,___ftadd@f1+1
  2848  0011D4  C07A  F00E         	movff	_getHandleAngle$1804+2,___ftadd@f1+2
  2849  0011D8  EC3E  F00C         	call	___ftadd	;wreg free
  2850  0011DC  C00C  F07B         	movff	?___ftadd,_getHandleAngle$1805
  2851  0011E0  C00D  F07C         	movff	?___ftadd+1,_getHandleAngle$1805+1
  2852  0011E4  C00E  F07D         	movff	?___ftadd+2,_getHandleAngle$1805+2
  2853                           
  2854                           ;Main.c: 555: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  2855  0011E8  C0AE  F00F         	movff	_angle7,___ftadd@f2
  2856  0011EC  C0AF  F010         	movff	_angle7+1,___ftadd@f2+1
  2857  0011F0  C0B0  F011         	movff	_angle7+2,___ftadd@f2+2
  2858  0011F4  C07B  F00C         	movff	_getHandleAngle$1805,___ftadd@f1
  2859  0011F8  C07C  F00D         	movff	_getHandleAngle$1805+1,___ftadd@f1+1
  2860  0011FC  C07D  F00E         	movff	_getHandleAngle$1805+2,___ftadd@f1+2
  2861  001200  EC3E  F00C         	call	___ftadd	;wreg free
  2862  001204  C00C  F07E         	movff	?___ftadd,_getHandleAngle$1806
  2863  001208  C00D  F07F         	movff	?___ftadd+1,_getHandleAngle$1806+1
  2864  00120C  C00E  F080         	movff	?___ftadd+2,_getHandleAngle$1806+2
  2865                           
  2866                           ;Main.c: 555: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  2867  001210  C0AB  F00F         	movff	_angle8,___ftadd@f2
  2868  001214  C0AC  F010         	movff	_angle8+1,___ftadd@f2+1
  2869  001218  C0AD  F011         	movff	_angle8+2,___ftadd@f2+2
  2870  00121C  C07E  F00C         	movff	_getHandleAngle$1806,___ftadd@f1
  2871  001220  C07F  F00D         	movff	_getHandleAngle$1806+1,___ftadd@f1+1
  2872  001224  C080  F00E         	movff	_getHandleAngle$1806+2,___ftadd@f1+2
  2873  001228  EC3E  F00C         	call	___ftadd	;wreg free
  2874  00122C  C00C  F081         	movff	?___ftadd,_getHandleAngle$1807
  2875  001230  C00D  F082         	movff	?___ftadd+1,_getHandleAngle$1807+1
  2876  001234  C00E  F083         	movff	?___ftadd+2,_getHandleAngle$1807+2
  2877                           
  2878                           ;Main.c: 555: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  2879  001238  C0A8  F00F         	movff	_angle9,___ftadd@f2
  2880  00123C  C0A9  F010         	movff	_angle9+1,___ftadd@f2+1
  2881  001240  C0AA  F011         	movff	_angle9+2,___ftadd@f2+2
  2882  001244  C081  F00C         	movff	_getHandleAngle$1807,___ftadd@f1
  2883  001248  C082  F00D         	movff	_getHandleAngle$1807+1,___ftadd@f1+1
  2884  00124C  C083  F00E         	movff	_getHandleAngle$1807+2,___ftadd@f1+2
  2885  001250  EC3E  F00C         	call	___ftadd	;wreg free
  2886  001254  C00C  F084         	movff	?___ftadd,_getHandleAngle$1808
  2887  001258  C00D  F085         	movff	?___ftadd+1,_getHandleAngle$1808+1
  2888  00125C  C00E  F086         	movff	?___ftadd+2,_getHandleAngle$1808+2
  2889                           
  2890                           ;Main.c: 555: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  2891  001260  C0A5  F00F         	movff	_angle10,___ftadd@f2
  2892  001264  C0A6  F010         	movff	_angle10+1,___ftadd@f2+1
  2893  001268  C0A7  F011         	movff	_angle10+2,___ftadd@f2+2
  2894  00126C  C084  F00C         	movff	_getHandleAngle$1808,___ftadd@f1
  2895  001270  C085  F00D         	movff	_getHandleAngle$1808+1,___ftadd@f1+1
  2896  001274  C086  F00E         	movff	_getHandleAngle$1808+2,___ftadd@f1+2
  2897  001278  EC3E  F00C         	call	___ftadd	;wreg free
  2898  00127C  C00C  F018         	movff	?___ftadd,___ftdiv@f1
  2899  001280  C00D  F019         	movff	?___ftadd+1,___ftdiv@f1+1
  2900  001284  C00E  F01A         	movff	?___ftadd+2,___ftdiv@f1+2
  2901  001288  0E00               	movlw	0
  2902  00128A  6E1B               	movwf	___ftdiv@f2,c
  2903  00128C  0E20               	movlw	32
  2904  00128E  6E1C               	movwf	___ftdiv@f2+1,c
  2905  001290  0E41               	movlw	65
  2906  001292  6E1D               	movwf	___ftdiv@f2+2,c
  2907  001294  EC59  F00F         	call	___ftdiv	;wreg free
  2908  001298  C018  F069         	movff	?___ftdiv,getHandleAngle@averageAngle
  2909  00129C  C019  F06A         	movff	?___ftdiv+1,getHandleAngle@averageAngle+1
  2910  0012A0  C01A  F06B         	movff	?___ftdiv+2,getHandleAngle@averageAngle+2
  2911                           
  2912                           ;Main.c: 557: return averageAngle;
  2913  0012A4  C069  F058         	movff	getHandleAngle@averageAngle,?_getHandleAngle
  2914  0012A8  C06A  F059         	movff	getHandleAngle@averageAngle+1,?_getHandleAngle+1
  2915  0012AC  C06B  F05A         	movff	getHandleAngle@averageAngle+2,?_getHandleAngle+2
  2916  0012B0  0012               	return	
  2917  0012B2                     __end_of_getHandleAngle:
  2918                           	opt stack 0
  2919                           tblptru	equ	0xFF8
  2920                           tblptrh	equ	0xFF7
  2921                           tblptrl	equ	0xFF6
  2922                           tablat	equ	0xFF5
  2923                           postinc0	equ	0xFEE
  2924                           wreg	equ	0xFE8
  2925                           postdec1	equ	0xFE5
  2926                           fsr1l	equ	0xFE1
  2927                           status	equ	0xFD8
  2928                           
  2929 ;; *************** function _readAdc *****************
  2930 ;; Defined at:
  2931 ;;		line 487 in file "Main.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  pin             2    0[COMRAM] int 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  adcValue        2    4[COMRAM] unsigned int 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  2    0[COMRAM] int 
  2938 ;; Registers used:
  2939 ;;		wreg, status,2, status,0
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2945 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2946 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2947 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2948 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2949 ;;Total ram usage:        6 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; This function calls:
  2952 ;;		Nothing
  2953 ;; This function is called by:
  2954 ;;		_getHandleAngle
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           	psect	text10
  2959  002290                     __ptext10:
  2960                           	opt stack 0
  2961  002290                     _readAdc:
  2962                           	opt stack 29
  2963                           
  2964                           ;Main.c: 489: switch (pin) {
  2965                           
  2966                           ;incstack = 0
  2967  002290  D00B               	goto	l179
  2968  002292                     l180:
  2969                           
  2970                           ;Main.c: 492: ADPCHbits.ADPCH = 4;
  2971  002292  010F               	movlb	15	; () banked
  2972  002294  915F               	bcf	95,0,b	;volatile
  2973  002296  D002               	goto	L2
  2974  002298                     l182:
  2975                           
  2976                           ;Main.c: 499: ADPCHbits.ADPCH = 5;
  2977  002298  010F               	movlb	15	; () banked
  2978  00229A  815F               	bsf	95,0,b	;volatile
  2979  00229C                     L2:
  2980  00229C  935F               	bcf	95,1,b	;volatile
  2981  00229E  855F               	bsf	95,2,b	;volatile
  2982  0022A0  975F               	bcf	95,3,b	;volatile
  2983  0022A2  995F               	bcf	95,4,b	;volatile
  2984  0022A4  9B5F               	bcf	95,5,b	;volatile
  2985                           
  2986                           ; BSR set to: 15
  2987                           ;Main.c: 506: }
  2988                           
  2989                           ;Main.c: 504: break;
  2990  0022A6  D00F               	goto	l181
  2991  0022A8                     l179:
  2992                           
  2993                           ; BSR set to: 15
  2994  0022A8  C001  F003         	movff	readAdc@pin,??_readAdc
  2995  0022AC  C002  F004         	movff	readAdc@pin+1,??_readAdc+1
  2996                           
  2997                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2998                           ; Switch size 1, requested type "space"
  2999                           ; Number of cases is 1, Range of values is 0 to 0
  3000                           ; switch strategies available:
  3001                           ; Name         Instructions Cycles
  3002                           ; simple_byte            4     3 (average)
  3003                           ;	Chosen strategy is simple_byte
  3004  0022B0  5004               	movf	??_readAdc+1,w,c
  3005  0022B2  0A00               	xorlw	0	; case 0
  3006  0022B4  A4D8               	btfss	status,2,c
  3007  0022B6  D007               	goto	l181
  3008                           
  3009                           ; Switch size 1, requested type "space"
  3010                           ; Number of cases is 2, Range of values is 6 to 7
  3011                           ; switch strategies available:
  3012                           ; Name         Instructions Cycles
  3013                           ; simple_byte            7     4 (average)
  3014                           ;	Chosen strategy is simple_byte
  3015  0022B8  5003               	movf	??_readAdc,w,c
  3016  0022BA  0A06               	xorlw	6	; case 6
  3017  0022BC  B4D8               	btfsc	status,2,c
  3018  0022BE  D7E9               	goto	l180
  3019  0022C0  0A01               	xorlw	1	; case 7
  3020  0022C2  B4D8               	btfsc	status,2,c
  3021  0022C4  D7E9               	goto	l182
  3022  0022C6                     l181:
  3023                           
  3024                           ;Main.c: 508: ADCON0bits.ADON = 1;
  3025  0022C6  8E60               	bsf	3936,7,c	;volatile
  3026                           
  3027                           ;Main.c: 510: ADCON0bits.ADGO = 1;
  3028  0022C8  8060               	bsf	3936,0,c	;volatile
  3029  0022CA  B060               	btfsc	3936,0,c	;volatile
  3030  0022CC  D7FE               	goto	l184
  3031                           
  3032                           ;Main.c: 512: }
  3033                           ;Main.c: 513: unsigned int adcValue = ADRES;
  3034  0022CE  CF63 F005          	movff	3939,readAdc@adcValue	;volatile
  3035  0022D2  CF64 F006          	movff	3940,readAdc@adcValue+1	;volatile
  3036                           
  3037                           ;Main.c: 514: return adcValue;
  3038  0022D6  C005  F001         	movff	readAdc@adcValue,?_readAdc
  3039  0022DA  C006  F002         	movff	readAdc@adcValue+1,?_readAdc+1
  3040  0022DE  0012               	return	
  3041  0022E0                     __end_of_readAdc:
  3042                           	opt stack 0
  3043                           tblptru	equ	0xFF8
  3044                           tblptrh	equ	0xFF7
  3045                           tblptrl	equ	0xFF6
  3046                           tablat	equ	0xFF5
  3047                           postinc0	equ	0xFEE
  3048                           wreg	equ	0xFE8
  3049                           postdec1	equ	0xFE5
  3050                           fsr1l	equ	0xFE1
  3051                           status	equ	0xFD8
  3052                           
  3053 ;; *************** function _atan2 *****************
  3054 ;; Defined at:
  3055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\atan2.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;  y               3   81[COMRAM] int 
  3058 ;;  x               3   84[COMRAM] int 
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;  v               3    6[BANK0 ] int 
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  3   81[COMRAM] int 
  3063 ;; Registers used:
  3064 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3070 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3071 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3073 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3074 ;;Total ram usage:       15 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    4
  3077 ;; This function calls:
  3078 ;;		___ftadd
  3079 ;;		___ftdiv
  3080 ;;		___ftge
  3081 ;;		___ftneg
  3082 ;;		___ftsub
  3083 ;;		_atan
  3084 ;;		_fabs
  3085 ;; This function is called by:
  3086 ;;		_getHandleAngle
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           	psect	text11
  3091  0012B2                     __ptext11:
  3092                           	opt stack 0
  3093  0012B2                     _atan2:
  3094                           	opt stack 25
  3095                           
  3096                           ;incstack = 0
  3097  0012B2  5055               	movf	atan2@x,w,c
  3098  0012B4  1056               	iorwf	atan2@x+1,w,c
  3099  0012B6  1057               	iorwf	atan2@x+2,w,c
  3100  0012B8  A4D8               	btfss	status,2,c
  3101  0012BA  D02F               	goto	l424
  3102  0012BC  5052               	movf	atan2@y,w,c
  3103  0012BE  1053               	iorwf	atan2@y+1,w,c
  3104  0012C0  1054               	iorwf	atan2@y+2,w,c
  3105  0012C2  A4D8               	btfss	status,2,c
  3106  0012C4  D00C               	goto	l421
  3107  0012C6  0E00               	movlw	0
  3108  0012C8  0100               	movlb	0	; () banked
  3109  0012CA  6FC4               	movwf	(_errno+1)& (0+255),b
  3110  0012CC  0E21               	movlw	33
  3111  0012CE  6FC3               	movwf	_errno& (0+255),b
  3112  0012D0  0E00               	movlw	0
  3113  0012D2  6E52               	movwf	?_atan2,c
  3114  0012D4  0E00               	movlw	0
  3115  0012D6  6E53               	movwf	?_atan2+1,c
  3116  0012D8  0E00               	movlw	0
  3117  0012DA  6E54               	movwf	?_atan2+2,c
  3118                           
  3119                           ; BSR set to: 0
  3120  0012DC  0012               	return	
  3121  0012DE                     l421:
  3122                           
  3123                           ; BSR set to: 0
  3124  0012DE  0E00               	movlw	0
  3125  0012E0  6E0F               	movwf	___ftge@ff1,c
  3126  0012E2  0E00               	movlw	0
  3127  0012E4  6E10               	movwf	___ftge@ff1+1,c
  3128  0012E6  0E00               	movlw	0
  3129  0012E8  6E11               	movwf	___ftge@ff1+2,c
  3130  0012EA  C052  F012         	movff	atan2@y,___ftge@ff2
  3131  0012EE  C053  F013         	movff	atan2@y+1,___ftge@ff2+1
  3132  0012F2  C054  F014         	movff	atan2@y+2,___ftge@ff2+2
  3133  0012F6  ECD6  F010         	call	___ftge	;wreg free
  3134  0012FA  B0D8               	btfsc	status,0,c
  3135  0012FC  D007               	goto	l423
  3136  0012FE  0E10               	movlw	16
  3137  001300  6E52               	movwf	?_atan2,c
  3138  001302  0EC9               	movlw	201
  3139  001304  6E53               	movwf	?_atan2+1,c
  3140  001306  0E3F               	movlw	63
  3141  001308  6E54               	movwf	?_atan2+2,c
  3142  00130A  0012               	return	
  3143  00130C                     l423:
  3144  00130C  0E10               	movlw	16
  3145  00130E  6E52               	movwf	?_atan2,c
  3146  001310  0EC9               	movlw	201
  3147  001312  6E53               	movwf	?_atan2+1,c
  3148  001314  0EBF               	movlw	191
  3149  001316  6E54               	movwf	?_atan2+2,c
  3150  001318  0012               	return	
  3151  00131A                     l424:
  3152  00131A  5052               	movf	atan2@y,w,c
  3153  00131C  1053               	iorwf	atan2@y+1,w,c
  3154  00131E  1054               	iorwf	atan2@y+2,w,c
  3155  001320  A4D8               	btfss	status,2,c
  3156  001322  D01E               	goto	l427
  3157  001324  0E00               	movlw	0
  3158  001326  6E0F               	movwf	___ftge@ff1,c
  3159  001328  0E00               	movlw	0
  3160  00132A  6E10               	movwf	___ftge@ff1+1,c
  3161  00132C  0E00               	movlw	0
  3162  00132E  6E11               	movwf	___ftge@ff1+2,c
  3163  001330  C055  F012         	movff	atan2@x,___ftge@ff2
  3164  001334  C056  F013         	movff	atan2@x+1,___ftge@ff2+1
  3165  001338  C057  F014         	movff	atan2@x+2,___ftge@ff2+2
  3166  00133C  ECD6  F010         	call	___ftge	;wreg free
  3167  001340  B0D8               	btfsc	status,0,c
  3168  001342  D007               	goto	l426
  3169  001344  0E00               	movlw	0
  3170  001346  6E52               	movwf	?_atan2,c
  3171  001348  0E00               	movlw	0
  3172  00134A  6E53               	movwf	?_atan2+1,c
  3173  00134C  0E00               	movlw	0
  3174  00134E  6E54               	movwf	?_atan2+2,c
  3175  001350  0012               	return	
  3176  001352                     l426:
  3177  001352  0E10               	movlw	16
  3178  001354  6E52               	movwf	?_atan2,c
  3179  001356  0E49               	movlw	73
  3180  001358  6E53               	movwf	?_atan2+1,c
  3181  00135A  0E40               	movlw	64
  3182  00135C  6E54               	movwf	?_atan2+2,c
  3183  00135E  0012               	return	
  3184  001360                     l427:
  3185  001360  C055  F00C         	movff	atan2@x,fabs@d
  3186  001364  C056  F00D         	movff	atan2@x+1,fabs@d+1
  3187  001368  C057  F00E         	movff	atan2@x+2,fabs@d+2
  3188  00136C  ECD3  F011         	call	_fabs	;wreg free
  3189  001370  C00C  F00F         	movff	?_fabs,___ftge@ff1
  3190  001374  C00D  F010         	movff	?_fabs+1,___ftge@ff1+1
  3191  001378  C00E  F011         	movff	?_fabs+2,___ftge@ff1+2
  3192  00137C  C052  F00C         	movff	atan2@y,fabs@d
  3193  001380  C053  F00D         	movff	atan2@y+1,fabs@d+1
  3194  001384  C054  F00E         	movff	atan2@y+2,fabs@d+2
  3195  001388  ECD3  F011         	call	_fabs	;wreg free
  3196  00138C  C00C  F012         	movff	?_fabs,___ftge@ff2
  3197  001390  C00D  F013         	movff	?_fabs+1,___ftge@ff2+1
  3198  001394  C00E  F014         	movff	?_fabs+2,___ftge@ff2+2
  3199  001398  ECD6  F010         	call	___ftge	;wreg free
  3200  00139C  A0D8               	btfss	status,0,c
  3201  00139E  D056               	goto	l428
  3202  0013A0  C052  F018         	movff	atan2@y,___ftdiv@f1
  3203  0013A4  C053  F019         	movff	atan2@y+1,___ftdiv@f1+1
  3204  0013A8  C054  F01A         	movff	atan2@y+2,___ftdiv@f1+2
  3205  0013AC  C055  F01B         	movff	atan2@x,___ftdiv@f2
  3206  0013B0  C056  F01C         	movff	atan2@x+1,___ftdiv@f2+1
  3207  0013B4  C057  F01D         	movff	atan2@x+2,___ftdiv@f2+2
  3208  0013B8  EC59  F00F         	call	___ftdiv	;wreg free
  3209  0013BC  C018  F063         	movff	?___ftdiv,_atan2$1809
  3210  0013C0  C019  F064         	movff	?___ftdiv+1,_atan2$1809+1
  3211  0013C4  C01A  F065         	movff	?___ftdiv+2,_atan2$1809+2
  3212  0013C8  C063  F042         	movff	_atan2$1809,atan@f
  3213  0013CC  C064  F043         	movff	_atan2$1809+1,atan@f+1
  3214  0013D0  C065  F044         	movff	_atan2$1809+2,atan@f+2
  3215  0013D4  EC88  F00A         	call	_atan	;wreg free
  3216  0013D8  C042  F066         	movff	?_atan,atan2@v
  3217  0013DC  C043  F067         	movff	?_atan+1,atan2@v+1
  3218  0013E0  C044  F068         	movff	?_atan+2,atan2@v+2
  3219  0013E4  AE57               	btfss	atan2@x+2,7,c
  3220  0013E6  D02B               	goto	l431
  3221  0013E8  BE54               	btfsc	atan2@y+2,7,c
  3222  0013EA  D015               	goto	l430
  3223  0013EC  C066  F00C         	movff	atan2@v,___ftadd@f1
  3224  0013F0  C067  F00D         	movff	atan2@v+1,___ftadd@f1+1
  3225  0013F4  C068  F00E         	movff	atan2@v+2,___ftadd@f1+2
  3226  0013F8  0E10               	movlw	16
  3227  0013FA  6E0F               	movwf	___ftadd@f2,c
  3228  0013FC  0E49               	movlw	73
  3229  0013FE  6E10               	movwf	___ftadd@f2+1,c
  3230  001400  0E40               	movlw	64
  3231  001402  6E11               	movwf	___ftadd@f2+2,c
  3232  001404  EC3E  F00C         	call	___ftadd	;wreg free
  3233  001408  C00C  F066         	movff	?___ftadd,atan2@v
  3234  00140C  C00D  F067         	movff	?___ftadd+1,atan2@v+1
  3235  001410  C00E  F068         	movff	?___ftadd+2,atan2@v+2
  3236  001414  D014               	goto	l431
  3237  001416                     l430:
  3238  001416  C066  F018         	movff	atan2@v,___ftsub@f1
  3239  00141A  C067  F019         	movff	atan2@v+1,___ftsub@f1+1
  3240  00141E  C068  F01A         	movff	atan2@v+2,___ftsub@f1+2
  3241  001422  0E10               	movlw	16
  3242  001424  6E1B               	movwf	___ftsub@f2,c
  3243  001426  0E49               	movlw	73
  3244  001428  6E1C               	movwf	___ftsub@f2+1,c
  3245  00142A  0E40               	movlw	64
  3246  00142C  6E1D               	movwf	___ftsub@f2+2,c
  3247  00142E  EC97  F011         	call	___ftsub	;wreg free
  3248  001432  C018  F066         	movff	?___ftsub,atan2@v
  3249  001436  C019  F067         	movff	?___ftsub+1,atan2@v+1
  3250  00143A  C01A  F068         	movff	?___ftsub+2,atan2@v+2
  3251  00143E                     l431:
  3252  00143E  C066  F052         	movff	atan2@v,?_atan2
  3253  001442  C067  F053         	movff	atan2@v+1,?_atan2+1
  3254  001446  C068  F054         	movff	atan2@v+2,?_atan2+2
  3255  00144A  0012               	return	
  3256  00144C                     l428:
  3257  00144C  C052  F01B         	movff	atan2@y,___ftdiv@f2
  3258  001450  C053  F01C         	movff	atan2@y+1,___ftdiv@f2+1
  3259  001454  C054  F01D         	movff	atan2@y+2,___ftdiv@f2+2
  3260  001458  C055  F018         	movff	atan2@x,___ftdiv@f1
  3261  00145C  C056  F019         	movff	atan2@x+1,___ftdiv@f1+1
  3262  001460  C057  F01A         	movff	atan2@x+2,___ftdiv@f1+2
  3263  001464  EC59  F00F         	call	___ftdiv	;wreg free
  3264  001468  C018  F063         	movff	?___ftdiv,_atan2$1809
  3265  00146C  C019  F064         	movff	?___ftdiv+1,_atan2$1809+1
  3266  001470  C01A  F065         	movff	?___ftdiv+2,_atan2$1809+2
  3267  001474  C063  F042         	movff	_atan2$1809,atan@f
  3268  001478  C064  F043         	movff	_atan2$1809+1,atan@f+1
  3269  00147C  C065  F044         	movff	_atan2$1809+2,atan@f+2
  3270  001480  EC88  F00A         	call	_atan	;wreg free
  3271  001484  C042  F060         	movff	?_atan,_atan2$1810
  3272  001488  C043  F061         	movff	?_atan+1,_atan2$1810+1
  3273  00148C  C044  F062         	movff	?_atan+2,_atan2$1810+2
  3274  001490  C060  F009         	movff	_atan2$1810,___ftneg@f1
  3275  001494  C061  F00A         	movff	_atan2$1810+1,___ftneg@f1+1
  3276  001498  C062  F00B         	movff	_atan2$1810+2,___ftneg@f1+2
  3277  00149C  EC10  F012         	call	___ftneg	;wreg free
  3278  0014A0  C009  F066         	movff	?___ftneg,atan2@v
  3279  0014A4  C00A  F067         	movff	?___ftneg+1,atan2@v+1
  3280  0014A8  C00B  F068         	movff	?___ftneg+2,atan2@v+2
  3281  0014AC  AE54               	btfss	atan2@y+2,7,c
  3282  0014AE  D015               	goto	l432
  3283  0014B0  C066  F018         	movff	atan2@v,___ftsub@f1
  3284  0014B4  C067  F019         	movff	atan2@v+1,___ftsub@f1+1
  3285  0014B8  C068  F01A         	movff	atan2@v+2,___ftsub@f1+2
  3286  0014BC  0E10               	movlw	16
  3287  0014BE  6E1B               	movwf	___ftsub@f2,c
  3288  0014C0  0EC9               	movlw	201
  3289  0014C2  6E1C               	movwf	___ftsub@f2+1,c
  3290  0014C4  0E3F               	movlw	63
  3291  0014C6  6E1D               	movwf	___ftsub@f2+2,c
  3292  0014C8  EC97  F011         	call	___ftsub	;wreg free
  3293  0014CC  C018  F066         	movff	?___ftsub,atan2@v
  3294  0014D0  C019  F067         	movff	?___ftsub+1,atan2@v+1
  3295  0014D4  C01A  F068         	movff	?___ftsub+2,atan2@v+2
  3296  0014D8  D014               	goto	l433
  3297  0014DA                     l432:
  3298  0014DA  C066  F00C         	movff	atan2@v,___ftadd@f1
  3299  0014DE  C067  F00D         	movff	atan2@v+1,___ftadd@f1+1
  3300  0014E2  C068  F00E         	movff	atan2@v+2,___ftadd@f1+2
  3301  0014E6  0E10               	movlw	16
  3302  0014E8  6E0F               	movwf	___ftadd@f2,c
  3303  0014EA  0EC9               	movlw	201
  3304  0014EC  6E10               	movwf	___ftadd@f2+1,c
  3305  0014EE  0E3F               	movlw	63
  3306  0014F0  6E11               	movwf	___ftadd@f2+2,c
  3307  0014F2  EC3E  F00C         	call	___ftadd	;wreg free
  3308  0014F6  C00C  F066         	movff	?___ftadd,atan2@v
  3309  0014FA  C00D  F067         	movff	?___ftadd+1,atan2@v+1
  3310  0014FE  C00E  F068         	movff	?___ftadd+2,atan2@v+2
  3311  001502                     l433:
  3312  001502  C066  F052         	movff	atan2@v,?_atan2
  3313  001506  C067  F053         	movff	atan2@v+1,?_atan2+1
  3314  00150A  C068  F054         	movff	atan2@v+2,?_atan2+2
  3315  00150E  0012               	return	
  3316  001510                     __end_of_atan2:
  3317                           	opt stack 0
  3318                           tblptru	equ	0xFF8
  3319                           tblptrh	equ	0xFF7
  3320                           tblptrl	equ	0xFF6
  3321                           tablat	equ	0xFF5
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           postdec1	equ	0xFE5
  3325                           fsr1l	equ	0xFE1
  3326                           status	equ	0xFD8
  3327                           
  3328 ;; *************** function _atan *****************
  3329 ;; Defined at:
  3330 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\atan.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;  f               3   65[COMRAM] int 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  val             3   78[COMRAM] int 
  3335 ;;  val_squared     3   75[COMRAM] int 
  3336 ;;  x               3   71[COMRAM] int 
  3337 ;;  y               3   68[COMRAM] int 
  3338 ;;  recip           1   74[COMRAM] unsigned char 
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  3   65[COMRAM] unsigned char 
  3341 ;; Registers used:
  3342 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3348 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3349 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3351 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3352 ;;Total ram usage:       16 bytes
  3353 ;; Hardware stack levels used:    1
  3354 ;; Hardware stack levels required when called:    3
  3355 ;; This function calls:
  3356 ;;		___ftadd
  3357 ;;		___ftdiv
  3358 ;;		___ftge
  3359 ;;		___ftmul
  3360 ;;		___ftneg
  3361 ;;		_eval_poly
  3362 ;;		_fabs
  3363 ;; This function is called by:
  3364 ;;		_atan2
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text12
  3369  001510                     __ptext12:
  3370                           	opt stack 0
  3371  001510                     _atan:
  3372                           	opt stack 25
  3373                           
  3374                           ;incstack = 0
  3375  001510  C042  F00C         	movff	atan@f,fabs@d
  3376  001514  C043  F00D         	movff	atan@f+1,fabs@d+1
  3377  001518  C044  F00E         	movff	atan@f+2,fabs@d+2
  3378  00151C  ECD3  F011         	call	_fabs	;wreg free
  3379  001520  C00C  F04F         	movff	?_fabs,atan@val
  3380  001524  C00D  F050         	movff	?_fabs+1,atan@val+1
  3381  001528  C00E  F051         	movff	?_fabs+2,atan@val+2
  3382  00152C  504F               	movf	atan@val,w,c
  3383  00152E  1050               	iorwf	atan@val+1,w,c
  3384  001530  1051               	iorwf	atan@val+2,w,c
  3385  001532  A4D8               	btfss	status,2,c
  3386  001534  D007               	goto	l881
  3387  001536  0E00               	movlw	0
  3388  001538  6E42               	movwf	?_atan,c
  3389  00153A  0E00               	movlw	0
  3390  00153C  6E43               	movwf	?_atan+1,c
  3391  00153E  0E00               	movlw	0
  3392  001540  6E44               	movwf	?_atan+2,c
  3393  001542  0012               	return	
  3394  001544                     l881:
  3395  001544  0E00               	movlw	0
  3396  001546  6E0F               	movwf	___ftge@ff1,c
  3397  001548  0E80               	movlw	128
  3398  00154A  6E10               	movwf	___ftge@ff1+1,c
  3399  00154C  0E3F               	movlw	63
  3400  00154E  6E11               	movwf	___ftge@ff1+2,c
  3401  001550  C04F  F012         	movff	atan@val,___ftge@ff2
  3402  001554  C050  F013         	movff	atan@val+1,___ftge@ff2+1
  3403  001558  C051  F014         	movff	atan@val+2,___ftge@ff2+2
  3404  00155C  ECD6  F010         	call	___ftge	;wreg free
  3405  001560  B0D8               	btfsc	status,0,c
  3406  001562  D002               	goto	u1850
  3407  001564  0E01               	movlw	1
  3408  001566  D001               	goto	u1860
  3409  001568                     u1850:
  3410  001568  0E00               	movlw	0
  3411  00156A                     u1860:
  3412  00156A  6E4B               	movwf	atan@recip,c
  3413  00156C  504B               	movf	atan@recip,w,c
  3414  00156E  B4D8               	btfsc	status,2,c
  3415  001570  D014               	goto	l883
  3416  001572  0E00               	movlw	0
  3417  001574  6E18               	movwf	___ftdiv@f1,c
  3418  001576  0E80               	movlw	128
  3419  001578  6E19               	movwf	___ftdiv@f1+1,c
  3420  00157A  0E3F               	movlw	63
  3421  00157C  6E1A               	movwf	___ftdiv@f1+2,c
  3422  00157E  C04F  F01B         	movff	atan@val,___ftdiv@f2
  3423  001582  C050  F01C         	movff	atan@val+1,___ftdiv@f2+1
  3424  001586  C051  F01D         	movff	atan@val+2,___ftdiv@f2+2
  3425  00158A  EC59  F00F         	call	___ftdiv	;wreg free
  3426  00158E  C018  F04F         	movff	?___ftdiv,atan@val
  3427  001592  C019  F050         	movff	?___ftdiv+1,atan@val+1
  3428  001596  C01A  F051         	movff	?___ftdiv+2,atan@val+2
  3429  00159A                     l883:
  3430  00159A  C04F  F027         	movff	atan@val,___ftmul@f1
  3431  00159E  C050  F028         	movff	atan@val+1,___ftmul@f1+1
  3432  0015A2  C051  F029         	movff	atan@val+2,___ftmul@f1+2
  3433  0015A6  C04F  F02A         	movff	atan@val,___ftmul@f2
  3434  0015AA  C050  F02B         	movff	atan@val+1,___ftmul@f2+1
  3435  0015AE  C051  F02C         	movff	atan@val+2,___ftmul@f2+2
  3436  0015B2  ECDF  F00E         	call	___ftmul	;wreg free
  3437  0015B6  C027  F04C         	movff	?___ftmul,atan@val_squared
  3438  0015BA  C028  F04D         	movff	?___ftmul+1,atan@val_squared+1
  3439  0015BE  C029  F04E         	movff	?___ftmul+2,atan@val_squared+2
  3440  0015C2  C04C  F036         	movff	atan@val_squared,eval_poly@x
  3441  0015C6  C04D  F037         	movff	atan@val_squared+1,eval_poly@x+1
  3442  0015CA  C04E  F038         	movff	atan@val_squared+2,eval_poly@x+2
  3443  0015CE  0E26               	movlw	low atan@coeff_b
  3444  0015D0  6E39               	movwf	eval_poly@d,c
  3445  0015D2  0E0F               	movlw	high atan@coeff_b
  3446  0015D4  6E3A               	movwf	eval_poly@d+1,c
  3447  0015D6  0E00               	movlw	0
  3448  0015D8  6E3C               	movwf	eval_poly@n+1,c
  3449  0015DA  0E04               	movlw	4
  3450  0015DC  6E3B               	movwf	eval_poly@n,c
  3451  0015DE  ECCC  F00F         	call	_eval_poly	;wreg free
  3452  0015E2  C036  F045         	movff	?_eval_poly,atan@y
  3453  0015E6  C037  F046         	movff	?_eval_poly+1,atan@y+1
  3454  0015EA  C038  F047         	movff	?_eval_poly+2,atan@y+2
  3455  0015EE  C04C  F036         	movff	atan@val_squared,eval_poly@x
  3456  0015F2  C04D  F037         	movff	atan@val_squared+1,eval_poly@x+1
  3457  0015F6  C04E  F038         	movff	atan@val_squared+2,eval_poly@x+2
  3458  0015FA  0E14               	movlw	low atan@coeff_a
  3459  0015FC  6E39               	movwf	eval_poly@d,c
  3460  0015FE  0E0F               	movlw	high atan@coeff_a
  3461  001600  6E3A               	movwf	eval_poly@d+1,c
  3462  001602  0E00               	movlw	0
  3463  001604  6E3C               	movwf	eval_poly@n+1,c
  3464  001606  0E05               	movlw	5
  3465  001608  6E3B               	movwf	eval_poly@n,c
  3466  00160A  ECCC  F00F         	call	_eval_poly	;wreg free
  3467  00160E  C036  F048         	movff	?_eval_poly,atan@x
  3468  001612  C037  F049         	movff	?_eval_poly+1,atan@x+1
  3469  001616  C038  F04A         	movff	?_eval_poly+2,atan@x+2
  3470  00161A  C04F  F027         	movff	atan@val,___ftmul@f1
  3471  00161E  C050  F028         	movff	atan@val+1,___ftmul@f1+1
  3472  001622  C051  F029         	movff	atan@val+2,___ftmul@f1+2
  3473  001626  C045  F01B         	movff	atan@y,___ftdiv@f2
  3474  00162A  C046  F01C         	movff	atan@y+1,___ftdiv@f2+1
  3475  00162E  C047  F01D         	movff	atan@y+2,___ftdiv@f2+2
  3476  001632  C048  F018         	movff	atan@x,___ftdiv@f1
  3477  001636  C049  F019         	movff	atan@x+1,___ftdiv@f1+1
  3478  00163A  C04A  F01A         	movff	atan@x+2,___ftdiv@f1+2
  3479  00163E  EC59  F00F         	call	___ftdiv	;wreg free
  3480  001642  C018  F02A         	movff	?___ftdiv,___ftmul@f2
  3481  001646  C019  F02B         	movff	?___ftdiv+1,___ftmul@f2+1
  3482  00164A  C01A  F02C         	movff	?___ftdiv+2,___ftmul@f2+2
  3483  00164E  ECDF  F00E         	call	___ftmul	;wreg free
  3484  001652  C027  F04F         	movff	?___ftmul,atan@val
  3485  001656  C028  F050         	movff	?___ftmul+1,atan@val+1
  3486  00165A  C029  F051         	movff	?___ftmul+2,atan@val+2
  3487  00165E  504B               	movf	atan@recip,w,c
  3488  001660  B4D8               	btfsc	status,2,c
  3489  001662  D01C               	goto	l884
  3490  001664  C04F  F009         	movff	atan@val,___ftneg@f1
  3491  001668  C050  F00A         	movff	atan@val+1,___ftneg@f1+1
  3492  00166C  C051  F00B         	movff	atan@val+2,___ftneg@f1+2
  3493  001670  EC10  F012         	call	___ftneg	;wreg free
  3494  001674  C009  F00C         	movff	?___ftneg,___ftadd@f1
  3495  001678  C00A  F00D         	movff	?___ftneg+1,___ftadd@f1+1
  3496  00167C  C00B  F00E         	movff	?___ftneg+2,___ftadd@f1+2
  3497  001680  0E10               	movlw	16
  3498  001682  6E0F               	movwf	___ftadd@f2,c
  3499  001684  0EC9               	movlw	201
  3500  001686  6E10               	movwf	___ftadd@f2+1,c
  3501  001688  0E3F               	movlw	63
  3502  00168A  6E11               	movwf	___ftadd@f2+2,c
  3503  00168C  EC3E  F00C         	call	___ftadd	;wreg free
  3504  001690  C00C  F04F         	movff	?___ftadd,atan@val
  3505  001694  C00D  F050         	movff	?___ftadd+1,atan@val+1
  3506  001698  C00E  F051         	movff	?___ftadd+2,atan@val+2
  3507  00169C                     l884:
  3508  00169C  BE44               	btfsc	atan@f+2,7,c
  3509  00169E  D007               	goto	l886
  3510  0016A0  C04F  F042         	movff	atan@val,?_atan
  3511  0016A4  C050  F043         	movff	atan@val+1,?_atan+1
  3512  0016A8  C051  F044         	movff	atan@val+2,?_atan+2
  3513  0016AC  0012               	return	
  3514  0016AE                     l886:
  3515  0016AE  C04F  F009         	movff	atan@val,___ftneg@f1
  3516  0016B2  C050  F00A         	movff	atan@val+1,___ftneg@f1+1
  3517  0016B6  C051  F00B         	movff	atan@val+2,___ftneg@f1+2
  3518  0016BA  EC10  F012         	call	___ftneg	;wreg free
  3519  0016BE  C009  F042         	movff	?___ftneg,?_atan
  3520  0016C2  C00A  F043         	movff	?___ftneg+1,?_atan+1
  3521  0016C6  C00B  F044         	movff	?___ftneg+2,?_atan+2
  3522  0016CA  0012               	return	
  3523  0016CC                     __end_of_atan:
  3524                           	opt stack 0
  3525                           tblptru	equ	0xFF8
  3526                           tblptrh	equ	0xFF7
  3527                           tblptrl	equ	0xFF6
  3528                           tablat	equ	0xFF5
  3529                           postinc0	equ	0xFEE
  3530                           wreg	equ	0xFE8
  3531                           postdec1	equ	0xFE5
  3532                           fsr1l	equ	0xFE1
  3533                           status	equ	0xFD8
  3534                           
  3535 ;; *************** function _fabs *****************
  3536 ;; Defined at:
  3537 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fabs.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;  d               3   11[COMRAM] unsigned char 
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;		None
  3542 ;; Return value:  Size  Location     Type
  3543 ;;                  3   11[COMRAM] unsigned char 
  3544 ;; Registers used:
  3545 ;;		wreg, status,2, status,0, cstack
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3551 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3554 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3555 ;;Total ram usage:        3 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; Hardware stack levels required when called:    1
  3558 ;; This function calls:
  3559 ;;		___ftneg
  3560 ;; This function is called by:
  3561 ;;		_atan2
  3562 ;;		_atan
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	text13
  3567  0023A6                     __ptext13:
  3568                           	opt stack 0
  3569  0023A6                     _fabs:
  3570                           	opt stack 27
  3571                           
  3572                           ;incstack = 0
  3573  0023A6  AE0E               	btfss	fabs@d+2,7,c
  3574  0023A8  D00F               	goto	l502
  3575  0023AA  C00C  F009         	movff	fabs@d,___ftneg@f1
  3576  0023AE  C00D  F00A         	movff	fabs@d+1,___ftneg@f1+1
  3577  0023B2  C00E  F00B         	movff	fabs@d+2,___ftneg@f1+2
  3578  0023B6  EC10  F012         	call	___ftneg	;wreg free
  3579  0023BA  C009  F00C         	movff	?___ftneg,?_fabs
  3580  0023BE  C00A  F00D         	movff	?___ftneg+1,?_fabs+1
  3581  0023C2  C00B  F00E         	movff	?___ftneg+2,?_fabs+2
  3582  0023C6  0012               	return	
  3583  0023C8                     l502:
  3584  0023C8  C00C  F00C         	movff	fabs@d,?_fabs
  3585  0023CC  C00D  F00D         	movff	fabs@d+1,?_fabs+1
  3586  0023D0  C00E  F00E         	movff	fabs@d+2,?_fabs+2
  3587  0023D4  0012               	return		;funcret
  3588  0023D6                     __end_of_fabs:
  3589                           	opt stack 0
  3590                           tblptru	equ	0xFF8
  3591                           tblptrh	equ	0xFF7
  3592                           tblptrl	equ	0xFF6
  3593                           tablat	equ	0xFF5
  3594                           postinc0	equ	0xFEE
  3595                           wreg	equ	0xFE8
  3596                           postdec1	equ	0xFE5
  3597                           fsr1l	equ	0xFE1
  3598                           status	equ	0xFD8
  3599                           
  3600 ;; *************** function ___ftneg *****************
  3601 ;; Defined at:
  3602 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;  f1              3    8[COMRAM] float 
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;		None
  3607 ;; Return value:  Size  Location     Type
  3608 ;;                  3    8[COMRAM] float 
  3609 ;; Registers used:
  3610 ;;		wreg, status,2, status,0
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3616 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3619 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3620 ;;Total ram usage:        3 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; This function calls:
  3623 ;;		Nothing
  3624 ;; This function is called by:
  3625 ;;		_main
  3626 ;;		_atan2
  3627 ;;		_fabs
  3628 ;;		_atan
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           	psect	text14
  3633  002420                     __ptext14:
  3634                           	opt stack 0
  3635  002420                     ___ftneg:
  3636                           	opt stack 27
  3637                           
  3638                           ;incstack = 0
  3639  002420  5009               	movf	___ftneg@f1,w,c
  3640  002422  100A               	iorwf	___ftneg@f1+1,w,c
  3641  002424  100B               	iorwf	___ftneg@f1+2,w,c
  3642  002426  B4D8               	btfsc	status,2,c
  3643  002428  D006               	goto	l611
  3644  00242A  0E00               	movlw	0
  3645  00242C  1A09               	xorwf	___ftneg@f1,f,c
  3646  00242E  0E00               	movlw	0
  3647  002430  1A0A               	xorwf	___ftneg@f1+1,f,c
  3648  002432  0E80               	movlw	128
  3649  002434  1A0B               	xorwf	___ftneg@f1+2,f,c
  3650  002436                     l611:
  3651  002436  C009  F009         	movff	___ftneg@f1,?___ftneg
  3652  00243A  C00A  F00A         	movff	___ftneg@f1+1,?___ftneg+1
  3653  00243E  C00B  F00B         	movff	___ftneg@f1+2,?___ftneg+2
  3654  002442  0012               	return		;funcret
  3655  002444                     __end_of___ftneg:
  3656                           	opt stack 0
  3657                           tblptru	equ	0xFF8
  3658                           tblptrh	equ	0xFF7
  3659                           tblptrl	equ	0xFF6
  3660                           tablat	equ	0xFF5
  3661                           postinc0	equ	0xFEE
  3662                           wreg	equ	0xFE8
  3663                           postdec1	equ	0xFE5
  3664                           fsr1l	equ	0xFE1
  3665                           status	equ	0xFD8
  3666                           
  3667 ;; *************** function _eval_poly *****************
  3668 ;; Defined at:
  3669 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  x               3   53[COMRAM] float 
  3672 ;;  d               2   56[COMRAM] PTR const 
  3673 ;;		 -> atan@coeff_a(18), atan@coeff_b(15), 
  3674 ;;  n               2   58[COMRAM] int 
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;  res             3   62[COMRAM] int 
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  3   53[COMRAM] int 
  3679 ;; Registers used:
  3680 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3686 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3687 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3688 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3689 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3690 ;;Total ram usage:       12 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:    2
  3693 ;; This function calls:
  3694 ;;		___ftadd
  3695 ;;		___ftmul
  3696 ;;		___wmul
  3697 ;; This function is called by:
  3698 ;;		_atan
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           	psect	text15
  3703  001F98                     __ptext15:
  3704                           	opt stack 0
  3705  001F98                     _eval_poly:
  3706                           	opt stack 25
  3707                           
  3708                           ;incstack = 0
  3709  001F98  C03B  F001         	movff	eval_poly@n,___wmul@multiplier
  3710  001F9C  C03C  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  3711  001FA0  0E00               	movlw	0
  3712  001FA2  6E04               	movwf	___wmul@multiplicand+1,c
  3713  001FA4  0E03               	movlw	3
  3714  001FA6  6E03               	movwf	___wmul@multiplicand,c
  3715  001FA8  ECEB  F011         	call	___wmul	;wreg free
  3716  001FAC  C039  F03D         	movff	eval_poly@d,??_eval_poly
  3717  001FB0  C03A  F03E         	movff	eval_poly@d+1,??_eval_poly+1
  3718  001FB4  5001               	movf	?___wmul,w,c
  3719  001FB6  263D               	addwf	??_eval_poly,f,c
  3720  001FB8  5002               	movf	?___wmul+1,w,c
  3721  001FBA  223E               	addwfc	??_eval_poly+1,f,c
  3722  001FBC  C03D  FFF6         	movff	??_eval_poly,tblptrl
  3723  001FC0  C03E  FFF7         	movff	??_eval_poly+1,tblptrh
  3724  001FC4                     	if	0	;tblptru may be non-zero
  3725  001FC4                     	endif
  3726  001FC4                     	if	0	;tblptru may be non-zero
  3727  001FC4                     	endif
  3728  001FC4  0009               	tblrd		*+
  3729  001FC6  CFF5 F03F          	movff	tablat,eval_poly@res
  3730  001FCA  0009               	tblrd		*+
  3731  001FCC  CFF5 F040          	movff	tablat,eval_poly@res+1
  3732  001FD0  000A               	tblrd		*-
  3733  001FD2  CFF5 F041          	movff	tablat,eval_poly@res+2
  3734  001FD6  D03E               	goto	l891
  3735  001FD8  C03F  F02A         	movff	eval_poly@res,___ftmul@f2
  3736  001FDC  C040  F02B         	movff	eval_poly@res+1,___ftmul@f2+1
  3737  001FE0  C041  F02C         	movff	eval_poly@res+2,___ftmul@f2+2
  3738  001FE4  C036  F027         	movff	eval_poly@x,___ftmul@f1
  3739  001FE8  C037  F028         	movff	eval_poly@x+1,___ftmul@f1+1
  3740  001FEC  C038  F029         	movff	eval_poly@x+2,___ftmul@f1+2
  3741  001FF0  ECDF  F00E         	call	___ftmul	;wreg free
  3742  001FF4  C027  F00C         	movff	?___ftmul,___ftadd@f1
  3743  001FF8  C028  F00D         	movff	?___ftmul+1,___ftadd@f1+1
  3744  001FFC  C029  F00E         	movff	?___ftmul+2,___ftadd@f1+2
  3745  002000  0E00               	movlw	0
  3746  002002  6E04               	movwf	___wmul@multiplicand+1,c
  3747  002004  0E03               	movlw	3
  3748  002006  6E03               	movwf	___wmul@multiplicand,c
  3749  002008  063B               	decf	eval_poly@n,f,c
  3750  00200A  A0D8               	btfss	status,0,c
  3751  00200C  063C               	decf	eval_poly@n+1,f,c
  3752  00200E  C03B  F001         	movff	eval_poly@n,___wmul@multiplier
  3753  002012  C03C  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  3754  002016  ECEB  F011         	call	___wmul	;wreg free
  3755  00201A  C039  F03D         	movff	eval_poly@d,??_eval_poly
  3756  00201E  C03A  F03E         	movff	eval_poly@d+1,??_eval_poly+1
  3757  002022  5001               	movf	?___wmul,w,c
  3758  002024  263D               	addwf	??_eval_poly,f,c
  3759  002026  5002               	movf	?___wmul+1,w,c
  3760  002028  223E               	addwfc	??_eval_poly+1,f,c
  3761  00202A  C03D  FFF6         	movff	??_eval_poly,tblptrl
  3762  00202E  C03E  FFF7         	movff	??_eval_poly+1,tblptrh
  3763  002032                     	if	0	;tblptru may be non-zero
  3764  002032                     	endif
  3765  002032                     	if	0	;tblptru may be non-zero
  3766  002032                     	endif
  3767  002032  0009               	tblrd		*+
  3768  002034  CFF5 F00F          	movff	tablat,___ftadd@f2
  3769  002038  0009               	tblrd		*+
  3770  00203A  CFF5 F010          	movff	tablat,___ftadd@f2+1
  3771  00203E  000A               	tblrd		*-
  3772  002040  CFF5 F011          	movff	tablat,___ftadd@f2+2
  3773  002044  EC3E  F00C         	call	___ftadd	;wreg free
  3774  002048  C00C  F03F         	movff	?___ftadd,eval_poly@res
  3775  00204C  C00D  F040         	movff	?___ftadd+1,eval_poly@res+1
  3776  002050  C00E  F041         	movff	?___ftadd+2,eval_poly@res+2
  3777  002054                     l891:
  3778  002054  503B               	movf	eval_poly@n,w,c
  3779  002056  103C               	iorwf	eval_poly@n+1,w,c
  3780  002058  A4D8               	btfss	status,2,c
  3781  00205A  D7BE               	goto	l892
  3782  00205C  C03F  F036         	movff	eval_poly@res,?_eval_poly
  3783  002060  C040  F037         	movff	eval_poly@res+1,?_eval_poly+1
  3784  002064  C041  F038         	movff	eval_poly@res+2,?_eval_poly+2
  3785  002068  0012               	return		;funcret
  3786  00206A                     __end_of_eval_poly:
  3787                           	opt stack 0
  3788                           tblptru	equ	0xFF8
  3789                           tblptrh	equ	0xFF7
  3790                           tblptrl	equ	0xFF6
  3791                           tablat	equ	0xFF5
  3792                           postinc0	equ	0xFEE
  3793                           wreg	equ	0xFE8
  3794                           postdec1	equ	0xFE5
  3795                           fsr1l	equ	0xFE1
  3796                           status	equ	0xFD8
  3797                           
  3798 ;; *************** function ___wmul *****************
  3799 ;; Defined at:
  3800 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3801 ;; Parameters:    Size  Location     Type
  3802 ;;  multiplier      2    0[COMRAM] unsigned int 
  3803 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;  product         2    4[COMRAM] unsigned int 
  3806 ;; Return value:  Size  Location     Type
  3807 ;;                  2    0[COMRAM] unsigned int 
  3808 ;; Registers used:
  3809 ;;		wreg, status,2, status,0, prodl, prodh
  3810 ;; Tracked objects:
  3811 ;;		On entry : 0/0
  3812 ;;		On exit  : 0/0
  3813 ;;		Unchanged: 0/0
  3814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3815 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3816 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3818 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3819 ;;Total ram usage:        6 bytes
  3820 ;; Hardware stack levels used:    1
  3821 ;; This function calls:
  3822 ;;		Nothing
  3823 ;; This function is called by:
  3824 ;;		_eval_poly
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           	psect	text16
  3829  0023D6                     __ptext16:
  3830                           	opt stack 0
  3831  0023D6                     ___wmul:
  3832                           	opt stack 26
  3833                           
  3834                           ;incstack = 0
  3835  0023D6  5001               	movf	___wmul@multiplier,w,c
  3836  0023D8  0203               	mulwf	___wmul@multiplicand,c
  3837  0023DA  CFF3 F005          	movff	prodl,___wmul@product
  3838  0023DE  CFF4 F006          	movff	prodh,___wmul@product+1
  3839  0023E2  5001               	movf	___wmul@multiplier,w,c
  3840  0023E4  0204               	mulwf	___wmul@multiplicand+1,c
  3841  0023E6  50F3               	movf	prodl,w,c
  3842  0023E8  2606               	addwf	___wmul@product+1,f,c
  3843  0023EA  5002               	movf	___wmul@multiplier+1,w,c
  3844  0023EC  0203               	mulwf	___wmul@multiplicand,c
  3845  0023EE  50F3               	movf	prodl,w,c
  3846  0023F0  2606               	addwf	___wmul@product+1,f,c
  3847  0023F2  C005  F001         	movff	___wmul@product,?___wmul
  3848  0023F6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3849  0023FA  0012               	return	
  3850  0023FC                     __end_of___wmul:
  3851                           	opt stack 0
  3852                           tblptru	equ	0xFF8
  3853                           tblptrh	equ	0xFF7
  3854                           tblptrl	equ	0xFF6
  3855                           tablat	equ	0xFF5
  3856                           prodh	equ	0xFF4
  3857                           prodl	equ	0xFF3
  3858                           postinc0	equ	0xFEE
  3859                           wreg	equ	0xFE8
  3860                           postdec1	equ	0xFE5
  3861                           fsr1l	equ	0xFE1
  3862                           status	equ	0xFD8
  3863                           
  3864 ;; *************** function ___ftmul *****************
  3865 ;; Defined at:
  3866 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;  f1              3   38[COMRAM] float 
  3869 ;;  f2              3   41[COMRAM] float 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  f3_as_produc    3   48[COMRAM] unsigned um
  3872 ;;  sign            1   52[COMRAM] unsigned char 
  3873 ;;  cntr            1   51[COMRAM] unsigned char 
  3874 ;;  exp             1   47[COMRAM] unsigned char 
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  3   38[COMRAM] float 
  3877 ;; Registers used:
  3878 ;;		wreg, status,2, status,0, cstack
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3884 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3885 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3886 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3887 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3888 ;;Total ram usage:       15 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:    1
  3891 ;; This function calls:
  3892 ;;		___ftpack
  3893 ;; This function is called by:
  3894 ;;		_delayMs
  3895 ;;		_getHandleAngle
  3896 ;;		_main
  3897 ;;		_atan
  3898 ;;		_eval_poly
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text17
  3903  001DBE                     __ptext17:
  3904                           	opt stack 0
  3905  001DBE                     ___ftmul:
  3906                           	opt stack 27
  3907                           
  3908                           ;incstack = 0
  3909  001DBE  C029  F02D         	movff	___ftmul@f1+2,??___ftmul
  3910  001DC2  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  3911  001DC4  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  3912  001DC6  3428               	rlcf	___ftmul@f1+1,w,c
  3913  001DC8  362D               	rlcf	??___ftmul& (0+255),f,c
  3914  001DCA  E301               	bnc	u1661
  3915  001DCC  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  3916  001DCE                     u1661:
  3917  001DCE  502D               	movf	??___ftmul,w,c
  3918  001DD0  6E30               	movwf	___ftmul@exp,c
  3919  001DD2  5030               	movf	___ftmul@exp,w,c
  3920  001DD4  A4D8               	btfss	status,2,c
  3921  001DD6  D007               	goto	l600
  3922  001DD8  0E00               	movlw	0
  3923  001DDA  6E27               	movwf	?___ftmul,c
  3924  001DDC  0E00               	movlw	0
  3925  001DDE  6E28               	movwf	?___ftmul+1,c
  3926  001DE0  0E00               	movlw	0
  3927  001DE2  6E29               	movwf	?___ftmul+2,c
  3928  001DE4  0012               	return	
  3929  001DE6                     l600:
  3930  001DE6  C02C  F02D         	movff	___ftmul@f2+2,??___ftmul
  3931  001DEA  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  3932  001DEC  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  3933  001DEE  342B               	rlcf	___ftmul@f2+1,w,c
  3934  001DF0  362D               	rlcf	??___ftmul& (0+255),f,c
  3935  001DF2  E301               	bnc	u1681
  3936  001DF4  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  3937  001DF6                     u1681:
  3938  001DF6  502D               	movf	??___ftmul,w,c
  3939  001DF8  6E35               	movwf	___ftmul@sign,c
  3940  001DFA  5035               	movf	___ftmul@sign,w,c
  3941  001DFC  A4D8               	btfss	status,2,c
  3942  001DFE  D007               	goto	l602
  3943  001E00  0E00               	movlw	0
  3944  001E02  6E27               	movwf	?___ftmul,c
  3945  001E04  0E00               	movlw	0
  3946  001E06  6E28               	movwf	?___ftmul+1,c
  3947  001E08  0E00               	movlw	0
  3948  001E0A  6E29               	movwf	?___ftmul+2,c
  3949  001E0C  0012               	return	
  3950  001E0E                     l602:
  3951  001E0E  5035               	movf	___ftmul@sign,w,c
  3952  001E10  0F7B               	addlw	123
  3953  001E12  2630               	addwf	___ftmul@exp,f,c
  3954  001E14  C029  F035         	movff	___ftmul@f1+2,___ftmul@sign
  3955  001E18  502C               	movf	___ftmul@f2+2,w,c
  3956  001E1A  1A35               	xorwf	___ftmul@sign,f,c
  3957  001E1C  0E80               	movlw	128
  3958  001E1E  1635               	andwf	___ftmul@sign,f,c
  3959  001E20  8E28               	bsf	___ftmul@f1+1,7,c
  3960  001E22  8E2B               	bsf	___ftmul@f2+1,7,c
  3961  001E24  0EFF               	movlw	255
  3962  001E26  162A               	andwf	___ftmul@f2,f,c
  3963  001E28  0EFF               	movlw	255
  3964  001E2A  162B               	andwf	___ftmul@f2+1,f,c
  3965  001E2C  0E00               	movlw	0
  3966  001E2E  162C               	andwf	___ftmul@f2+2,f,c
  3967  001E30  0E00               	movlw	0
  3968  001E32  6E31               	movwf	___ftmul@f3_as_product,c
  3969  001E34  0E00               	movlw	0
  3970  001E36  6E32               	movwf	___ftmul@f3_as_product+1,c
  3971  001E38  0E00               	movlw	0
  3972  001E3A  6E33               	movwf	___ftmul@f3_as_product+2,c
  3973  001E3C  0E07               	movlw	7
  3974  001E3E  6E34               	movwf	___ftmul@cntr,c
  3975  001E40  A027               	btfss	___ftmul@f1,0,c
  3976  001E42  D006               	goto	l604
  3977  001E44  502A               	movf	___ftmul@f2,w,c
  3978  001E46  2631               	addwf	___ftmul@f3_as_product,f,c
  3979  001E48  502B               	movf	___ftmul@f2+1,w,c
  3980  001E4A  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  3981  001E4C  502C               	movf	___ftmul@f2+2,w,c
  3982  001E4E  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  3983  001E50                     l604:
  3984  001E50  90D8               	bcf	status,0,c
  3985  001E52  3229               	rrcf	___ftmul@f1+2,f,c
  3986  001E54  3228               	rrcf	___ftmul@f1+1,f,c
  3987  001E56  3227               	rrcf	___ftmul@f1,f,c
  3988  001E58  90D8               	bcf	status,0,c
  3989  001E5A  362A               	rlcf	___ftmul@f2,f,c
  3990  001E5C  362B               	rlcf	___ftmul@f2+1,f,c
  3991  001E5E  362C               	rlcf	___ftmul@f2+2,f,c
  3992  001E60  2E34               	decfsz	___ftmul@cntr,f,c
  3993  001E62  D7EE               	goto	l603
  3994  001E64  0E09               	movlw	9
  3995  001E66  6E34               	movwf	___ftmul@cntr,c
  3996  001E68  A027               	btfss	___ftmul@f1,0,c
  3997  001E6A  D006               	goto	l607
  3998  001E6C  502A               	movf	___ftmul@f2,w,c
  3999  001E6E  2631               	addwf	___ftmul@f3_as_product,f,c
  4000  001E70  502B               	movf	___ftmul@f2+1,w,c
  4001  001E72  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  4002  001E74  502C               	movf	___ftmul@f2+2,w,c
  4003  001E76  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  4004  001E78                     l607:
  4005  001E78  90D8               	bcf	status,0,c
  4006  001E7A  3229               	rrcf	___ftmul@f1+2,f,c
  4007  001E7C  3228               	rrcf	___ftmul@f1+1,f,c
  4008  001E7E  3227               	rrcf	___ftmul@f1,f,c
  4009  001E80  90D8               	bcf	status,0,c
  4010  001E82  3233               	rrcf	___ftmul@f3_as_product+2,f,c
  4011  001E84  3232               	rrcf	___ftmul@f3_as_product+1,f,c
  4012  001E86  3231               	rrcf	___ftmul@f3_as_product,f,c
  4013  001E88  2E34               	decfsz	___ftmul@cntr,f,c
  4014  001E8A  D7EE               	goto	l606
  4015  001E8C  C031  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4016  001E90  C032  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4017  001E94  C033  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4018  001E98  C030  F004         	movff	___ftmul@exp,___ftpack@exp
  4019  001E9C  C035  F005         	movff	___ftmul@sign,___ftpack@sign
  4020  001EA0  EC35  F010         	call	___ftpack	;wreg free
  4021  001EA4  C001  F027         	movff	?___ftpack,?___ftmul
  4022  001EA8  C002  F028         	movff	?___ftpack+1,?___ftmul+1
  4023  001EAC  C003  F029         	movff	?___ftpack+2,?___ftmul+2
  4024  001EB0  0012               	return	
  4025  001EB2                     __end_of___ftmul:
  4026                           	opt stack 0
  4027                           tblptru	equ	0xFF8
  4028                           tblptrh	equ	0xFF7
  4029                           tblptrl	equ	0xFF6
  4030                           tablat	equ	0xFF5
  4031                           prodh	equ	0xFF4
  4032                           prodl	equ	0xFF3
  4033                           postinc0	equ	0xFEE
  4034                           wreg	equ	0xFE8
  4035                           postdec1	equ	0xFE5
  4036                           fsr1l	equ	0xFE1
  4037                           status	equ	0xFD8
  4038                           
  4039 ;; *************** function ___ftge *****************
  4040 ;; Defined at:
  4041 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;  ff1             3   14[COMRAM] float 
  4044 ;;  ff2             3   17[COMRAM] float 
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;		None               void
  4049 ;; Registers used:
  4050 ;;		wreg, status,2, status,0
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4056 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4058 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4059 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4060 ;;Total ram usage:        9 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; This function calls:
  4063 ;;		Nothing
  4064 ;; This function is called by:
  4065 ;;		_getHandleAngle
  4066 ;;		_main
  4067 ;;		_atan2
  4068 ;;		_atan
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           	psect	text18
  4073  0021AC                     __ptext18:
  4074                           	opt stack 0
  4075  0021AC                     ___ftge:
  4076                           	opt stack 27
  4077                           
  4078                           ;incstack = 0
  4079  0021AC  AE11               	btfss	___ftge@ff1+2,7,c
  4080  0021AE  D016               	goto	l593
  4081  0021B0  C00F  F015         	movff	___ftge@ff1,??___ftge
  4082  0021B4  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  4083  0021B8  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  4084  0021BC  1E15               	comf	??___ftge,f,c
  4085  0021BE  1E16               	comf	??___ftge+1,f,c
  4086  0021C0  1E17               	comf	??___ftge+2,f,c
  4087  0021C2  2A15               	incf	??___ftge,f,c
  4088  0021C4  0E00               	movlw	0
  4089  0021C6  2216               	addwfc	??___ftge+1,f,c
  4090  0021C8  2217               	addwfc	??___ftge+2,f,c
  4091  0021CA  0E00               	movlw	0
  4092  0021CC  2415               	addwf	??___ftge,w,c
  4093  0021CE  6E0F               	movwf	___ftge@ff1,c
  4094  0021D0  0E00               	movlw	0
  4095  0021D2  2016               	addwfc	??___ftge+1,w,c
  4096  0021D4  6E10               	movwf	___ftge@ff1+1,c
  4097  0021D6  0E80               	movlw	128
  4098  0021D8  2017               	addwfc	??___ftge+2,w,c
  4099  0021DA  6E11               	movwf	___ftge@ff1+2,c
  4100  0021DC                     l593:
  4101  0021DC  AE14               	btfss	___ftge@ff2+2,7,c
  4102  0021DE  D016               	goto	l594
  4103  0021E0  C012  F015         	movff	___ftge@ff2,??___ftge
  4104  0021E4  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  4105  0021E8  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  4106  0021EC  1E15               	comf	??___ftge,f,c
  4107  0021EE  1E16               	comf	??___ftge+1,f,c
  4108  0021F0  1E17               	comf	??___ftge+2,f,c
  4109  0021F2  2A15               	incf	??___ftge,f,c
  4110  0021F4  0E00               	movlw	0
  4111  0021F6  2216               	addwfc	??___ftge+1,f,c
  4112  0021F8  2217               	addwfc	??___ftge+2,f,c
  4113  0021FA  0E00               	movlw	0
  4114  0021FC  2415               	addwf	??___ftge,w,c
  4115  0021FE  6E12               	movwf	___ftge@ff2,c
  4116  002200  0E00               	movlw	0
  4117  002202  2016               	addwfc	??___ftge+1,w,c
  4118  002204  6E13               	movwf	___ftge@ff2+1,c
  4119  002206  0E80               	movlw	128
  4120  002208  2017               	addwfc	??___ftge+2,w,c
  4121  00220A  6E14               	movwf	___ftge@ff2+2,c
  4122  00220C                     l594:
  4123  00220C  0E00               	movlw	0
  4124  00220E  1A0F               	xorwf	___ftge@ff1,f,c
  4125  002210  0E00               	movlw	0
  4126  002212  1A10               	xorwf	___ftge@ff1+1,f,c
  4127  002214  0E80               	movlw	128
  4128  002216  1A11               	xorwf	___ftge@ff1+2,f,c
  4129  002218  0E00               	movlw	0
  4130  00221A  1A12               	xorwf	___ftge@ff2,f,c
  4131  00221C  0E00               	movlw	0
  4132  00221E  1A13               	xorwf	___ftge@ff2+1,f,c
  4133  002220  0E80               	movlw	128
  4134  002222  1A14               	xorwf	___ftge@ff2+2,f,c
  4135  002224  5012               	movf	___ftge@ff2,w,c
  4136  002226  5C0F               	subwf	___ftge@ff1,w,c
  4137  002228  5013               	movf	___ftge@ff2+1,w,c
  4138  00222A  5810               	subwfb	___ftge@ff1+1,w,c
  4139  00222C  5014               	movf	___ftge@ff2+2,w,c
  4140  00222E  5811               	subwfb	___ftge@ff1+2,w,c
  4141  002230  B0D8               	btfsc	status,0,c
  4142  002232  D002               	goto	l1722
  4143  002234  90D8               	bcf	status,0,c
  4144  002236  0012               	return	
  4145  002238                     l1722:
  4146  002238  80D8               	bsf	status,0,c
  4147  00223A  0012               	return	
  4148  00223C                     __end_of___ftge:
  4149                           	opt stack 0
  4150                           tblptru	equ	0xFF8
  4151                           tblptrh	equ	0xFF7
  4152                           tblptrl	equ	0xFF6
  4153                           tablat	equ	0xFF5
  4154                           prodh	equ	0xFF4
  4155                           prodl	equ	0xFF3
  4156                           postinc0	equ	0xFEE
  4157                           wreg	equ	0xFE8
  4158                           postdec1	equ	0xFE5
  4159                           fsr1l	equ	0xFE1
  4160                           status	equ	0xFD8
  4161                           
  4162 ;; *************** function ___ftdiv *****************
  4163 ;; Defined at:
  4164 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  f1              3   23[COMRAM] float 
  4167 ;;  f2              3   26[COMRAM] float 
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;  f3              3   33[COMRAM] float 
  4170 ;;  sign            1   37[COMRAM] unsigned char 
  4171 ;;  exp             1   36[COMRAM] unsigned char 
  4172 ;;  cntr            1   32[COMRAM] unsigned char 
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  3   23[COMRAM] float 
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0, cstack
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4182 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4183 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4184 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4185 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4186 ;;Total ram usage:       15 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; Hardware stack levels required when called:    1
  4189 ;; This function calls:
  4190 ;;		___ftpack
  4191 ;; This function is called by:
  4192 ;;		_getHandleAngle
  4193 ;;		_atan2
  4194 ;;		_atan
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           	psect	text19
  4199  001EB2                     __ptext19:
  4200                           	opt stack 0
  4201  001EB2                     ___ftdiv:
  4202                           	opt stack 26
  4203                           
  4204                           ;incstack = 0
  4205  001EB2  C01A  F01E         	movff	___ftdiv@f1+2,??___ftdiv
  4206  001EB6  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  4207  001EB8  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  4208  001EBA  3419               	rlcf	___ftdiv@f1+1,w,c
  4209  001EBC  361E               	rlcf	??___ftdiv& (0+255),f,c
  4210  001EBE  E301               	bnc	u1731
  4211  001EC0  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  4212  001EC2                     u1731:
  4213  001EC2  501E               	movf	??___ftdiv,w,c
  4214  001EC4  6E25               	movwf	___ftdiv@exp,c
  4215  001EC6  5025               	movf	___ftdiv@exp,w,c
  4216  001EC8  A4D8               	btfss	status,2,c
  4217  001ECA  D007               	goto	l585
  4218  001ECC  0E00               	movlw	0
  4219  001ECE  6E18               	movwf	?___ftdiv,c
  4220  001ED0  0E00               	movlw	0
  4221  001ED2  6E19               	movwf	?___ftdiv+1,c
  4222  001ED4  0E00               	movlw	0
  4223  001ED6  6E1A               	movwf	?___ftdiv+2,c
  4224  001ED8  0012               	return	
  4225  001EDA                     l585:
  4226  001EDA  C01D  F01E         	movff	___ftdiv@f2+2,??___ftdiv
  4227  001EDE  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  4228  001EE0  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  4229  001EE2  341C               	rlcf	___ftdiv@f2+1,w,c
  4230  001EE4  361E               	rlcf	??___ftdiv& (0+255),f,c
  4231  001EE6  E301               	bnc	u1751
  4232  001EE8  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  4233  001EEA                     u1751:
  4234  001EEA  501E               	movf	??___ftdiv,w,c
  4235  001EEC  6E26               	movwf	___ftdiv@sign,c
  4236  001EEE  5026               	movf	___ftdiv@sign,w,c
  4237  001EF0  A4D8               	btfss	status,2,c
  4238  001EF2  D007               	goto	l587
  4239  001EF4  0E00               	movlw	0
  4240  001EF6  6E18               	movwf	?___ftdiv,c
  4241  001EF8  0E00               	movlw	0
  4242  001EFA  6E19               	movwf	?___ftdiv+1,c
  4243  001EFC  0E00               	movlw	0
  4244  001EFE  6E1A               	movwf	?___ftdiv+2,c
  4245  001F00  0012               	return	
  4246  001F02                     l587:
  4247  001F02  0E00               	movlw	0
  4248  001F04  6E22               	movwf	___ftdiv@f3,c
  4249  001F06  0E00               	movlw	0
  4250  001F08  6E23               	movwf	___ftdiv@f3+1,c
  4251  001F0A  0E00               	movlw	0
  4252  001F0C  6E24               	movwf	___ftdiv@f3+2,c
  4253  001F0E  5026               	movf	___ftdiv@sign,w,c
  4254  001F10  0F89               	addlw	137
  4255  001F12  5E25               	subwf	___ftdiv@exp,f,c
  4256  001F14  C01A  F026         	movff	___ftdiv@f1+2,___ftdiv@sign
  4257  001F18  501D               	movf	___ftdiv@f2+2,w,c
  4258  001F1A  1A26               	xorwf	___ftdiv@sign,f,c
  4259  001F1C  0E80               	movlw	128
  4260  001F1E  1626               	andwf	___ftdiv@sign,f,c
  4261  001F20  8E19               	bsf	___ftdiv@f1+1,7,c
  4262  001F22  0EFF               	movlw	255
  4263  001F24  1618               	andwf	___ftdiv@f1,f,c
  4264  001F26  0EFF               	movlw	255
  4265  001F28  1619               	andwf	___ftdiv@f1+1,f,c
  4266  001F2A  0E00               	movlw	0
  4267  001F2C  161A               	andwf	___ftdiv@f1+2,f,c
  4268  001F2E  8E1C               	bsf	___ftdiv@f2+1,7,c
  4269  001F30  0EFF               	movlw	255
  4270  001F32  161B               	andwf	___ftdiv@f2,f,c
  4271  001F34  0EFF               	movlw	255
  4272  001F36  161C               	andwf	___ftdiv@f2+1,f,c
  4273  001F38  0E00               	movlw	0
  4274  001F3A  161D               	andwf	___ftdiv@f2+2,f,c
  4275  001F3C  0E18               	movlw	24
  4276  001F3E  6E21               	movwf	___ftdiv@cntr,c
  4277  001F40  90D8               	bcf	status,0,c
  4278  001F42  3622               	rlcf	___ftdiv@f3,f,c
  4279  001F44  3623               	rlcf	___ftdiv@f3+1,f,c
  4280  001F46  3624               	rlcf	___ftdiv@f3+2,f,c
  4281  001F48  501B               	movf	___ftdiv@f2,w,c
  4282  001F4A  5C18               	subwf	___ftdiv@f1,w,c
  4283  001F4C  501C               	movf	___ftdiv@f2+1,w,c
  4284  001F4E  5819               	subwfb	___ftdiv@f1+1,w,c
  4285  001F50  501D               	movf	___ftdiv@f2+2,w,c
  4286  001F52  581A               	subwfb	___ftdiv@f1+2,w,c
  4287  001F54  A0D8               	btfss	status,0,c
  4288  001F56  D007               	goto	l589
  4289  001F58  501B               	movf	___ftdiv@f2,w,c
  4290  001F5A  5E18               	subwf	___ftdiv@f1,f,c
  4291  001F5C  501C               	movf	___ftdiv@f2+1,w,c
  4292  001F5E  5A19               	subwfb	___ftdiv@f1+1,f,c
  4293  001F60  501D               	movf	___ftdiv@f2+2,w,c
  4294  001F62  5A1A               	subwfb	___ftdiv@f1+2,f,c
  4295  001F64  8022               	bsf	___ftdiv@f3,0,c
  4296  001F66                     l589:
  4297  001F66  90D8               	bcf	status,0,c
  4298  001F68  3618               	rlcf	___ftdiv@f1,f,c
  4299  001F6A  3619               	rlcf	___ftdiv@f1+1,f,c
  4300  001F6C  361A               	rlcf	___ftdiv@f1+2,f,c
  4301  001F6E  2E21               	decfsz	___ftdiv@cntr,f,c
  4302  001F70  D7E7               	goto	l588
  4303  001F72  C022  F001         	movff	___ftdiv@f3,___ftpack@arg
  4304  001F76  C023  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4305  001F7A  C024  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4306  001F7E  C025  F004         	movff	___ftdiv@exp,___ftpack@exp
  4307  001F82  C026  F005         	movff	___ftdiv@sign,___ftpack@sign
  4308  001F86  EC35  F010         	call	___ftpack	;wreg free
  4309  001F8A  C001  F018         	movff	?___ftpack,?___ftdiv
  4310  001F8E  C002  F019         	movff	?___ftpack+1,?___ftdiv+1
  4311  001F92  C003  F01A         	movff	?___ftpack+2,?___ftdiv+2
  4312  001F96  0012               	return	
  4313  001F98                     __end_of___ftdiv:
  4314                           	opt stack 0
  4315                           tblptru	equ	0xFF8
  4316                           tblptrh	equ	0xFF7
  4317                           tblptrl	equ	0xFF6
  4318                           tablat	equ	0xFF5
  4319                           prodh	equ	0xFF4
  4320                           prodl	equ	0xFF3
  4321                           postinc0	equ	0xFEE
  4322                           wreg	equ	0xFE8
  4323                           postdec1	equ	0xFE5
  4324                           fsr1l	equ	0xFE1
  4325                           status	equ	0xFD8
  4326                           
  4327 ;; *************** function ___ftsub *****************
  4328 ;; Defined at:
  4329 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  f1              3   23[COMRAM] float 
  4332 ;;  f2              3   26[COMRAM] float 
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;		None
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  3   23[COMRAM] float 
  4337 ;; Registers used:
  4338 ;;		wreg, status,2, status,0, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4344 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4347 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4348 ;;Total ram usage:        6 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    2
  4351 ;; This function calls:
  4352 ;;		___ftadd
  4353 ;; This function is called by:
  4354 ;;		_atan2
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text20
  4359  00232E                     __ptext20:
  4360                           	opt stack 0
  4361  00232E                     ___ftsub:
  4362                           	opt stack 26
  4363                           
  4364                           ;incstack = 0
  4365  00232E  501B               	movf	___ftsub@f2,w,c
  4366  002330  101C               	iorwf	___ftsub@f2+1,w,c
  4367  002332  101D               	iorwf	___ftsub@f2+2,w,c
  4368  002334  B4D8               	btfsc	status,2,c
  4369  002336  D006               	goto	l617
  4370  002338  0E00               	movlw	0
  4371  00233A  1A1B               	xorwf	___ftsub@f2,f,c
  4372  00233C  0E00               	movlw	0
  4373  00233E  1A1C               	xorwf	___ftsub@f2+1,f,c
  4374  002340  0E80               	movlw	128
  4375  002342  1A1D               	xorwf	___ftsub@f2+2,f,c
  4376  002344                     l617:
  4377  002344  C018  F00C         	movff	___ftsub@f1,___ftadd@f1
  4378  002348  C019  F00D         	movff	___ftsub@f1+1,___ftadd@f1+1
  4379  00234C  C01A  F00E         	movff	___ftsub@f1+2,___ftadd@f1+2
  4380  002350  C01B  F00F         	movff	___ftsub@f2,___ftadd@f2
  4381  002354  C01C  F010         	movff	___ftsub@f2+1,___ftadd@f2+1
  4382  002358  C01D  F011         	movff	___ftsub@f2+2,___ftadd@f2+2
  4383  00235C  EC3E  F00C         	call	___ftadd	;wreg free
  4384  002360  C00C  F018         	movff	?___ftadd,?___ftsub
  4385  002364  C00D  F019         	movff	?___ftadd+1,?___ftsub+1
  4386  002368  C00E  F01A         	movff	?___ftadd+2,?___ftsub+2
  4387  00236C  0012               	return	
  4388  00236E                     __end_of___ftsub:
  4389                           	opt stack 0
  4390                           tblptru	equ	0xFF8
  4391                           tblptrh	equ	0xFF7
  4392                           tblptrl	equ	0xFF6
  4393                           tablat	equ	0xFF5
  4394                           prodh	equ	0xFF4
  4395                           prodl	equ	0xFF3
  4396                           postinc0	equ	0xFEE
  4397                           wreg	equ	0xFE8
  4398                           postdec1	equ	0xFE5
  4399                           fsr1l	equ	0xFE1
  4400                           status	equ	0xFD8
  4401                           
  4402 ;; *************** function ___ftadd *****************
  4403 ;; Defined at:
  4404 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;  f1              3   11[COMRAM] float 
  4407 ;;  f2              3   14[COMRAM] float 
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;  exp1            1   22[COMRAM] unsigned char 
  4410 ;;  exp2            1   21[COMRAM] unsigned char 
  4411 ;;  sign            1   20[COMRAM] unsigned char 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  3   11[COMRAM] float 
  4414 ;; Registers used:
  4415 ;;		wreg, status,2, status,0, cstack
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4421 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4422 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4423 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4424 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4425 ;;Total ram usage:       12 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    1
  4428 ;; This function calls:
  4429 ;;		___ftpack
  4430 ;; This function is called by:
  4431 ;;		_getHandleAngle
  4432 ;;		_main
  4433 ;;		_atan2
  4434 ;;		___ftsub
  4435 ;;		_atan
  4436 ;;		_eval_poly
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text21
  4441  00187C                     __ptext21:
  4442                           	opt stack 0
  4443  00187C                     ___ftadd:
  4444                           	opt stack 25
  4445                           
  4446                           ;incstack = 0
  4447  00187C  C00E  F012         	movff	___ftadd@f1+2,??___ftadd
  4448  001880  6A13               	clrf	(??___ftadd+1)& (0+255),c
  4449  001882  6A14               	clrf	(??___ftadd+2)& (0+255),c
  4450  001884  340D               	rlcf	___ftadd@f1+1,w,c
  4451  001886  3612               	rlcf	??___ftadd& (0+255),f,c
  4452  001888  E301               	bnc	u1451
  4453  00188A  8013               	bsf	(??___ftadd+1)& (0+255),0,c
  4454  00188C                     u1451:
  4455  00188C  5012               	movf	??___ftadd,w,c
  4456  00188E  6E17               	movwf	___ftadd@exp1,c
  4457  001890  C011  F012         	movff	___ftadd@f2+2,??___ftadd
  4458  001894  6A13               	clrf	(??___ftadd+1)& (0+255),c
  4459  001896  6A14               	clrf	(??___ftadd+2)& (0+255),c
  4460  001898  3410               	rlcf	___ftadd@f2+1,w,c
  4461  00189A  3612               	rlcf	??___ftadd& (0+255),f,c
  4462  00189C  E301               	bnc	u1461
  4463  00189E  8013               	bsf	(??___ftadd+1)& (0+255),0,c
  4464  0018A0                     u1461:
  4465  0018A0  5012               	movf	??___ftadd,w,c
  4466  0018A2  6E16               	movwf	___ftadd@exp2,c
  4467  0018A4  5017               	movf	___ftadd@exp1,w,c
  4468  0018A6  B4D8               	btfsc	status,2,c
  4469  0018A8  D00B               	goto	u1490
  4470  0018AA  5016               	movf	___ftadd@exp2,w,c
  4471  0018AC  5C17               	subwf	___ftadd@exp1,w,c
  4472  0018AE  B0D8               	btfsc	status,0,c
  4473  0018B0  D00E               	goto	l552
  4474  0018B2  5017               	movf	___ftadd@exp1,w,c
  4475  0018B4  0800               	sublw	0
  4476  0018B6  2416               	addwf	___ftadd@exp2,w,c
  4477  0018B8  6E12               	movwf	??___ftadd& (0+255),c
  4478  0018BA  0E18               	movlw	24
  4479  0018BC  6412               	cpfsgt	??___ftadd,c
  4480  0018BE  D007               	goto	l552
  4481  0018C0                     u1490:
  4482  0018C0  C00F  F00C         	movff	___ftadd@f2,?___ftadd
  4483  0018C4  C010  F00D         	movff	___ftadd@f2+1,?___ftadd+1
  4484  0018C8  C011  F00E         	movff	___ftadd@f2+2,?___ftadd+2
  4485  0018CC  0012               	return	
  4486  0018CE                     l552:
  4487  0018CE  5016               	movf	___ftadd@exp2,w,c
  4488  0018D0  B4D8               	btfsc	status,2,c
  4489  0018D2  D00B               	goto	u1520
  4490  0018D4  5017               	movf	___ftadd@exp1,w,c
  4491  0018D6  5C16               	subwf	___ftadd@exp2,w,c
  4492  0018D8  B0D8               	btfsc	status,0,c
  4493  0018DA  D00E               	goto	l556
  4494  0018DC  5016               	movf	___ftadd@exp2,w,c
  4495  0018DE  0800               	sublw	0
  4496  0018E0  2417               	addwf	___ftadd@exp1,w,c
  4497  0018E2  6E12               	movwf	??___ftadd& (0+255),c
  4498  0018E4  0E18               	movlw	24
  4499  0018E6  6412               	cpfsgt	??___ftadd,c
  4500  0018E8  D007               	goto	l556
  4501  0018EA                     u1520:
  4502  0018EA  C00C  F00C         	movff	___ftadd@f1,?___ftadd
  4503  0018EE  C00D  F00D         	movff	___ftadd@f1+1,?___ftadd+1
  4504  0018F2  C00E  F00E         	movff	___ftadd@f1+2,?___ftadd+2
  4505  0018F6  0012               	return	
  4506  0018F8                     l556:
  4507  0018F8  0E06               	movlw	6
  4508  0018FA  6E15               	movwf	___ftadd@sign,c
  4509  0018FC  BE0E               	btfsc	___ftadd@f1+2,7,c
  4510  0018FE  8E15               	bsf	___ftadd@sign,7,c
  4511  001900  BE11               	btfsc	___ftadd@f2+2,7,c
  4512  001902  8C15               	bsf	___ftadd@sign,6,c
  4513  001904  8E0D               	bsf	___ftadd@f1+1,7,c
  4514  001906  0EFF               	movlw	255
  4515  001908  160C               	andwf	___ftadd@f1,f,c
  4516  00190A  0EFF               	movlw	255
  4517  00190C  160D               	andwf	___ftadd@f1+1,f,c
  4518  00190E  0E00               	movlw	0
  4519  001910  160E               	andwf	___ftadd@f1+2,f,c
  4520  001912  8E10               	bsf	___ftadd@f2+1,7,c
  4521  001914  0EFF               	movlw	255
  4522  001916  160F               	andwf	___ftadd@f2,f,c
  4523  001918  0EFF               	movlw	255
  4524  00191A  1610               	andwf	___ftadd@f2+1,f,c
  4525  00191C  0E00               	movlw	0
  4526  00191E  1611               	andwf	___ftadd@f2+2,f,c
  4527  001920  5016               	movf	___ftadd@exp2,w,c
  4528  001922  5C17               	subwf	___ftadd@exp1,w,c
  4529  001924  B0D8               	btfsc	status,0,c
  4530  001926  D01B               	goto	l561
  4531  001928                     u1550:
  4532  001928  90D8               	bcf	status,0,c
  4533  00192A  360F               	rlcf	___ftadd@f2,f,c
  4534  00192C  3610               	rlcf	___ftadd@f2+1,f,c
  4535  00192E  3611               	rlcf	___ftadd@f2+2,f,c
  4536  001930  0616               	decf	___ftadd@exp2,f,c
  4537  001932  5017               	movf	___ftadd@exp1,w,c
  4538  001934  1816               	xorwf	___ftadd@exp2,w,c
  4539  001936  B4D8               	btfsc	status,2,c
  4540  001938  D00D               	goto	l566
  4541  00193A  0615               	decf	___ftadd@sign,f,c
  4542  00193C  C015  F012         	movff	___ftadd@sign,??___ftadd
  4543  001940  0E07               	movlw	7
  4544  001942  1612               	andwf	??___ftadd,f,c
  4545  001944  B4D8               	btfsc	status,2,c
  4546  001946  D006               	goto	l566
  4547  001948  D7EF               	goto	u1550
  4548  00194A  90D8               	bcf	status,0,c
  4549  00194C  320E               	rrcf	___ftadd@f1+2,f,c
  4550  00194E  320D               	rrcf	___ftadd@f1+1,f,c
  4551  001950  320C               	rrcf	___ftadd@f1,f,c
  4552  001952  2A17               	incf	___ftadd@exp1,f,c
  4553  001954                     l566:
  4554  001954  5016               	movf	___ftadd@exp2,w,c
  4555  001956  1817               	xorwf	___ftadd@exp1,w,c
  4556  001958  B4D8               	btfsc	status,2,c
  4557  00195A  D01F               	goto	u1620
  4558  00195C  D7F6               	goto	l567
  4559  00195E                     l561:
  4560  00195E  5017               	movf	___ftadd@exp1,w,c
  4561  001960  5C16               	subwf	___ftadd@exp2,w,c
  4562  001962  B0D8               	btfsc	status,0,c
  4563  001964  D01A               	goto	u1620
  4564  001966                     u1590:
  4565  001966  90D8               	bcf	status,0,c
  4566  001968  360C               	rlcf	___ftadd@f1,f,c
  4567  00196A  360D               	rlcf	___ftadd@f1+1,f,c
  4568  00196C  360E               	rlcf	___ftadd@f1+2,f,c
  4569  00196E  0617               	decf	___ftadd@exp1,f,c
  4570  001970  5017               	movf	___ftadd@exp1,w,c
  4571  001972  1816               	xorwf	___ftadd@exp2,w,c
  4572  001974  B4D8               	btfsc	status,2,c
  4573  001976  D00D               	goto	l575
  4574  001978  0615               	decf	___ftadd@sign,f,c
  4575  00197A  C015  F012         	movff	___ftadd@sign,??___ftadd
  4576  00197E  0E07               	movlw	7
  4577  001980  1612               	andwf	??___ftadd,f,c
  4578  001982  B4D8               	btfsc	status,2,c
  4579  001984  D006               	goto	l575
  4580  001986  D7EF               	goto	u1590
  4581  001988  90D8               	bcf	status,0,c
  4582  00198A  3211               	rrcf	___ftadd@f2+2,f,c
  4583  00198C  3210               	rrcf	___ftadd@f2+1,f,c
  4584  00198E  320F               	rrcf	___ftadd@f2,f,c
  4585  001990  2A16               	incf	___ftadd@exp2,f,c
  4586  001992                     l575:
  4587  001992  5016               	movf	___ftadd@exp2,w,c
  4588  001994  1817               	xorwf	___ftadd@exp1,w,c
  4589  001996  A4D8               	btfss	status,2,c
  4590  001998  D7F7               	goto	l576
  4591  00199A                     u1620:
  4592  00199A  AE15               	btfss	___ftadd@sign,7,c
  4593  00199C  D00C               	goto	l578
  4594  00199E  0EFF               	movlw	255
  4595  0019A0  1A0C               	xorwf	___ftadd@f1,f,c
  4596  0019A2  0EFF               	movlw	255
  4597  0019A4  1A0D               	xorwf	___ftadd@f1+1,f,c
  4598  0019A6  0EFF               	movlw	255
  4599  0019A8  1A0E               	xorwf	___ftadd@f1+2,f,c
  4600  0019AA  0E01               	movlw	1
  4601  0019AC  260C               	addwf	___ftadd@f1,f,c
  4602  0019AE  0E00               	movlw	0
  4603  0019B0  220D               	addwfc	___ftadd@f1+1,f,c
  4604  0019B2  0E00               	movlw	0
  4605  0019B4  220E               	addwfc	___ftadd@f1+2,f,c
  4606  0019B6                     l578:
  4607  0019B6  AC15               	btfss	___ftadd@sign,6,c
  4608  0019B8  D00C               	goto	l579
  4609  0019BA  0EFF               	movlw	255
  4610  0019BC  1A0F               	xorwf	___ftadd@f2,f,c
  4611  0019BE  0EFF               	movlw	255
  4612  0019C0  1A10               	xorwf	___ftadd@f2+1,f,c
  4613  0019C2  0EFF               	movlw	255
  4614  0019C4  1A11               	xorwf	___ftadd@f2+2,f,c
  4615  0019C6  0E01               	movlw	1
  4616  0019C8  260F               	addwf	___ftadd@f2,f,c
  4617  0019CA  0E00               	movlw	0
  4618  0019CC  2210               	addwfc	___ftadd@f2+1,f,c
  4619  0019CE  0E00               	movlw	0
  4620  0019D0  2211               	addwfc	___ftadd@f2+2,f,c
  4621  0019D2                     l579:
  4622  0019D2  0E00               	movlw	0
  4623  0019D4  6E15               	movwf	___ftadd@sign,c
  4624  0019D6  500C               	movf	___ftadd@f1,w,c
  4625  0019D8  260F               	addwf	___ftadd@f2,f,c
  4626  0019DA  500D               	movf	___ftadd@f1+1,w,c
  4627  0019DC  2210               	addwfc	___ftadd@f2+1,f,c
  4628  0019DE  500E               	movf	___ftadd@f1+2,w,c
  4629  0019E0  2211               	addwfc	___ftadd@f2+2,f,c
  4630  0019E2  AE11               	btfss	___ftadd@f2+2,7,c
  4631  0019E4  D00E               	goto	l580
  4632  0019E6  0EFF               	movlw	255
  4633  0019E8  1A0F               	xorwf	___ftadd@f2,f,c
  4634  0019EA  0EFF               	movlw	255
  4635  0019EC  1A10               	xorwf	___ftadd@f2+1,f,c
  4636  0019EE  0EFF               	movlw	255
  4637  0019F0  1A11               	xorwf	___ftadd@f2+2,f,c
  4638  0019F2  0E01               	movlw	1
  4639  0019F4  260F               	addwf	___ftadd@f2,f,c
  4640  0019F6  0E00               	movlw	0
  4641  0019F8  2210               	addwfc	___ftadd@f2+1,f,c
  4642  0019FA  0E00               	movlw	0
  4643  0019FC  2211               	addwfc	___ftadd@f2+2,f,c
  4644  0019FE  0E01               	movlw	1
  4645  001A00  6E15               	movwf	___ftadd@sign,c
  4646  001A02                     l580:
  4647  001A02  C00F  F001         	movff	___ftadd@f2,___ftpack@arg
  4648  001A06  C010  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4649  001A0A  C011  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4650  001A0E  C017  F004         	movff	___ftadd@exp1,___ftpack@exp
  4651  001A12  C015  F005         	movff	___ftadd@sign,___ftpack@sign
  4652  001A16  EC35  F010         	call	___ftpack	;wreg free
  4653  001A1A  C001  F00C         	movff	?___ftpack,?___ftadd
  4654  001A1E  C002  F00D         	movff	?___ftpack+1,?___ftadd+1
  4655  001A22  C003  F00E         	movff	?___ftpack+2,?___ftadd+2
  4656  001A26  0012               	return	
  4657  001A28                     __end_of___ftadd:
  4658                           	opt stack 0
  4659                           tblptru	equ	0xFF8
  4660                           tblptrh	equ	0xFF7
  4661                           tblptrl	equ	0xFF6
  4662                           tablat	equ	0xFF5
  4663                           prodh	equ	0xFF4
  4664                           prodl	equ	0xFF3
  4665                           postinc0	equ	0xFEE
  4666                           wreg	equ	0xFE8
  4667                           postdec1	equ	0xFE5
  4668                           fsr1l	equ	0xFE1
  4669                           status	equ	0xFD8
  4670                           
  4671 ;; *************** function ___awtoft *****************
  4672 ;; Defined at:
  4673 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  4674 ;; Parameters:    Size  Location     Type
  4675 ;;  c               2    8[COMRAM] int 
  4676 ;; Auto vars:     Size  Location     Type
  4677 ;;  sign            1   11[COMRAM] unsigned char 
  4678 ;; Return value:  Size  Location     Type
  4679 ;;                  3    8[COMRAM] float 
  4680 ;; Registers used:
  4681 ;;		wreg, status,2, status,0, cstack
  4682 ;; Tracked objects:
  4683 ;;		On entry : 0/0
  4684 ;;		On exit  : 0/0
  4685 ;;		Unchanged: 0/0
  4686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4687 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4688 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4690 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4691 ;;Total ram usage:        4 bytes
  4692 ;; Hardware stack levels used:    1
  4693 ;; Hardware stack levels required when called:    1
  4694 ;; This function calls:
  4695 ;;		___ftpack
  4696 ;; This function is called by:
  4697 ;;		_delayMs
  4698 ;;		_getHandleAngle
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text22
  4703  00236E                     __ptext22:
  4704                           	opt stack 0
  4705  00236E                     ___awtoft:
  4706                           	opt stack 27
  4707                           
  4708                           ;incstack = 0
  4709  00236E  0E00               	movlw	0
  4710  002370  6E0C               	movwf	___awtoft@sign,c
  4711  002372  AE0A               	btfss	___awtoft@c+1,7,c
  4712  002374  D006               	goto	l496
  4713  002376  6C09               	negf	___awtoft@c,c
  4714  002378  1E0A               	comf	___awtoft@c+1,f,c
  4715  00237A  B0D8               	btfsc	status,0,c
  4716  00237C  2A0A               	incf	___awtoft@c+1,f,c
  4717  00237E  0E01               	movlw	1
  4718  002380  6E0C               	movwf	___awtoft@sign,c
  4719  002382                     l496:
  4720  002382  C009  F001         	movff	___awtoft@c,___ftpack@arg
  4721  002386  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  4722  00238A  6A03               	clrf	___ftpack@arg+2,c
  4723  00238C  0E8E               	movlw	142
  4724  00238E  6E04               	movwf	___ftpack@exp,c
  4725  002390  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  4726  002394  EC35  F010         	call	___ftpack	;wreg free
  4727  002398  C001  F009         	movff	?___ftpack,?___awtoft
  4728  00239C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  4729  0023A0  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  4730  0023A4  0012               	return	
  4731  0023A6                     __end_of___awtoft:
  4732                           	opt stack 0
  4733                           tblptru	equ	0xFF8
  4734                           tblptrh	equ	0xFF7
  4735                           tblptrl	equ	0xFF6
  4736                           tablat	equ	0xFF5
  4737                           prodh	equ	0xFF4
  4738                           prodl	equ	0xFF3
  4739                           postinc0	equ	0xFEE
  4740                           wreg	equ	0xFE8
  4741                           postdec1	equ	0xFE5
  4742                           fsr1l	equ	0xFE1
  4743                           status	equ	0xFD8
  4744                           
  4745 ;; *************** function ___ftpack *****************
  4746 ;; Defined at:
  4747 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;  arg             3    0[COMRAM] unsigned um
  4750 ;;  exp             1    3[COMRAM] unsigned char 
  4751 ;;  sign            1    4[COMRAM] unsigned char 
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;		None
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  3    0[COMRAM] float 
  4756 ;; Registers used:
  4757 ;;		wreg, status,2, status,0
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4763 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4765 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4766 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4767 ;;Total ram usage:        8 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; This function calls:
  4770 ;;		Nothing
  4771 ;; This function is called by:
  4772 ;;		___awtoft
  4773 ;;		___ftadd
  4774 ;;		___ftdiv
  4775 ;;		___ftmul
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           	psect	text23
  4780  00206A                     __ptext23:
  4781                           	opt stack 0
  4782  00206A                     ___ftpack:
  4783                           	opt stack 27
  4784                           
  4785                           ;incstack = 0
  4786  00206A  5004               	movf	___ftpack@exp,w,c
  4787  00206C  B4D8               	btfsc	status,2,c
  4788  00206E  D005               	goto	u1380
  4789  002070  5001               	movf	___ftpack@arg,w,c
  4790  002072  1002               	iorwf	___ftpack@arg+1,w,c
  4791  002074  1003               	iorwf	___ftpack@arg+2,w,c
  4792  002076  A4D8               	btfss	status,2,c
  4793  002078  D00C               	goto	l521
  4794  00207A                     u1380:
  4795  00207A  0E00               	movlw	0
  4796  00207C  6E01               	movwf	?___ftpack,c
  4797  00207E  0E00               	movlw	0
  4798  002080  6E02               	movwf	?___ftpack+1,c
  4799  002082  0E00               	movlw	0
  4800  002084  6E03               	movwf	?___ftpack+2,c
  4801  002086  0012               	return	
  4802  002088  2A04               	incf	___ftpack@exp,f,c
  4803  00208A  90D8               	bcf	status,0,c
  4804  00208C  3203               	rrcf	___ftpack@arg+2,f,c
  4805  00208E  3202               	rrcf	___ftpack@arg+1,f,c
  4806  002090  3201               	rrcf	___ftpack@arg,f,c
  4807  002092                     l521:
  4808  002092  0E00               	movlw	0
  4809  002094  1401               	andwf	___ftpack@arg,w,c
  4810  002096  6E06               	movwf	??___ftpack& (0+255),c
  4811  002098  0E00               	movlw	0
  4812  00209A  1402               	andwf	___ftpack@arg+1,w,c
  4813  00209C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4814  00209E  0EFE               	movlw	254
  4815  0020A0  1403               	andwf	___ftpack@arg+2,w,c
  4816  0020A2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4817  0020A4  5006               	movf	??___ftpack,w,c
  4818  0020A6  1007               	iorwf	??___ftpack+1,w,c
  4819  0020A8  1008               	iorwf	??___ftpack+2,w,c
  4820  0020AA  B4D8               	btfsc	status,2,c
  4821  0020AC  D00C               	goto	l524
  4822  0020AE  D7EC               	goto	l522
  4823  0020B0  2A04               	incf	___ftpack@exp,f,c
  4824  0020B2  0E01               	movlw	1
  4825  0020B4  2601               	addwf	___ftpack@arg,f,c
  4826  0020B6  0E00               	movlw	0
  4827  0020B8  2202               	addwfc	___ftpack@arg+1,f,c
  4828  0020BA  0E00               	movlw	0
  4829  0020BC  2203               	addwfc	___ftpack@arg+2,f,c
  4830  0020BE  90D8               	bcf	status,0,c
  4831  0020C0  3203               	rrcf	___ftpack@arg+2,f,c
  4832  0020C2  3202               	rrcf	___ftpack@arg+1,f,c
  4833  0020C4  3201               	rrcf	___ftpack@arg,f,c
  4834  0020C6                     l524:
  4835  0020C6  0E00               	movlw	0
  4836  0020C8  1401               	andwf	___ftpack@arg,w,c
  4837  0020CA  6E06               	movwf	??___ftpack& (0+255),c
  4838  0020CC  0E00               	movlw	0
  4839  0020CE  1402               	andwf	___ftpack@arg+1,w,c
  4840  0020D0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4841  0020D2  0EFF               	movlw	255
  4842  0020D4  1403               	andwf	___ftpack@arg+2,w,c
  4843  0020D6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4844  0020D8  5006               	movf	??___ftpack,w,c
  4845  0020DA  1007               	iorwf	??___ftpack+1,w,c
  4846  0020DC  1008               	iorwf	??___ftpack+2,w,c
  4847  0020DE  B4D8               	btfsc	status,2,c
  4848  0020E0  D006               	goto	l527
  4849  0020E2  D7E6               	goto	l525
  4850  0020E4  0604               	decf	___ftpack@exp,f,c
  4851  0020E6  90D8               	bcf	status,0,c
  4852  0020E8  3601               	rlcf	___ftpack@arg,f,c
  4853  0020EA  3602               	rlcf	___ftpack@arg+1,f,c
  4854  0020EC  3603               	rlcf	___ftpack@arg+2,f,c
  4855  0020EE                     l527:
  4856  0020EE  BE02               	btfsc	___ftpack@arg+1,7,c
  4857  0020F0  D003               	goto	u1420
  4858  0020F2  0E02               	movlw	2
  4859  0020F4  6004               	cpfslt	___ftpack@exp,c
  4860  0020F6  D7F6               	goto	l528
  4861  0020F8                     u1420:
  4862  0020F8  A004               	btfss	___ftpack@exp,0,c
  4863  0020FA  9E02               	bcf	___ftpack@arg+1,7,c
  4864  0020FC  90D8               	bcf	status,0,c
  4865  0020FE  3204               	rrcf	___ftpack@exp,f,c
  4866  002100  5004               	movf	___ftpack@exp,w,c
  4867  002102  1203               	iorwf	___ftpack@arg+2,f,c
  4868  002104  5005               	movf	___ftpack@sign,w,c
  4869  002106  A4D8               	btfss	status,2,c
  4870  002108  8E03               	bsf	___ftpack@arg+2,7,c
  4871  00210A  C001  F001         	movff	___ftpack@arg,?___ftpack
  4872  00210E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4873  002112  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4874  002116  0012               	return	
  4875  002118                     __end_of___ftpack:
  4876                           	opt stack 0
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           prodh	equ	0xFF4
  4882                           prodl	equ	0xFF3
  4883                           postinc0	equ	0xFEE
  4884                           wreg	equ	0xFE8
  4885                           postdec1	equ	0xFE5
  4886                           fsr1l	equ	0xFE1
  4887                           status	equ	0xFD8
  4888                           
  4889 ;; *************** function _ClearWatchDogTimer *****************
  4890 ;; Defined at:
  4891 ;;		line 560 in file "Main.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;		None
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;		None
  4896 ;; Return value:  Size  Location     Type
  4897 ;;                  1    wreg      void 
  4898 ;; Registers used:
  4899 ;;		None
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4909 ;;Total ram usage:        0 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; This function calls:
  4912 ;;		Nothing
  4913 ;; This function is called by:
  4914 ;;		_main
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           	psect	text24
  4919  00247A                     __ptext24:
  4920                           	opt stack 0
  4921  00247A                     _ClearWatchDogTimer:
  4922                           	opt stack 30
  4923                           
  4924                           ;incstack = 0
  4925  00247A  0004               	clrwdt		;# 
  4926  00247C  0012               	return		;funcret
  4927  00247E                     __end_of_ClearWatchDogTimer:
  4928                           	opt stack 0
  4929                           tblptru	equ	0xFF8
  4930                           tblptrh	equ	0xFF7
  4931                           tblptrl	equ	0xFF6
  4932                           tablat	equ	0xFF5
  4933                           prodh	equ	0xFF4
  4934                           prodl	equ	0xFF3
  4935                           postinc0	equ	0xFEE
  4936                           wreg	equ	0xFE8
  4937                           postdec1	equ	0xFE5
  4938                           fsr1l	equ	0xFE1
  4939                           status	equ	0xFD8
  4940                           tblptru	equ	0xFF8
  4941                           tblptrh	equ	0xFF7
  4942                           tblptrl	equ	0xFF6
  4943                           tablat	equ	0xFF5
  4944                           prodh	equ	0xFF4
  4945                           prodl	equ	0xFF3
  4946                           postinc0	equ	0xFEE
  4947                           wreg	equ	0xFE8
  4948                           postdec1	equ	0xFE5
  4949                           fsr1l	equ	0xFE1
  4950                           status	equ	0xFD8
  4951                           
  4952                           	psect	rparam
  4953  0000                     tblptru	equ	0xFF8
  4954                           tblptrh	equ	0xFF7
  4955                           tblptrl	equ	0xFF6
  4956                           tablat	equ	0xFF5
  4957                           prodh	equ	0xFF4
  4958                           prodl	equ	0xFF3
  4959                           postinc0	equ	0xFEE
  4960                           wreg	equ	0xFE8
  4961                           postdec1	equ	0xFE5
  4962                           fsr1l	equ	0xFE1
  4963                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    52
    Data        14
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     92      94
    BANK0           160     69     117
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 18
		 -> atan@coeff_a(CODE[18]), atan@coeff_b(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_getHandleAngle
    _readWaterSensor->_delayMs
    _delayMs->___fttol
    ___fttol->___ftmul
    _getHandleAngle->_atan2
    _atan2->_atan
    _atan->_eval_poly
    _fabs->___ftneg
    ___ftneg->___ftpack
    _eval_poly->___ftmul
    ___ftmul->___ftdiv
    ___ftge->_fabs
    ___ftdiv->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftneg
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_getHandleAngle
    _getHandleAngle->_atan2

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   90101
                                             46 BANK0     23    23      0
                 _ClearWatchDogTimer
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            _delayMs
                     _getHandleAngle
                     _initialization
                    _readWaterSensor
                           _writeSPI
 ---------------------------------------------------------------------------------
 (1) _writeSPI                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _readWaterSensor                                      9     7      2    8120
                                             77 COMRAM     9     7      2
                            _delayMs
                   _digitalPinStatus
 ---------------------------------------------------------------------------------
 (2) _digitalPinStatus                                     5     3      2     908
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _delayMs                                              9     7      2    7187
                                             68 COMRAM     9     7      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     328
                                             53 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialization                                       0     0      0       0
                            _initAdc
                            _initSPI
 ---------------------------------------------------------------------------------
 (2) _initSPI                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initAdc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getHandleAngle                                      42    39      3   63368
                                             87 COMRAM     5     2      3
                                              9 BANK0     37    37      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                              _atan2
                            _readAdc
 ---------------------------------------------------------------------------------
 (2) _readAdc                                              6     4      2     197
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _atan2                                               15     9      6   45515
                                             81 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___ftsub
                               _atan
                               _fabs
 ---------------------------------------------------------------------------------
 (3) _atan                                                16    13      3   26799
                                             65 COMRAM    16    13      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (3) _fabs                                                 3     0      3     719
                                             11 COMRAM     3     0      3
                            ___ftneg
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     425
                                              8 COMRAM     3     0      3
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   10639
                                             53 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3830
                                             38 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    1200
                                             14 COMRAM     9     3      6
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3784
                                             23 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6209
                                             23 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5712
                                             11 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2785
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _ClearWatchDogTimer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearWatchDogTimer
   ___ftadd
     ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
     _fabs (ARG)
       ___ftneg
         ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftneg
     ___ftpack (ARG)
   _delayMs
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
   _getHandleAngle
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
       _fabs (ARG)
         ___ftneg
           ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     _atan2
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
       _atan (ARG)
         ___ftadd
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
           _fabs (ARG)
             ___ftneg
               ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg
           ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___wmul
         _fabs
           ___ftneg
             ___ftpack (ARG)
       _fabs (ARG)
         ___ftneg
           ___ftpack (ARG)
     _readAdc
   _initialization
     _initAdc
     _initSPI
   _readWaterSensor
     _delayMs
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
     _digitalPinStatus
   _writeSPI

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E87      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     45      75       5       73.1%
BITBANK14           88      0       0      33        0.0%
BANK14              88      0       0      34        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5C      5E       1       98.9%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D3       6        0.0%
DATA                 0      0      D3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Sep 14 11:44:01 2018

                    __CFG_CP$OFF 000000                               _PI 0F07  
            ___wmul@multiplicand 0003                     ___ftadd@exp1 0017  
                   ___ftadd@exp2 0016                      __CFG_LVP$ON 000000  
                   ___ftadd@sign 0015                              l200 173A  
                            l210 1870                              l202 1756  
                            l131 2190                              l203 1778  
                            l132 218A                              l204 1806  
                            l205 1842                              l126 2122  
                            l128 2126                              l144 1C06  
                            l208 184E                              l129 2134  
                            l241 1A68                              l153 1CC0  
                            l251 1AB8                              l243 1A78  
                            l235 1A38                              l180 2292  
                            l421 12DE                              l181 22C6  
                            l261 1B08                              l253 1AC8  
                            l245 1A88                              l237 1A48  
                            l149 1C44                              l502 23C8  
                            l430 1416                              l182 2298  
                            l431 143E                              l423 130C  
                            l191 10A8                              l271 1B58  
                            l263 1B18                              l255 1AD8  
                            l247 1A98                              l239 1A58  
                            l600 1DE6                              l432 14DA  
                            l424 131A                              l184 22CA  
                            l521 2092                              l433 1502  
                            l273 1B68                              l265 1B28  
                            l257 1AE8                              l249 1AA8  
                            l522 2088                              l602 1E0E  
                            l426 1352                              l603 1E40  
                            l611 2436                              l427 1360  
                            l179 22A8                              l275 1B7C  
                            l267 1B38                              l259 1AF8  
                            l524 20C6                              l604 1E50  
                            l428 144C                              l525 20B0  
                            l189 107A                              l621 1CF6  
                            l277 1B92                              l269 1B48  
                            l606 1E68                              l630 1D84  
                            l527 20EE                              l607 1E78  
                            l623 1D6C                              l528 20E4  
                            l552 18CE                              l632 1DAC  
                            l624 1D5C                              l561 195E  
                            l617 2344                              l580 1A02  
                            l556 18F8                              l629 1D90  
                            l566 1954                              l575 1992  
                            l567 194A                              l496 2382  
                            l576 1988                              l585 1EDA  
                            l593 21DC                              l578 19B6  
                            l594 220C                              l579 19D2  
                            l587 1F02                              l588 1F40  
                            l589 1F66                              l881 1544  
                            l891 2054                              l883 159A  
                            l892 1FD8                              l884 169C  
                            l886 16AE                     __CFG_CPD$OFF 000000  
                            wreg 000FE8                     __CFG_ZCD$OFF 000000  
                   ___ftdiv@cntr 0021                     ___ftdiv@sign 0026  
                           l1722 2238                             l2286 2462  
                           u1420 20F8                             u1520 18EA  
                           u1451 188C                             u1380 207A  
                           u1620 199A                             u1461 18A0  
                           u2421 1B76                             u1550 1928  
                           u2600 1C40                             u1490 18C0  
                           u1731 1EC2                             u2620 1C7E  
                           u1661 1DCE                             u1590 1966  
                           u1751 1EEA                             u1911 1CDA  
                           u2448 1B8C                             u2560 1BC8  
                           u1681 1DF6                             u1850 1568  
                           u1930 1D14                             u1860 156A  
                           u2580 1C02                             u1935 1D0C  
                           u1970 1D96                             u1990 2144  
                           _TMR0 000FD3                             _Pin4 00D1  
                  __CFG_FCMEN$ON 000000                             _fabs 23A6  
               ??_initialization 0001                             _atan 1510  
                           _main 16CC                     ___ftpack@arg 0001  
                           _hour 00C5                     ___ftpack@exp 0004  
                           fsr1l 000FE1               _ClearWatchDogTimer 247A  
                           prodh 000FF4                             prodl 000FF3  
                           start 0000                    __CFG_CSWEN$ON 000000  
                   ___ftmul@cntr 0034                     ___param_bank 000000  
                   ___ftmul@sign 0035              ?_ClearWatchDogTimer 0001  
                  __CFG_SCANE$ON 000000                     ___fttol@exp1 0044  
                   ___fttol@lval 0040         __end_of_digitalPinStatus 1B9C  
                          ?_fabs 000C                            ?_atan 0042  
                          ?_main 0001                            _ADCLK 000F57  
                          _ADRES 000F63                  __end_of___ftadd 1A28  
                  __CFG_WDTE$OFF 000000                  __end_of___ftdiv 1F98  
                __end_of___ftneg 2444                  __end_of___ftmul 1EB2  
                __end_of___ftsub 236E                  __end_of___fttol 1DBE  
                 __CFG_DEBUG$OFF 000000                     main@newAngle 0097  
                          _TRISA 000F88                            _TRISB 000F89  
                          _TRISC 000F8A                  __end_of_delayMs 21AC  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000                    __CFG_WRT3$OFF 000000  
                 __CFG_EBTR0$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000             ??_ClearWatchDogTimer 0001  
                 __CFG_EBTRB$OFF 000000                            _atan2 12B2  
                  ___awtoft@sign 000C                  __end_of_initAdc 2460  
                __end_of_initSPI 2420                  __end_of_readAdc 22E0  
                          _xAxis 0F12                            fabs@d 000C  
                          _yAxis 0F10                            _errno 00C3  
                          atan@f 0042                            atan@x 0048  
                          atan@y 0045                            _rxPin 00CF  
             __CFG_MCLRE$EXTMCLR 000000                    ___ftpack@sign 0005  
                          tablat 000FF5                            status 000FD8  
                __initialization 22E0                     __end_of_fabs 23D6  
                   __end_of_atan 16CC                     __end_of_main 187C  
                         ??_fabs 000F                           ??_atan 0045  
                         ??_main 005D                    ___fttol@sign1 003F  
                  __activetblptr 000002           _TimeSinceLastHourCheck 00C7  
                         ?_atan2 0052                 __end_of___awtoft 23A6  
                         _ANSELA 000F11                           _ANSELB 000F19  
                         _ANSELC 000F21                 __end_of___ftpack 2118  
        __size_of_getHandleAngle 037C                 main@angleCurrent 0091  
                         _RC3PPS 000EFA                           _RC5PPS 000EFC  
                 __CFG_WDTCCS$SC 000000                  _readWaterSensor 1B9C  
                  main@readWater 009F                   __CFG_PWRTE$OFF 000000  
                 __CFG_XINST$OFF 000000        __CFG_RSTOSC$HFINTOSC_1MHZ 000000  
                         ___ftge 21AC                           ___wmul 23D6  
                      ??___ftadd 0012                   __CFG_STVREN$ON 000000  
    __end_of_pulseWidthThreshold 0F0C                           _angle1 00C0  
                         _angle2 00BD                           _angle3 00BA  
                         _angle4 00B7                           _angle5 00B4  
                         _angle6 00B1                           _angle7 00AE  
                         _angle8 00AB                        ??___ftdiv 001E  
                         _angle9 00A8                        ??___ftneg 000C  
                      ??___ftmul 002D                        ??___ftsub 001E  
                      ??___fttol 003A                           atan2@v 0066  
                         atan2@x 0055                           atan2@y 0052  
                         clear_0 231E              getHandleAngle@angle 008B  
                      ??_delayMs 0047            ___ftmul@f3_as_product 0031  
                      ??_initAdc 0001                        ??_initSPI 0001  
                      ??_readAdc 0003                     __pdataCOMRAM 005D  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                 main@adcVoltage 008E                 __end_of_writeSPI 246E  
                     __accesstop 0060          __end_of__initialization 2324  
                     ___ftadd@f1 000C                       ___ftadd@f2 000F  
                     ___ftge@ff1 000F                       ___ftge@ff2 0012  
                   eval_poly@res 003F                    ___rparam_used 000001  
                     ___ftdiv@f1 0018                       ___ftdiv@f2 001B  
                     ___ftdiv@f3 0022                       ___ftneg@f1 0009  
                     ___awtoft@c 0009          _handleMovementThreshold 0F01  
                     ___ftmul@f1 0027                       ___ftmul@f2 002A  
                     ___ftsub@f1 0018                       ___ftsub@f2 001B  
                     ___fttol@f1 0036                   __pcstackCOMRAM 0001  
                   __pidataBANK0 246E                    __end_of_atan2 1510  
                  __end_of_xAxis 0F14                    __end_of_yAxis 0F12  
                     __end_of_PI 0F0A                       _atan2$1810 0060  
                     _atan2$1809 0063                   main@angleDelta 0094  
                 main@deltaAngle 00A2          __end_of_readWaterSensor 1CCA  
                        ??_atan2 0058                       __pbssBANK0 00A5  
             __size_of_eval_poly 00D2                          ?___ftge 000F  
            _angleThresholdSmall 0F04                          ?___wmul 0001  
                __CFG_PPS1WAY$ON 000000                        ?___awtoft 0009  
                      ?___ftpack 0001                ?_digitalPinStatus 0001  
             ??_digitalPinStatus 0003                          _SSP1BUF 000F92  
                 _getHandleAngle 0F36                main@anglePrevious 009A  
                      _ADPCHbits 000F5F                        _ADREFbits 000F58  
                        __Hparam 0000                          __Lparam 0000  
                __size_of___ftge 0090                          ___ftadd 187C  
                        ___ftdiv 1EB2                          ___ftneg 2420  
                __size_of___wmul 0026                          ___ftmul 1DBE  
                        ___ftsub 232E                          ___fttol 1CCA  
                   __psmallconst 0F00                          _angle10 00A5  
                        __pcinit 22E0                       ??___awtoft 000C  
                        _delayMs 2118                       ??___ftpack 0006  
              __end_of_eval_poly 206A                          __ramtop 0F00  
                      ?_writeSPI 0001                          __ptext0 16CC  
                        __ptext1 2460                          __ptext2 1B9C  
                        __ptext3 1A28                          __ptext4 2118  
                        __ptext5 1CCA                          __ptext6 223C  
                        __ptext7 23FC                          __ptext8 2444  
                        __ptext9 0F36                        _T1CONbits 000FCF  
                        _initAdc 2444                          _initSPI 23FC  
                        _readAdc 2290                  atan@val_squared 004C  
                      _T3CONbits 000FC9                  readAdc@adcValue 0005  
                        atan@val 004F           __end_of_getHandleAngle 12B2  
           getHandleAngle@xValue 0087             getHandleAngle@yValue 0089  
               ?_readWaterSensor 004E          readWaterSensor@varToSee 0053  
    __size_of_ClearWatchDogTimer 0004             end_of_initialization 2324  
                  __Lmediumconst 0000            _xAxisAccelerometerPin 00CD  
                        postdec1 000FE5                          postinc0 000FEE  
        __size_of_initialization 0054       getHandleAngle@averageAngle 0069  
          __CFG_WDTCPS$WDTCPS_31 000000  __end_of_handleMovementThreshold 0F04  
                     ??_writeSPI 0001                        _PORTAbits 000F8D  
                      _PORTBbits 000F8E                        _PORTCbits 000F8F  
                _batteryLevelPin 00C9                        _TRISAbits 000F88  
                      _TRISBbits 000F89                        _TRISCbits 000F8A  
                ?_getHandleAngle 0058                 __CFG_FEXTOSC$OFF 000000  
               _upstrokeInterval 0F0C                      ___ftdiv@exp 0025  
            writeSPI@output_data 0001                      ___ftmul@exp 0030  
                 __end_of___ftge 223C                   _depthSensorPin 00D3  
                 __end_of___wmul 23FC                    __pidataCOMRAM 247E  
            start_initialization 22E0                       eval_poly@d 0039  
                     eval_poly@n 003B                       eval_poly@x 0036  
                     readAdc@pin 0001                 delayMs@end_count 004C  
               __CFG_LPBOREN$OFF 000000      readWaterSensor@WaterPresent 0055  
                       ??___ftge 0015                         ??___wmul 0005  
     __end_of_signedNumAdjustADC 0F10                      __pdataBANK0 00C9  
              __size_of___awtoft 0038                __size_of___ftpack 00AE  
                  __pcstackBANK0 0060        __size_of_digitalPinStatus 0174  
                       ?___ftadd 000C                   _initialization 223C  
                       ?___ftdiv 0018                         ?___ftneg 0009  
                       ?___ftmul 0027                         ?___ftsub 0018  
                       ?___fttol 0036                         ?_delayMs 0045  
       digitalPinStatus@pinValue 0004                         ?_initAdc 0001  
                       ?_initSPI 0001                      __smallconst 0F00  
                       ?_readAdc 0001                __size_of_writeSPI 000E  
                      _eval_poly 1F98                   __size_of_atan2 025E  
                      delayMs@ms 0045                   ___wmul@product 0005  
                   delayMs@debug 004A                        atan@recip 004B  
         __end_of_initialization 2290                 ??_getHandleAngle 005B  
       __end_of_upstrokeInterval 0F0E                       _ADCON0bits 000F60  
    __end_of_angleThresholdSmall 0F07                ___wmul@multiplier 0001  
                     ?_eval_poly 0036       __end_of_ClearWatchDogTimer 247E  
            __end_ofatan@coeff_a 0F26              __end_ofatan@coeff_b 0F35  
                      copy_data0 22F4         __size_of_readWaterSensor 012E  
            _pulseWidthThreshold 0F0A                   main@EEPROMdata 00A1  
                       __Hrparam 0000                  ?_initialization 0001  
                       __Lrparam 0000               __CFG_BOREN$SBORDIS 000000  
          _yAxisAccelerometerPin 00CB                 __size_of___ftadd 01AC  
               __size_of___ftdiv 00E6                 __size_of___ftneg 0024  
               __size_of___ftmul 00F4                 __size_of___ftsub 0040  
               __size_of___fttol 00F4                         ___awtoft 236E  
                       ___ftpack 206A                 __size_of_delayMs 0094  
                     _ANSELAbits 000F11                       _T0CON0bits 000FD5  
               __size_of_initAdc 001C                       _T0CON1bits 000FD6  
               __size_of_initSPI 0024                 __size_of_readAdc 0050  
            digitalPinStatus@pin 0001                         __ptext10 2290  
                       __ptext11 12B2                         __ptext20 232E  
                       __ptext12 1510                         __ptext21 187C  
                       __ptext13 23A6                       _T1GCONbits 000FD0  
                       __ptext22 236E                         __ptext14 2420  
                       __ptext23 206A                         __ptext15 1F98  
                       __ptext24 247A                         __ptext16 23D6  
                       __ptext17 1DBE                         __ptext18 21AC  
                       __ptext19 1EB2                     _SSP1CON1bits 000F96  
                   _SSP1CON3bits 000F98                 _digitalPinStatus 1A28  
                  __size_of_fabs 0030                    __size_of_atan 01BC  
                  __size_of_main 01B0             __CFG_WDTCWS$WDTCWS_7 000000  
                   _SSP1STATbits 000F95                         _writeSPI 2460  
                    atan@coeff_a 0F14                      atan@coeff_b 0F26  
                    ??_eval_poly 003D                      _TMR1CLKbits 000FD2  
             _signedNumAdjustADC 0F0E                      _TMR3CLKbits 000FCC  
              __CFG_CLKOUTEN$OFF 000000                ??_readWaterSensor 0050  
            _getHandleAngle$1800 006C              _getHandleAngle$1801 006F  
            _getHandleAngle$1802 0072              _getHandleAngle$1803 0075  
            _getHandleAngle$1804 0078              _getHandleAngle$1805 007B  
            _getHandleAngle$1806 007E              _getHandleAngle$1807 0081  
            _getHandleAngle$1808 0084                       _SSP1DATPPS 000EB8  
         _waterPresenceSensorPin 005D               main@handleMovement 009D  
