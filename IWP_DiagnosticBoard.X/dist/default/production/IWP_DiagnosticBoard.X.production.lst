

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu Oct 25 15:20:10 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18LF27K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43  0000                     
    44                           ; Version 1.44
    45                           ; Generated 14/09/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18LF27K40 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataBANK0
    80  0028B8                     __pidataBANK0:
    81                           	opt stack 0
    82                           
    83                           ;initializer for _batteryLevelPin
    84  0028B8  000B               	dw	11
    85                           
    86                           ;initializer for _yAxisAccelerometerPin
    87  0028BA  0017               	dw	23
    88                           
    89                           ;initializer for _xAxisAccelerometerPin
    90  0028BC  0018               	dw	24
    91                           
    92                           ;initializer for _rxPin
    93  0028BE  0006               	dw	6
    94                           
    95                           ;initializer for _Pin4
    96  0028C0  0004               	dw	4
    97                           
    98                           ;initializer for _depthSensorPin
    99  0028C2  0002               	dw	2
   100                           
   101                           ;initializer for _waterPresenceSensorPin
   102  0028C4  0005               	dw	5
   103                           
   104                           	psect	smallconst
   105  000F00                     __psmallconst:
   106                           	opt stack 0
   107  000F00  00                 	db	0
   108  000F01                     _handleMovementThreshold:
   109                           	opt stack 0
   110  000F01  00                 	db	0
   111  000F02  A0                 	db	160
   112  000F03  40                 	db	64
   113  000F04                     __end_of_handleMovementThreshold:
   114                           	opt stack 0
   115  000F04                     _angleThresholdSmall:
   116                           	opt stack 0
   117  000F04  CD                 	db	205
   118  000F05  CC                 	db	204
   119  000F06  3D                 	db	61
   120  000F07                     __end_of_angleThresholdSmall:
   121                           	opt stack 0
   122  000F07                     _PI:
   123                           	opt stack 0
   124  000F07  10                 	db	16
   125  000F08  49                 	db	73
   126  000F09  40                 	db	64
   127  000F0A                     __end_of_PI:
   128                           	opt stack 0
   129  000F0A                     _pulseWidthThreshold:
   130                           	opt stack 0
   131  000F0A  0014               	dw	20
   132  000F0C                     __end_of_pulseWidthThreshold:
   133                           	opt stack 0
   134  000F0C                     _upstrokeInterval:
   135                           	opt stack 0
   136  000F0C  000A               	dw	10
   137  000F0E                     __end_of_upstrokeInterval:
   138                           	opt stack 0
   139  000F0E                     _signedNumAdjustADC:
   140                           	opt stack 0
   141  000F0E  01FF               	dw	511
   142  000F10                     __end_of_signedNumAdjustADC:
   143                           	opt stack 0
   144  000F10                     _yAxis:
   145                           	opt stack 0
   146  000F10  0007               	dw	7
   147  000F12                     __end_of_yAxis:
   148                           	opt stack 0
   149  000F12                     _xAxis:
   150                           	opt stack 0
   151  000F12  0006               	dw	6
   152  000F14                     __end_of_xAxis:
   153                           	opt stack 0
   154  000F14                     atan@coeff_a:
   155                           	opt stack 0
   156  000F14  3C                 	db	60
   157  000F15  04                 	db	4
   158  000F16  42                 	db	66
   159  000F17  9F                 	db	159
   160  000F18  6A                 	db	106
   161  000F19  42                 	db	66
   162  000F1A  90                 	db	144
   163  000F1B  01                 	db	1
   164  000F1C  42                 	db	66
   165  000F1D  4D                 	db	77
   166  000F1E  BB                 	db	187
   167  000F1F  40                 	db	64
   168  000F20  EC                 	db	236
   169  000F21  47                 	db	71
   170  000F22  3E                 	db	62
   171  000F23  8E                 	db	142
   172  000F24  1F                 	db	31
   173  000F25  BB                 	db	187
   174  000F26                     __end_ofatan@coeff_a:
   175                           	opt stack 0
   176  000F26                     atan@coeff_b:
   177                           	opt stack 0
   178  000F26  3C                 	db	60
   179  000F27  04                 	db	4
   180  000F28  42                 	db	66
   181  000F29  5A                 	db	90
   182  000F2A  8B                 	db	139
   183  000F2B  42                 	db	66
   184  000F2C  04                 	db	4
   185  000F2D  44                 	db	68
   186  000F2E  42                 	db	66
   187  000F2F  9C                 	db	156
   188  000F30  4F                 	db	79
   189  000F31  41                 	db	65
   190  000F32  00                 	db	0
   191  000F33  80                 	db	128
   192  000F34  3F                 	db	63
   193  000F35                     __end_ofatan@coeff_b:
   194                           	opt stack 0
   195  0000                     _RC5PPS	set	3836
   196  0000                     _RC3PPS	set	3834
   197  0000                     _SSP1DATPPS	set	3768
   198  0000                     _ADPCHbits	set	3935
   199  0000                     _ADCLK	set	3927
   200  0000                     _ADREFbits	set	3928
   201  0000                     _ANSELAbits	set	3857
   202  0000                     _ANSELC	set	3873
   203  0000                     _ANSELB	set	3865
   204  0000                     _ANSELA	set	3857
   205  0000                     _ADRES	set	3939
   206  0000                     _PORTAbits	set	3981
   207  0000                     _PORTBbits	set	3982
   208  0000                     _TRISBbits	set	3977
   209  0000                     _TRISAbits	set	3976
   210  0000                     _ADCON0bits	set	3936
   211  0000                     _TMR0	set	4051
   212  0000                     _SSP1BUF	set	3986
   213  0000                     _PORTCbits	set	3983
   214  0000                     _SSP1CON3bits	set	3992
   215  0000                     _SSP1STATbits	set	3989
   216  0000                     _SSP1CON1bits	set	3990
   217  0000                     _TRISCbits	set	3978
   218  0000                     _T3CONbits	set	4041
   219  0000                     _TMR3CLKbits	set	4044
   220  0000                     _T1GCONbits	set	4048
   221  0000                     _T1CONbits	set	4047
   222  0000                     _TMR1CLKbits	set	4050
   223  0000                     _T0CON0bits	set	4053
   224  0000                     _T0CON1bits	set	4054
   225  0000                     _TRISC	set	3978
   226  0000                     _TRISB	set	3977
   227  0000                     _TRISA	set	3976
   228                           
   229                           ; #config settings
   230  000F35  00                 	db	0	; dummy byte at the end
   231  0000                     
   232                           	psect	cinit
   233  00278A                     __pcinit:
   234                           	opt stack 0
   235  00278A                     start_initialization:
   236                           	opt stack 0
   237  00278A                     __initialization:
   238                           	opt stack 0
   239                           
   240                           ; Initialize objects allocated to BANK0 (14 bytes)
   241                           ; load TBLPTR registers with __pidataBANK0
   242  00278A  0EB8               	movlw	low __pidataBANK0
   243  00278C  6EF6               	movwf	tblptrl,c
   244  00278E  0E28               	movlw	high __pidataBANK0
   245  002790  6EF7               	movwf	tblptrh,c
   246  002792  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   247  002794  6EF8               	movwf	tblptru,c
   248  002796  EE00  F0CC         	lfsr	0,__pdataBANK0
   249  00279A  EE10 F00E          	lfsr	1,14
   250  00279E                     copy_data0:
   251  00279E  0009               	tblrd		*+
   252  0027A0  CFF5 FFEE          	movff	tablat,postinc0
   253  0027A4  50E5               	movf	postdec1,w,c
   254  0027A6  50E1               	movf	fsr1l,w,c
   255  0027A8  E1FA               	bnz	copy_data0
   256                           
   257                           ; Clear objects allocated to BANK0 (36 bytes)
   258  0027AA  EE00  F0A8         	lfsr	0,__pbssBANK0
   259  0027AE  0E24               	movlw	36
   260  0027B0                     clear_0:
   261  0027B0  6AEE               	clrf	postinc0,c
   262  0027B2  06E8               	decf	wreg,f,c
   263  0027B4  E1FD               	bnz	clear_0
   264                           
   265                           ; Clear objects allocated to COMRAM (3 bytes)
   266  0027B6  6A5F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   267  0027B8  6A5E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   268  0027BA  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   269  0027BC                     end_of_initialization:
   270                           	opt stack 0
   271  0027BC                     __end_of__initialization:
   272                           	opt stack 0
   273  0027BC  0100               	movlb	0
   274  0027BE  EF63  F009         	goto	_main	;jump to C main() function
   275                           tblptru	equ	0xFF8
   276                           tblptrh	equ	0xFF7
   277                           tblptrl	equ	0xFF6
   278                           tablat	equ	0xFF5
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           postdec1	equ	0xFE5
   282                           fsr1l	equ	0xFE1
   283                           
   284                           	psect	bssCOMRAM
   285  00005D                     __pbssCOMRAM:
   286                           	opt stack 0
   287  00005D                     _EEPromData:
   288                           	opt stack 0
   289  00005D                     	ds	3
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           postdec1	equ	0xFE5
   297                           fsr1l	equ	0xFE1
   298                           
   299                           	psect	bssBANK0
   300  0000A8                     __pbssBANK0:
   301                           	opt stack 0
   302  0000A8                     _angle10:
   303                           	opt stack 0
   304  0000A8                     	ds	3
   305  0000AB                     _angle9:
   306                           	opt stack 0
   307  0000AB                     	ds	3
   308  0000AE                     _angle8:
   309                           	opt stack 0
   310  0000AE                     	ds	3
   311  0000B1                     _angle7:
   312                           	opt stack 0
   313  0000B1                     	ds	3
   314  0000B4                     _angle6:
   315                           	opt stack 0
   316  0000B4                     	ds	3
   317  0000B7                     _angle5:
   318                           	opt stack 0
   319  0000B7                     	ds	3
   320  0000BA                     _angle4:
   321                           	opt stack 0
   322  0000BA                     	ds	3
   323  0000BD                     _angle3:
   324                           	opt stack 0
   325  0000BD                     	ds	3
   326  0000C0                     _angle2:
   327                           	opt stack 0
   328  0000C0                     	ds	3
   329  0000C3                     _angle1:
   330                           	opt stack 0
   331  0000C3                     	ds	3
   332  0000C6                     _errno:
   333                           	opt stack 0
   334  0000C6                     	ds	2
   335  0000C8                     _hour:
   336                           	opt stack 0
   337  0000C8                     	ds	2
   338  0000CA                     _TimeSinceLastHourCheck:
   339                           	opt stack 0
   340  0000CA                     	ds	2
   341                           tblptru	equ	0xFF8
   342                           tblptrh	equ	0xFF7
   343                           tblptrl	equ	0xFF6
   344                           tablat	equ	0xFF5
   345                           postinc0	equ	0xFEE
   346                           wreg	equ	0xFE8
   347                           postdec1	equ	0xFE5
   348                           fsr1l	equ	0xFE1
   349                           
   350                           	psect	dataBANK0
   351  0000CC                     __pdataBANK0:
   352                           	opt stack 0
   353  0000CC                     _batteryLevelPin:
   354                           	opt stack 0
   355  0000CC                     	ds	2
   356  0000CE                     _yAxisAccelerometerPin:
   357                           	opt stack 0
   358  0000CE                     	ds	2
   359  0000D0                     _xAxisAccelerometerPin:
   360                           	opt stack 0
   361  0000D0                     	ds	2
   362  0000D2                     _rxPin:
   363                           	opt stack 0
   364  0000D2                     	ds	2
   365  0000D4                     _Pin4:
   366                           	opt stack 0
   367  0000D4                     	ds	2
   368  0000D6                     _depthSensorPin:
   369                           	opt stack 0
   370  0000D6                     	ds	2
   371  0000D8                     _waterPresenceSensorPin:
   372                           	opt stack 0
   373  0000D8                     	ds	2
   374                           tblptru	equ	0xFF8
   375                           tblptrh	equ	0xFF7
   376                           tblptrl	equ	0xFF6
   377                           tablat	equ	0xFF5
   378                           postinc0	equ	0xFEE
   379                           wreg	equ	0xFE8
   380                           postdec1	equ	0xFE5
   381                           fsr1l	equ	0xFE1
   382                           
   383                           	psect	cstackBANK0
   384  000060                     __pcstackBANK0:
   385                           	opt stack 0
   386  000060                     _atan2$1857:
   387                           	opt stack 0
   388                           
   389                           ; 3 bytes @ 0x0
   390  000060                     	ds	3
   391  000063                     _atan2$1856:
   392                           	opt stack 0
   393                           
   394                           ; 3 bytes @ 0x3
   395  000063                     	ds	3
   396  000066                     atan2@v:
   397                           	opt stack 0
   398                           
   399                           ; 3 bytes @ 0x6
   400  000066                     	ds	3
   401  000069                     getHandleAngle@averageAngle:
   402                           	opt stack 0
   403                           
   404                           ; 3 bytes @ 0x9
   405  000069                     	ds	3
   406  00006C                     _getHandleAngle$1847:
   407                           	opt stack 0
   408                           
   409                           ; 3 bytes @ 0xC
   410  00006C                     	ds	3
   411  00006F                     _getHandleAngle$1848:
   412                           	opt stack 0
   413                           
   414                           ; 3 bytes @ 0xF
   415  00006F                     	ds	3
   416  000072                     _getHandleAngle$1849:
   417                           	opt stack 0
   418                           
   419                           ; 3 bytes @ 0x12
   420  000072                     	ds	3
   421  000075                     _getHandleAngle$1850:
   422                           	opt stack 0
   423                           
   424                           ; 3 bytes @ 0x15
   425  000075                     	ds	3
   426  000078                     _getHandleAngle$1851:
   427                           	opt stack 0
   428                           
   429                           ; 3 bytes @ 0x18
   430  000078                     	ds	3
   431  00007B                     _getHandleAngle$1852:
   432                           	opt stack 0
   433                           
   434                           ; 3 bytes @ 0x1B
   435  00007B                     	ds	3
   436  00007E                     _getHandleAngle$1853:
   437                           	opt stack 0
   438                           
   439                           ; 3 bytes @ 0x1E
   440  00007E                     	ds	3
   441  000081                     _getHandleAngle$1854:
   442                           	opt stack 0
   443                           
   444                           ; 3 bytes @ 0x21
   445  000081                     	ds	3
   446  000084                     _getHandleAngle$1855:
   447                           	opt stack 0
   448                           
   449                           ; 3 bytes @ 0x24
   450  000084                     	ds	3
   451  000087                     getHandleAngle@xValue:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x27
   455  000087                     	ds	2
   456  000089                     getHandleAngle@yValue:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x29
   460  000089                     	ds	2
   461  00008B                     getHandleAngle@angle:
   462                           	opt stack 0
   463                           
   464                           ; 3 bytes @ 0x2B
   465  00008B                     	ds	3
   466  00008E                     main@adcVoltage:
   467                           	opt stack 0
   468                           
   469                           ; 3 bytes @ 0x2E
   470  00008E                     	ds	3
   471  000091                     main@angleCurrent:
   472                           	opt stack 0
   473                           
   474                           ; 3 bytes @ 0x31
   475  000091                     	ds	3
   476  000094                     main@angleDelta:
   477                           	opt stack 0
   478                           
   479                           ; 3 bytes @ 0x34
   480  000094                     	ds	3
   481  000097                     main@EEPromFloatData:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x37
   485  000097                     	ds	3
   486  00009A                     main@newAngle:
   487                           	opt stack 0
   488                           
   489                           ; 3 bytes @ 0x3A
   490  00009A                     	ds	3
   491  00009D                     main@anglePrevious:
   492                           	opt stack 0
   493                           
   494                           ; 3 bytes @ 0x3D
   495  00009D                     	ds	3
   496  0000A0                     main@handleMovement:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x40
   500  0000A0                     	ds	2
   501  0000A2                     main@EEPROMdata:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x42
   505  0000A2                     	ds	1
   506  0000A3                     main@readWater:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x43
   510  0000A3                     	ds	2
   511  0000A5                     main@deltaAngle:
   512                           	opt stack 0
   513                           
   514                           ; 3 bytes @ 0x45
   515  0000A5                     	ds	3
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           postdec1	equ	0xFE5
   523                           fsr1l	equ	0xFE1
   524                           
   525                           	psect	cstackCOMRAM
   526  000001                     __pcstackCOMRAM:
   527                           	opt stack 0
   528  000001                     ?_digitalPinStatus:
   529                           	opt stack 0
   530  000001                     ?_readAdc:
   531                           	opt stack 0
   532  000001                     ?___wmul:
   533                           	opt stack 0
   534  000001                     ?___ftpack:
   535                           	opt stack 0
   536  000001                     writeSPI@output_data:
   537                           	opt stack 0
   538  000001                     readSPI@dummy:
   539                           	opt stack 0
   540  000001                     readAdc@pin:
   541                           	opt stack 0
   542  000001                     digitalPinStatus@pin:
   543                           	opt stack 0
   544  000001                     ___wmul@multiplier:
   545                           	opt stack 0
   546  000001                     ___ftpack@arg:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x0
   550  000001                     	ds	2
   551  000003                     ??_digitalPinStatus:
   552  000003                     ??_readAdc:
   553  000003                     ___wmul@multiplicand:
   554                           	opt stack 0
   555  000003                     writeSPI@EEaddress:
   556                           	opt stack 0
   557  000003                     readSPI@EEaddress:
   558                           	opt stack 0
   559                           
   560                           ; 3 bytes @ 0x2
   561  000003                     	ds	1
   562  000004                     ___ftpack@exp:
   563                           	opt stack 0
   564  000004                     digitalPinStatus@pinValue:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x3
   568  000004                     	ds	1
   569  000005                     ___ftpack@sign:
   570                           	opt stack 0
   571  000005                     readAdc@adcValue:
   572                           	opt stack 0
   573  000005                     ___wmul@product:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x4
   577  000005                     	ds	1
   578  000006                     ??_writeSPI:
   579  000006                     ??_readSPI:
   580  000006                     ??___ftpack:
   581                           
   582                           ; 1 bytes @ 0x5
   583  000006                     	ds	3
   584  000009                     ?___awtoft:
   585                           	opt stack 0
   586  000009                     ?___ftneg:
   587                           	opt stack 0
   588  000009                     writeSPI@AdrsMsb:
   589                           	opt stack 0
   590  000009                     readSPI@AdrsMsb:
   591                           	opt stack 0
   592  000009                     ___awtoft@c:
   593                           	opt stack 0
   594  000009                     ___ftneg@f1:
   595                           	opt stack 0
   596                           
   597                           ; 3 bytes @ 0x8
   598  000009                     	ds	1
   599  00000A                     writeSPI@AdrsMid:
   600                           	opt stack 0
   601  00000A                     readSPI@AdrsMid:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x9
   605  00000A                     	ds	1
   606  00000B                     writeSPI@AdrsLsb:
   607                           	opt stack 0
   608  00000B                     readSPI@AdrsLsb:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0xA
   612  00000B                     	ds	1
   613  00000C                     ?___ftadd:
   614                           	opt stack 0
   615  00000C                     ?_fabs:
   616                           	opt stack 0
   617  00000C                     readSPI@local_data:
   618                           	opt stack 0
   619  00000C                     ___awtoft@sign:
   620                           	opt stack 0
   621  00000C                     writeSPI@local_data:
   622                           	opt stack 0
   623  00000C                     fabs@d:
   624                           	opt stack 0
   625  00000C                     ___ftadd@f1:
   626                           	opt stack 0
   627                           
   628                           ; 3 bytes @ 0xB
   629  00000C                     	ds	1
   630  00000D                     ?_readEEPromFloat:
   631                           	opt stack 0
   632  00000D                     readEEPromFloat@EEaddress:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0xC
   636  00000D                     	ds	1
   637  00000E                     writeEEPromFloat@output_data:
   638                           	opt stack 0
   639                           
   640                           ; 3 bytes @ 0xD
   641  00000E                     	ds	1
   642  00000F                     ___ftadd@f2:
   643                           	opt stack 0
   644  00000F                     ___ftge@ff1:
   645                           	opt stack 0
   646                           
   647                           ; 3 bytes @ 0xE
   648  00000F                     	ds	1
   649  000010                     ??_readEEPromFloat:
   650                           
   651                           ; 1 bytes @ 0xF
   652  000010                     	ds	1
   653  000011                     writeEEPromFloat@EEaddress:
   654                           	opt stack 0
   655                           
   656                           ; 3 bytes @ 0x10
   657  000011                     	ds	1
   658  000012                     ??___ftadd:
   659  000012                     ___ftge@ff2:
   660                           	opt stack 0
   661                           
   662                           ; 3 bytes @ 0x11
   663  000012                     	ds	2
   664  000014                     ??_writeEEPromFloat:
   665                           
   666                           ; 1 bytes @ 0x13
   667  000014                     	ds	1
   668  000015                     ??___ftge:
   669  000015                     readEEPromFloat@Data2:
   670                           	opt stack 0
   671  000015                     ___ftadd@sign:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x14
   675  000015                     	ds	1
   676  000016                     readEEPromFloat@Data1:
   677                           	opt stack 0
   678  000016                     ___ftadd@exp2:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x15
   682  000016                     	ds	1
   683  000017                     readEEPromFloat@Data0:
   684                           	opt stack 0
   685  000017                     ___ftadd@exp1:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x16
   689  000017                     	ds	1
   690  000018                     ?___ftdiv:
   691                           	opt stack 0
   692  000018                     ?___ftsub:
   693                           	opt stack 0
   694  000018                     ___ftdiv@f1:
   695                           	opt stack 0
   696  000018                     ___ftsub@f1:
   697                           	opt stack 0
   698                           
   699                           ; 3 bytes @ 0x17
   700  000018                     	ds	1
   701  000019                     writeEEPromFloat@Data2:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x18
   705  000019                     	ds	2
   706  00001B                     writeEEPromFloat@Data1:
   707                           	opt stack 0
   708  00001B                     ___ftdiv@f2:
   709                           	opt stack 0
   710  00001B                     ___ftsub@f2:
   711                           	opt stack 0
   712                           
   713                           ; 3 bytes @ 0x1A
   714  00001B                     	ds	2
   715  00001D                     writeEEPromFloat@Data0:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x1C
   719  00001D                     	ds	1
   720  00001E                     ??___ftdiv:
   721  00001E                     
   722                           ; 1 bytes @ 0x1D
   723  00001E                     	ds	3
   724  000021                     ___ftdiv@cntr:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x20
   728  000021                     	ds	1
   729  000022                     ___ftdiv@f3:
   730                           	opt stack 0
   731                           
   732                           ; 3 bytes @ 0x21
   733  000022                     	ds	3
   734  000025                     ___ftdiv@exp:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x24
   738  000025                     	ds	1
   739  000026                     ___ftdiv@sign:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x25
   743  000026                     	ds	1
   744  000027                     ?___ftmul:
   745                           	opt stack 0
   746  000027                     ___ftmul@f1:
   747                           	opt stack 0
   748                           
   749                           ; 3 bytes @ 0x26
   750  000027                     	ds	3
   751  00002A                     ___ftmul@f2:
   752                           	opt stack 0
   753                           
   754                           ; 3 bytes @ 0x29
   755  00002A                     	ds	3
   756  00002D                     ??___ftmul:
   757                           
   758                           ; 1 bytes @ 0x2C
   759  00002D                     	ds	3
   760  000030                     ___ftmul@exp:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x2F
   764  000030                     	ds	1
   765  000031                     ___ftmul@f3_as_product:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x30
   769  000031                     	ds	3
   770  000034                     ___ftmul@cntr:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x33
   774  000034                     	ds	1
   775  000035                     ___ftmul@sign:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x34
   779  000035                     	ds	1
   780  000036                     ?_eval_poly:
   781                           	opt stack 0
   782  000036                     ?___fttol:
   783                           	opt stack 0
   784  000036                     ___fttol@f1:
   785                           	opt stack 0
   786  000036                     eval_poly@x:
   787                           	opt stack 0
   788                           
   789                           ; 3 bytes @ 0x35
   790  000036                     	ds	3
   791  000039                     eval_poly@d:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x38
   795  000039                     	ds	1
   796  00003A                     ??___fttol:
   797                           
   798                           ; 1 bytes @ 0x39
   799  00003A                     	ds	1
   800  00003B                     eval_poly@n:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x3A
   804  00003B                     	ds	2
   805  00003D                     ??_eval_poly:
   806                           
   807                           ; 1 bytes @ 0x3C
   808  00003D                     	ds	2
   809  00003F                     ___fttol@sign1:
   810                           	opt stack 0
   811  00003F                     eval_poly@res:
   812                           	opt stack 0
   813                           
   814                           ; 3 bytes @ 0x3E
   815  00003F                     	ds	1
   816  000040                     ___fttol@lval:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x3F
   820  000040                     	ds	2
   821  000042                     ?_atan:
   822                           	opt stack 0
   823  000042                     atan@f:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x41
   827  000042                     	ds	2
   828  000044                     ___fttol@exp1:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x43
   832  000044                     	ds	1
   833  000045                     delayMs@ms:
   834                           	opt stack 0
   835  000045                     atan@y:
   836                           	opt stack 0
   837                           
   838                           ; 3 bytes @ 0x44
   839  000045                     	ds	2
   840  000047                     ??_delayMs:
   841                           
   842                           ; 1 bytes @ 0x46
   843  000047                     	ds	1
   844  000048                     atan@x:
   845                           	opt stack 0
   846                           
   847                           ; 3 bytes @ 0x47
   848  000048                     	ds	2
   849  00004A                     delayMs@debug:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x49
   853  00004A                     	ds	1
   854  00004B                     atan@recip:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x4A
   858  00004B                     	ds	1
   859  00004C                     delayMs@end_count:
   860                           	opt stack 0
   861  00004C                     atan@val_squared:
   862                           	opt stack 0
   863                           
   864                           ; 3 bytes @ 0x4B
   865  00004C                     	ds	2
   866  00004E                     ?_readWaterSensor:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x4D
   870  00004E                     	ds	1
   871  00004F                     atan@val:
   872                           	opt stack 0
   873                           
   874                           ; 3 bytes @ 0x4E
   875  00004F                     	ds	1
   876  000050                     ??_readWaterSensor:
   877                           
   878                           ; 1 bytes @ 0x4F
   879  000050                     	ds	2
   880  000052                     ?_atan2:
   881                           	opt stack 0
   882  000052                     atan2@y:
   883                           	opt stack 0
   884                           
   885                           ; 3 bytes @ 0x51
   886  000052                     	ds	1
   887  000053                     readWaterSensor@varToSee:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x52
   891  000053                     	ds	2
   892  000055                     readWaterSensor@WaterPresent:
   893                           	opt stack 0
   894  000055                     atan2@x:
   895                           	opt stack 0
   896                           
   897                           ; 3 bytes @ 0x54
   898  000055                     	ds	3
   899  000058                     ?_getHandleAngle:
   900                           	opt stack 0
   901                           
   902                           ; 3 bytes @ 0x57
   903  000058                     	ds	3
   904  00005B                     ??_getHandleAngle:
   905                           
   906                           ; 1 bytes @ 0x5A
   907  00005B                     	ds	2
   908  00005D                     tblptru	equ	0xFF8
   909                           tblptrh	equ	0xFF7
   910                           tblptrl	equ	0xFF6
   911                           tablat	equ	0xFF5
   912                           postinc0	equ	0xFEE
   913                           wreg	equ	0xFE8
   914                           postdec1	equ	0xFE5
   915                           fsr1l	equ	0xFE1
   916                           
   917                           ; 1 bytes @ 0x5C
   918 ;;
   919 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   920 ;;
   921 ;; *************** function _main *****************
   922 ;; Defined at:
   923 ;;		line 753 in file "Main.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;		None
   926 ;; Auto vars:     Size  Location     Type
   927 ;;  deltaAngle      3   69[BANK0 ] float 
   928 ;;  newAngle        3   58[BANK0 ] float 
   929 ;;  EEPromFloatD    3   55[BANK0 ] float 
   930 ;;  anglePreviou    3   61[BANK0 ] float 
   931 ;;  angleDelta      3   52[BANK0 ] float 
   932 ;;  angleCurrent    3   49[BANK0 ] float 
   933 ;;  adcVoltage      3   46[BANK0 ] float 
   934 ;;  readWater       2   67[BANK0 ] int 
   935 ;;  handleMoveme    2   64[BANK0 ] int 
   936 ;;  EEPROMdata      1   66[BANK0 ] unsigned char 
   937 ;; Return value:  Size  Location     Type
   938 ;;                  1    wreg      void 
   939 ;; Registers used:
   940 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   941 ;; Tracked objects:
   942 ;;		On entry : 0/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   947 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   949 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   950 ;;Total ram usage:       26 bytes
   951 ;; Hardware stack levels required when called:    6
   952 ;; This function calls:
   953 ;;		_ClearWatchDogTimer
   954 ;;		___ftadd
   955 ;;		___ftge
   956 ;;		___ftmul
   957 ;;		___ftneg
   958 ;;		_delayMs
   959 ;;		_getHandleAngle
   960 ;;		_initialization
   961 ;;		_readEEPromFloat
   962 ;;		_readSPI
   963 ;;		_readWaterSensor
   964 ;;		_writeEEPromFloat
   965 ;;		_writeSPI
   966 ;; This function is called by:
   967 ;;		Startup code after reset
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           	psect	text0
   972  0012C6                     __ptext0:
   973                           	opt stack 0
   974  0012C6                     _main:
   975                           	opt stack 25
   976                           
   977                           ;Main.c: 754: initialization();
   978                           
   979                           ;incstack = 0
   980  0012C6  EC52  F013         	call	_initialization	;wreg free
   981                           
   982                           ;Main.c: 757: char EEPROMdata = 0;
   983  0012CA  0E00               	movlw	0
   984  0012CC  0100               	movlb	0	; () banked
   985  0012CE  6FA2               	movwf	main@EEPROMdata& (0+255),b
   986                           
   987                           ; BSR set to: 0
   988                           ;Main.c: 759: TRISBbits.TRISB3 = 0;
   989  0012D0  9689               	bcf	3977,3,c	;volatile
   990                           
   991                           ; BSR set to: 0
   992                           ;Main.c: 760: TRISBbits.TRISB4 = 0;
   993  0012D2  9889               	bcf	3977,4,c	;volatile
   994  0012D4                     
   995                           ;Main.c: 763: float EEPromFloatData = 0;
   996                           
   997                           ; BSR set to: 0
   998  0012D4  0E00               	movlw	0
   999  0012D6  0100               	movlb	0	; () banked
  1000  0012D8  6F97               	movwf	main@EEPromFloatData& (0+255),b
  1001  0012DA  0E00               	movlw	0
  1002  0012DC  6F98               	movwf	(main@EEPromFloatData+1)& (0+255),b
  1003  0012DE  0E00               	movlw	0
  1004  0012E0  6F99               	movwf	(main@EEPromFloatData+2)& (0+255),b
  1005                           
  1006                           ; BSR set to: 0
  1007                           ;Main.c: 765: writeSPI(0, 0x100);
  1008  0012E2  0E00               	movlw	0
  1009  0012E4  6E02               	movwf	writeSPI@output_data+1,c
  1010  0012E6  0E00               	movlw	0
  1011  0012E8  6E01               	movwf	writeSPI@output_data,c
  1012  0012EA  0E00               	movlw	0
  1013  0012EC  6E03               	movwf	writeSPI@EEaddress,c
  1014  0012EE  0E01               	movlw	1
  1015  0012F0  6E04               	movwf	writeSPI@EEaddress+1,c
  1016  0012F2  0E00               	movlw	0
  1017  0012F4  6E05               	movwf	writeSPI@EEaddress+2,c
  1018  0012F6  EC71  F011         	call	_writeSPI	;wreg free
  1019                           
  1020                           ;Main.c: 766: writeSPI(0xaa, 0x101);
  1021  0012FA  0E00               	movlw	0
  1022  0012FC  6E02               	movwf	writeSPI@output_data+1,c
  1023  0012FE  0EAA               	movlw	170
  1024  001300  6E01               	movwf	writeSPI@output_data,c
  1025  001302  0E01               	movlw	1
  1026  001304  6E03               	movwf	writeSPI@EEaddress,c
  1027  001306  0E01               	movlw	1
  1028  001308  6E04               	movwf	writeSPI@EEaddress+1,c
  1029  00130A  0E00               	movlw	0
  1030  00130C  6E05               	movwf	writeSPI@EEaddress+2,c
  1031  00130E  EC71  F011         	call	_writeSPI	;wreg free
  1032                           
  1033                           ;Main.c: 767: writeSPI(0x55, 0x102);
  1034  001312  0E00               	movlw	0
  1035  001314  6E02               	movwf	writeSPI@output_data+1,c
  1036  001316  0E55               	movlw	85
  1037  001318  6E01               	movwf	writeSPI@output_data,c
  1038  00131A  0E02               	movlw	2
  1039  00131C  6E03               	movwf	writeSPI@EEaddress,c
  1040  00131E  0E01               	movlw	1
  1041  001320  6E04               	movwf	writeSPI@EEaddress+1,c
  1042  001322  0E00               	movlw	0
  1043  001324  6E05               	movwf	writeSPI@EEaddress+2,c
  1044  001326  EC71  F011         	call	_writeSPI	;wreg free
  1045                           
  1046                           ;Main.c: 768: writeSPI(0x11, 0x103);
  1047  00132A  0E00               	movlw	0
  1048  00132C  6E02               	movwf	writeSPI@output_data+1,c
  1049  00132E  0E11               	movlw	17
  1050  001330  6E01               	movwf	writeSPI@output_data,c
  1051  001332  0E03               	movlw	3
  1052  001334  6E03               	movwf	writeSPI@EEaddress,c
  1053  001336  0E01               	movlw	1
  1054  001338  6E04               	movwf	writeSPI@EEaddress+1,c
  1055  00133A  0E00               	movlw	0
  1056  00133C  6E05               	movwf	writeSPI@EEaddress+2,c
  1057  00133E  EC71  F011         	call	_writeSPI	;wreg free
  1058                           
  1059                           ;Main.c: 769: writeSPI(0x33, 0x104);
  1060  001342  0E00               	movlw	0
  1061  001344  6E02               	movwf	writeSPI@output_data+1,c
  1062  001346  0E33               	movlw	51
  1063  001348  6E01               	movwf	writeSPI@output_data,c
  1064  00134A  0E04               	movlw	4
  1065  00134C  6E03               	movwf	writeSPI@EEaddress,c
  1066  00134E  0E01               	movlw	1
  1067  001350  6E04               	movwf	writeSPI@EEaddress+1,c
  1068  001352  0E00               	movlw	0
  1069  001354  6E05               	movwf	writeSPI@EEaddress+2,c
  1070  001356  EC71  F011         	call	_writeSPI	;wreg free
  1071                           
  1072                           ;Main.c: 771: EEPROMdata = 0x70;
  1073  00135A  0E70               	movlw	112
  1074  00135C  0100               	movlb	0	; () banked
  1075  00135E  6FA2               	movwf	main@EEPROMdata& (0+255),b
  1076                           
  1077                           ; BSR set to: 0
  1078                           ;Main.c: 773: EEPROMdata = readSPI(0, 0x103);
  1079  001360  0E00               	movlw	0
  1080  001362  6E02               	movwf	readSPI@dummy+1,c
  1081  001364  0E00               	movlw	0
  1082  001366  6E01               	movwf	readSPI@dummy,c
  1083  001368  0E03               	movlw	3
  1084  00136A  6E03               	movwf	readSPI@EEaddress,c
  1085  00136C  0E01               	movlw	1
  1086  00136E  6E04               	movwf	readSPI@EEaddress+1,c
  1087  001370  0E00               	movlw	0
  1088  001372  6E05               	movwf	readSPI@EEaddress+2,c
  1089  001374  EC15  F013         	call	_readSPI	;wreg free
  1090  001378  0100               	movlb	0	; () banked
  1091  00137A  6FA2               	movwf	main@EEPROMdata& (0+255),b
  1092                           
  1093                           ; BSR set to: 0
  1094                           ;Main.c: 774: EEPROMdata = readSPI(0, 0x101);
  1095  00137C  0E00               	movlw	0
  1096  00137E  6E02               	movwf	readSPI@dummy+1,c
  1097  001380  0E00               	movlw	0
  1098  001382  6E01               	movwf	readSPI@dummy,c
  1099  001384  0E01               	movlw	1
  1100  001386  6E03               	movwf	readSPI@EEaddress,c
  1101  001388  0E01               	movlw	1
  1102  00138A  6E04               	movwf	readSPI@EEaddress+1,c
  1103  00138C  0E00               	movlw	0
  1104  00138E  6E05               	movwf	readSPI@EEaddress+2,c
  1105  001390  EC15  F013         	call	_readSPI	;wreg free
  1106  001394  0100               	movlb	0	; () banked
  1107  001396  6FA2               	movwf	main@EEPROMdata& (0+255),b
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;Main.c: 775: EEPROMdata = readSPI(0, 0x100);
  1111  001398  0E00               	movlw	0
  1112  00139A  6E02               	movwf	readSPI@dummy+1,c
  1113  00139C  0E00               	movlw	0
  1114  00139E  6E01               	movwf	readSPI@dummy,c
  1115  0013A0  0E00               	movlw	0
  1116  0013A2  6E03               	movwf	readSPI@EEaddress,c
  1117  0013A4  0E01               	movlw	1
  1118  0013A6  6E04               	movwf	readSPI@EEaddress+1,c
  1119  0013A8  0E00               	movlw	0
  1120  0013AA  6E05               	movwf	readSPI@EEaddress+2,c
  1121  0013AC  EC15  F013         	call	_readSPI	;wreg free
  1122  0013B0  0100               	movlb	0	; () banked
  1123  0013B2  6FA2               	movwf	main@EEPROMdata& (0+255),b
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;Main.c: 776: EEPROMdata = readSPI(0, 0x102);
  1127  0013B4  0E00               	movlw	0
  1128  0013B6  6E02               	movwf	readSPI@dummy+1,c
  1129  0013B8  0E00               	movlw	0
  1130  0013BA  6E01               	movwf	readSPI@dummy,c
  1131  0013BC  0E02               	movlw	2
  1132  0013BE  6E03               	movwf	readSPI@EEaddress,c
  1133  0013C0  0E01               	movlw	1
  1134  0013C2  6E04               	movwf	readSPI@EEaddress+1,c
  1135  0013C4  0E00               	movlw	0
  1136  0013C6  6E05               	movwf	readSPI@EEaddress+2,c
  1137  0013C8  EC15  F013         	call	_readSPI	;wreg free
  1138  0013CC  0100               	movlb	0	; () banked
  1139  0013CE  6FA2               	movwf	main@EEPROMdata& (0+255),b
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;Main.c: 777: EEPROMdata = readSPI(0, 0x104);
  1143  0013D0  0E00               	movlw	0
  1144  0013D2  6E02               	movwf	readSPI@dummy+1,c
  1145  0013D4  0E00               	movlw	0
  1146  0013D6  6E01               	movwf	readSPI@dummy,c
  1147  0013D8  0E04               	movlw	4
  1148  0013DA  6E03               	movwf	readSPI@EEaddress,c
  1149  0013DC  0E01               	movlw	1
  1150  0013DE  6E04               	movwf	readSPI@EEaddress+1,c
  1151  0013E0  0E00               	movlw	0
  1152  0013E2  6E05               	movwf	readSPI@EEaddress+2,c
  1153  0013E4  EC15  F013         	call	_readSPI	;wreg free
  1154  0013E8  0100               	movlb	0	; () banked
  1155  0013EA  6FA2               	movwf	main@EEPROMdata& (0+255),b
  1156                           
  1157                           ; BSR set to: 0
  1158                           ;Main.c: 779: writeEEPromFloat(12.345, 0x1000);
  1159  0013EC  0E85               	movlw	133
  1160  0013EE  6E0E               	movwf	writeEEPromFloat@output_data,c
  1161  0013F0  0E45               	movlw	69
  1162  0013F2  6E0F               	movwf	writeEEPromFloat@output_data+1,c
  1163  0013F4  0E41               	movlw	65
  1164  0013F6  6E10               	movwf	writeEEPromFloat@output_data+2,c
  1165  0013F8  0E00               	movlw	0
  1166  0013FA  6E11               	movwf	writeEEPromFloat@EEaddress,c
  1167  0013FC  0E10               	movlw	16
  1168  0013FE  6E12               	movwf	writeEEPromFloat@EEaddress+1,c
  1169  001400  0E00               	movlw	0
  1170  001402  6E13               	movwf	writeEEPromFloat@EEaddress+2,c
  1171  001404  EC31  F012         	call	_writeEEPromFloat	;wreg free
  1172                           
  1173                           ;Main.c: 780: writeEEPromFloat(12.34567, 0x1200);
  1174  001408  0E88               	movlw	136
  1175  00140A  6E0E               	movwf	writeEEPromFloat@output_data,c
  1176  00140C  0E45               	movlw	69
  1177  00140E  6E0F               	movwf	writeEEPromFloat@output_data+1,c
  1178  001410  0E41               	movlw	65
  1179  001412  6E10               	movwf	writeEEPromFloat@output_data+2,c
  1180  001414  0E00               	movlw	0
  1181  001416  6E11               	movwf	writeEEPromFloat@EEaddress,c
  1182  001418  0E12               	movlw	18
  1183  00141A  6E12               	movwf	writeEEPromFloat@EEaddress+1,c
  1184  00141C  0E00               	movlw	0
  1185  00141E  6E13               	movwf	writeEEPromFloat@EEaddress+2,c
  1186  001420  EC31  F012         	call	_writeEEPromFloat	;wreg free
  1187                           
  1188                           ;Main.c: 781: writeEEPromFloat(1234.56, 0x1100);
  1189  001424  0E52               	movlw	82
  1190  001426  6E0E               	movwf	writeEEPromFloat@output_data,c
  1191  001428  0E9A               	movlw	154
  1192  00142A  6E0F               	movwf	writeEEPromFloat@output_data+1,c
  1193  00142C  0E44               	movlw	68
  1194  00142E  6E10               	movwf	writeEEPromFloat@output_data+2,c
  1195  001430  0E00               	movlw	0
  1196  001432  6E11               	movwf	writeEEPromFloat@EEaddress,c
  1197  001434  0E11               	movlw	17
  1198  001436  6E12               	movwf	writeEEPromFloat@EEaddress+1,c
  1199  001438  0E00               	movlw	0
  1200  00143A  6E13               	movwf	writeEEPromFloat@EEaddress+2,c
  1201  00143C  EC31  F012         	call	_writeEEPromFloat	;wreg free
  1202                           
  1203                           ;Main.c: 783: EEPromFloatData = readEEPromFloat(0x1200);
  1204  001440  0E00               	movlw	0
  1205  001442  6E0D               	movwf	readEEPromFloat@EEaddress,c
  1206  001444  0E12               	movlw	18
  1207  001446  6E0E               	movwf	readEEPromFloat@EEaddress+1,c
  1208  001448  0E00               	movlw	0
  1209  00144A  6E0F               	movwf	readEEPromFloat@EEaddress+2,c
  1210  00144C  EC94  F010         	call	_readEEPromFloat	;wreg free
  1211  001450  C00D  F097         	movff	?_readEEPromFloat,main@EEPromFloatData
  1212  001454  C00E  F098         	movff	?_readEEPromFloat+1,main@EEPromFloatData+1
  1213  001458  C00F  F099         	movff	?_readEEPromFloat+2,main@EEPromFloatData+2
  1214                           
  1215                           ;Main.c: 784: EEPromFloatData = readEEPromFloat(0x1000);
  1216  00145C  0E00               	movlw	0
  1217  00145E  6E0D               	movwf	readEEPromFloat@EEaddress,c
  1218  001460  0E10               	movlw	16
  1219  001462  6E0E               	movwf	readEEPromFloat@EEaddress+1,c
  1220  001464  0E00               	movlw	0
  1221  001466  6E0F               	movwf	readEEPromFloat@EEaddress+2,c
  1222  001468  EC94  F010         	call	_readEEPromFloat	;wreg free
  1223  00146C  C00D  F097         	movff	?_readEEPromFloat,main@EEPromFloatData
  1224  001470  C00E  F098         	movff	?_readEEPromFloat+1,main@EEPromFloatData+1
  1225  001474  C00F  F099         	movff	?_readEEPromFloat+2,main@EEPromFloatData+2
  1226                           
  1227                           ;Main.c: 785: EEPromFloatData = readEEPromFloat(0x1100);
  1228  001478  0E00               	movlw	0
  1229  00147A  6E0D               	movwf	readEEPromFloat@EEaddress,c
  1230  00147C  0E11               	movlw	17
  1231  00147E  6E0E               	movwf	readEEPromFloat@EEaddress+1,c
  1232  001480  0E00               	movlw	0
  1233  001482  6E0F               	movwf	readEEPromFloat@EEaddress+2,c
  1234  001484  EC94  F010         	call	_readEEPromFloat	;wreg free
  1235  001488  C00D  F097         	movff	?_readEEPromFloat,main@EEPromFloatData
  1236  00148C  C00E  F098         	movff	?_readEEPromFloat+1,main@EEPromFloatData+1
  1237  001490  C00F  F099         	movff	?_readEEPromFloat+2,main@EEPromFloatData+2
  1238  001494  D71F               	goto	l254
  1239  001496                     
  1240                           ; BSR set to: 0
  1241                           ;Main.c: 812: {
  1242                           ;Main.c: 814: anglePrevious = getHandleAngle();
  1243                           
  1244                           ; BSR set to: 0
  1245  001496  EC9B  F007         	call	_getHandleAngle	;wreg free
  1246  00149A  C058  F09D         	movff	?_getHandleAngle,main@anglePrevious
  1247  00149E  C059  F09E         	movff	?_getHandleAngle+1,main@anglePrevious+1
  1248  0014A2  C05A  F09F         	movff	?_getHandleAngle+2,main@anglePrevious+2
  1249                           
  1250                           ;Main.c: 818: handleMovement = 0;
  1251  0014A6  0E00               	movlw	0
  1252  0014A8  0100               	movlb	0	; () banked
  1253  0014AA  6FA1               	movwf	(main@handleMovement+1)& (0+255),b
  1254  0014AC  0E00               	movlw	0
  1255  0014AE  6FA0               	movwf	main@handleMovement& (0+255),b
  1256                           
  1257                           ;Main.c: 819: while (handleMovement == 0)
  1258  0014B0  D080               	goto	l265
  1259  0014B2                     
  1260                           ; BSR set to: 0
  1261                           ;Main.c: 820: {
  1262                           ;Main.c: 821: ClearWatchDogTimer();
  1263                           
  1264                           ; BSR set to: 0
  1265  0014B2  EC63  F014         	call	_ClearWatchDogTimer	;wreg free
  1266                           
  1267                           ;Main.c: 822: TimeSinceLastHourCheck++;
  1268  0014B6  0100               	movlb	0	; () banked
  1269  0014B8  4BCA               	infsnz	_TimeSinceLastHourCheck& (0+255),f,b
  1270  0014BA  2BCB               	incf	(_TimeSinceLastHourCheck+1)& (0+255),f,b
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;Main.c: 823: if(TimeSinceLastHourCheck > 5000){
  1274  0014BC  BFCB               	btfsc	(_TimeSinceLastHourCheck+1)& (0+255),7,b
  1275  0014BE  D00A               	goto	l260
  1276  0014C0  0E89               	movlw	137
  1277  0014C2  5DCA               	subwf	_TimeSinceLastHourCheck& (0+255),w,b
  1278  0014C4  0E13               	movlw	19
  1279  0014C6  59CB               	subwfb	(_TimeSinceLastHourCheck+1)& (0+255),w,b
  1280  0014C8  A0D8               	btfss	status,0,c
  1281  0014CA  D004               	goto	l260
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;Main.c: 825: TimeSinceLastHourCheck = 0;
  1285  0014CC  0E00               	movlw	0
  1286  0014CE  6FCB               	movwf	(_TimeSinceLastHourCheck+1)& (0+255),b
  1287  0014D0  0E00               	movlw	0
  1288  0014D2  6FCA               	movwf	_TimeSinceLastHourCheck& (0+255),b
  1289  0014D4                     l260:
  1290                           
  1291                           ; BSR set to: 0
  1292                           ;Main.c: 826: }
  1293                           ;Main.c: 827: delayMs(upstrokeInterval);
  1294                           
  1295                           ; BSR set to: 0
  1296  0014D4  0E0C               	movlw	low _upstrokeInterval
  1297  0014D6  6EF6               	movwf	tblptrl,c
  1298  0014D8                     	if	1	;There is more than 1 active tblptr byte
  1299  0014D8  0E0F               	movlw	high _upstrokeInterval
  1300  0014DA  6EF7               	movwf	tblptrh,c
  1301  0014DC                     	endif
  1302  0014DC                     	if	1	;There are 3 active tblptr bytes
  1303  0014DC  0E00               	movlw	low (_upstrokeInterval shr (0+16))
  1304  0014DE  6EF8               	movwf	tblptru,c
  1305  0014E0                     	endif
  1306  0014E0  0009               	tblrd		*+
  1307  0014E2  CFF5 F045          	movff	tablat,delayMs@ms
  1308  0014E6  000A               	tblrd		*-
  1309  0014E8  CFF5 F046          	movff	tablat,delayMs@ms+1
  1310  0014EC  EC83  F012         	call	_delayMs	;wreg free
  1311                           
  1312                           ;Main.c: 828: float newAngle = getHandleAngle();
  1313  0014F0  EC9B  F007         	call	_getHandleAngle	;wreg free
  1314  0014F4  C058  F09A         	movff	?_getHandleAngle,main@newAngle
  1315  0014F8  C059  F09B         	movff	?_getHandleAngle+1,main@newAngle+1
  1316  0014FC  C05A  F09C         	movff	?_getHandleAngle+2,main@newAngle+2
  1317                           
  1318                           ;Main.c: 829: float deltaAngle = newAngle - anglePrevious;
  1319  001500  C09D  F009         	movff	main@anglePrevious,___ftneg@f1
  1320  001504  C09E  F00A         	movff	main@anglePrevious+1,___ftneg@f1+1
  1321  001508  C09F  F00B         	movff	main@anglePrevious+2,___ftneg@f1+2
  1322  00150C  EC3C  F014         	call	___ftneg	;wreg free
  1323  001510  C009  F00C         	movff	?___ftneg,___ftadd@f1
  1324  001514  C00A  F00D         	movff	?___ftneg+1,___ftadd@f1+1
  1325  001518  C00B  F00E         	movff	?___ftneg+2,___ftadd@f1+2
  1326  00151C  C09A  F00F         	movff	main@newAngle,___ftadd@f2
  1327  001520  C09B  F010         	movff	main@newAngle+1,___ftadd@f2+1
  1328  001524  C09C  F011         	movff	main@newAngle+2,___ftadd@f2+2
  1329  001528  ECFE  F00C         	call	___ftadd	;wreg free
  1330  00152C  C00C  F0A5         	movff	?___ftadd,main@deltaAngle
  1331  001530  C00D  F0A6         	movff	?___ftadd+1,main@deltaAngle+1
  1332  001534  C00E  F0A7         	movff	?___ftadd+2,main@deltaAngle+2
  1333                           
  1334                           ;Main.c: 830: if(deltaAngle < 0) {
  1335  001538  0100               	movlb	0	; () banked
  1336  00153A  AFA7               	btfss	(main@deltaAngle+2)& (0+255),7,b
  1337  00153C  D014               	goto	l261
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;Main.c: 831: deltaAngle *= -1;
  1341  00153E  C0A5  F027         	movff	main@deltaAngle,___ftmul@f1
  1342  001542  C0A6  F028         	movff	main@deltaAngle+1,___ftmul@f1+1
  1343  001546  C0A7  F029         	movff	main@deltaAngle+2,___ftmul@f1+2
  1344  00154A  0E00               	movlw	0
  1345  00154C  6E2A               	movwf	___ftmul@f2,c
  1346  00154E  0E80               	movlw	128
  1347  001550  6E2B               	movwf	___ftmul@f2+1,c
  1348  001552  0EBF               	movlw	191
  1349  001554  6E2C               	movwf	___ftmul@f2+2,c
  1350  001556  ECA7  F00F         	call	___ftmul	;wreg free
  1351  00155A  C027  F0A5         	movff	?___ftmul,main@deltaAngle
  1352  00155E  C028  F0A6         	movff	?___ftmul+1,main@deltaAngle+1
  1353  001562  C029  F0A7         	movff	?___ftmul+2,main@deltaAngle+2
  1354  001566                     l261:
  1355                           
  1356                           ;Main.c: 832: }
  1357                           ;Main.c: 834: if(deltaAngle > handleMovementThreshold){
  1358  001566  0E01               	movlw	low _handleMovementThreshold
  1359  001568  6EF6               	movwf	tblptrl,c
  1360  00156A                     	if	1	;There is more than 1 active tblptr byte
  1361  00156A  0E0F               	movlw	high _handleMovementThreshold
  1362  00156C  6EF7               	movwf	tblptrh,c
  1363  00156E                     	endif
  1364  00156E                     	if	1	;There are 3 active tblptr bytes
  1365  00156E  0E00               	movlw	low (_handleMovementThreshold shr (0+16))
  1366  001570  6EF8               	movwf	tblptru,c
  1367  001572                     	endif
  1368  001572  0009               	tblrd		*+
  1369  001574  CFF5 F00F          	movff	tablat,___ftge@ff1
  1370  001578  0009               	tblrd		*+
  1371  00157A  CFF5 F010          	movff	tablat,___ftge@ff1+1
  1372  00157E  000A               	tblrd		*-
  1373  001580  CFF5 F011          	movff	tablat,___ftge@ff1+2
  1374  001584  C0A5  F012         	movff	main@deltaAngle,___ftge@ff2
  1375  001588  C0A6  F013         	movff	main@deltaAngle+1,___ftge@ff2+1
  1376  00158C  C0A7  F014         	movff	main@deltaAngle+2,___ftge@ff2+2
  1377  001590  ECCD  F012         	call	___ftge	;wreg free
  1378  001594  B0D8               	btfsc	status,0,c
  1379  001596  D007               	goto	l262
  1380                           
  1381                           ;Main.c: 835: handleMovement = 1;
  1382  001598  0E00               	movlw	0
  1383  00159A  0100               	movlb	0	; () banked
  1384  00159C  6FA1               	movwf	(main@handleMovement+1)& (0+255),b
  1385  00159E  0E01               	movlw	1
  1386  0015A0  6FA0               	movwf	main@handleMovement& (0+255),b
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;Main.c: 836: PORTBbits.RB3 = 1;
  1390  0015A2  868E               	bsf	3982,3,c	;volatile
  1391  0015A4  D002               	goto	L3
  1392  0015A6                     l262:
  1393                           
  1394                           ;Main.c: 841: PORTBbits.RB3 = 0;
  1395  0015A6  968E               	bcf	3982,3,c	;volatile
  1396                           
  1397                           ;Main.c: 842: if (readWater == 0) {
  1398  0015A8  0100               	movlb	0	; () banked
  1399  0015AA                     L3:
  1400  0015AA  51A3               	movf	main@readWater& (0+255),w,b
  1401  0015AC  11A4               	iorwf	(main@readWater+1)& (0+255),w,b
  1402  0015AE  B4D8               	btfsc	status,2,c
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;Main.c: 843: PORTBbits.RB4 = 0;
  1406  0015B0  988E               	bcf	3982,4,c	;volatile
  1407  0015B2                     l265:
  1408                           
  1409                           ; BSR set to: 0
  1410                           
  1411                           ; BSR set to: 0
  1412                           
  1413                           ; BSR set to: 0
  1414                           
  1415                           ; BSR set to: 0
  1416  0015B2  51A0               	movf	main@handleMovement& (0+255),w,b
  1417  0015B4  11A1               	iorwf	(main@handleMovement+1)& (0+255),w,b
  1418  0015B6  B4D8               	btfsc	status,2,c
  1419  0015B8  D77C               	goto	l259
  1420                           
  1421                           ; BSR set to: 0
  1422                           ;Main.c: 844: }
  1423                           ;Main.c: 847: }
  1424                           ;Main.c: 848: }
  1425                           ;Main.c: 851: if (readWaterSensor()) {
  1426                           
  1427                           ; BSR set to: 0
  1428  0015BA  EC8E  F00E         	call	_readWaterSensor	;wreg free
  1429  0015BE  504E               	movf	?_readWaterSensor,w,c
  1430  0015C0  104F               	iorwf	?_readWaterSensor+1,w,c
  1431  0015C2  B4D8               	btfsc	status,2,c
  1432  0015C4  D007               	goto	l267
  1433                           
  1434                           ;Main.c: 852: readWater = 1;
  1435  0015C6  0E00               	movlw	0
  1436  0015C8  0100               	movlb	0	; () banked
  1437  0015CA  6FA4               	movwf	(main@readWater+1)& (0+255),b
  1438  0015CC  0E01               	movlw	1
  1439  0015CE  6FA3               	movwf	main@readWater& (0+255),b
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;Main.c: 853: PORTBbits.RB4 = 1;
  1443  0015D0  888E               	bsf	3982,4,c	;volatile
  1444                           
  1445                           ;Main.c: 854: }
  1446  0015D2  D761               	goto	l257
  1447  0015D4                     l267:
  1448                           
  1449                           ;Main.c: 855: else {
  1450                           ;Main.c: 856: readWater = 0;
  1451                           
  1452                           ; BSR set to: 0
  1453  0015D4  0E00               	movlw	0
  1454  0015D6  0100               	movlb	0	; () banked
  1455  0015D8  6FA4               	movwf	(main@readWater+1)& (0+255),b
  1456  0015DA  0E00               	movlw	0
  1457  0015DC  6FA3               	movwf	main@readWater& (0+255),b
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;Main.c: 857: PORTBbits.RB4 = 0;
  1461  0015DE  988E               	bcf	3982,4,c	;volatile
  1462                           
  1463                           ; BSR set to: 0
  1464                           
  1465                           ; BSR set to: 0
  1466  0015E0  D75A               	goto	l257
  1467  0015E2                     __end_of_main:
  1468                           	opt stack 0
  1469                           tblptru	equ	0xFF8
  1470                           tblptrh	equ	0xFF7
  1471                           tblptrl	equ	0xFF6
  1472                           tablat	equ	0xFF5
  1473                           postinc0	equ	0xFEE
  1474                           wreg	equ	0xFE8
  1475                           postdec1	equ	0xFE5
  1476                           fsr1l	equ	0xFE1
  1477                           status	equ	0xFD8
  1478                           
  1479 ;; *************** function _writeEEPromFloat *****************
  1480 ;; Defined at:
  1481 ;;		line 270 in file "Main.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;  output_data     3   13[COMRAM] float 
  1484 ;;  EEaddress       3   16[COMRAM] unsigned um
  1485 ;; Auto vars:     Size  Location     Type
  1486 ;;  Data0           2   28[COMRAM] unsigned int 
  1487 ;;  Data1           2   26[COMRAM] unsigned int 
  1488 ;;  Data2           2   24[COMRAM] unsigned int 
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  1    wreg      void 
  1491 ;; Registers used:
  1492 ;;		wreg, status,2, status,0, cstack
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1498 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1499 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1500 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1501 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1502 ;;Total ram usage:       17 bytes
  1503 ;; Hardware stack levels used:    1
  1504 ;; Hardware stack levels required when called:    1
  1505 ;; This function calls:
  1506 ;;		_writeSPI
  1507 ;; This function is called by:
  1508 ;;		_main
  1509 ;; This function uses a non-reentrant model
  1510 ;;
  1511                           
  1512                           	psect	text1
  1513  002462                     __ptext1:
  1514                           	opt stack 0
  1515  002462                     _writeEEPromFloat:
  1516                           	opt stack 29
  1517                           
  1518                           ;Main.c: 272: EEPromData.F_data = output_data;
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;incstack = 0
  1522  002462  C00E  F05D         	movff	writeEEPromFloat@output_data,_EEPromData
  1523  002466  C00F  F05E         	movff	writeEEPromFloat@output_data+1,_EEPromData+1
  1524  00246A  C010  F05F         	movff	writeEEPromFloat@output_data+2,_EEPromData+2
  1525                           
  1526                           ;Main.c: 273: unsigned int Data2 = (EEPromData.L_data >> 16)& 0xff;
  1527  00246E  0E10               	movlw	16
  1528  002470  6E14               	movwf	??_writeEEPromFloat& (0+255),c
  1529  002472  C05D  F015         	movff	_EEPromData,??_writeEEPromFloat+1
  1530  002476  C05E  F016         	movff	_EEPromData+1,??_writeEEPromFloat+2
  1531  00247A  C05F  F017         	movff	_EEPromData+2,??_writeEEPromFloat+3
  1532  00247E  2814               	incf	??_writeEEPromFloat,w,c
  1533  002480  6E18               	movwf	(??_writeEEPromFloat+4)& (0+255),c
  1534  002482  D004               	goto	u2840
  1535  002484                     u2845:
  1536  002484  3417               	rlcf	??_writeEEPromFloat+3,w,c
  1537  002486  3217               	rrcf	??_writeEEPromFloat+3,f,c
  1538  002488  3216               	rrcf	??_writeEEPromFloat+2,f,c
  1539  00248A  3215               	rrcf	??_writeEEPromFloat+1,f,c
  1540  00248C                     u2840:
  1541  00248C  2E18               	decfsz	(??_writeEEPromFloat+4)& (0+255),f,c
  1542  00248E  D7FA               	goto	u2845
  1543  002490  5015               	movf	??_writeEEPromFloat+1,w,c
  1544  002492  6E19               	movwf	writeEEPromFloat@Data2,c
  1545  002494  6A1A               	clrf	writeEEPromFloat@Data2+1,c
  1546                           
  1547                           ;Main.c: 274: unsigned int Data1 = (EEPromData.L_data >> 8)& 0xff;
  1548  002496  C05E  F014         	movff	_EEPromData+1,??_writeEEPromFloat
  1549  00249A  C05F  F015         	movff	_EEPromData+2,??_writeEEPromFloat+1
  1550  00249E  6A16               	clrf	(??_writeEEPromFloat+2)& (0+255),c
  1551  0024A0  BE15               	btfsc	(??_writeEEPromFloat+1)& (0+255),7,c
  1552  0024A2  6817               	setf	(??_writeEEPromFloat+3)& (0+255),c
  1553  0024A4  5014               	movf	??_writeEEPromFloat,w,c
  1554  0024A6  6E1B               	movwf	writeEEPromFloat@Data1,c
  1555  0024A8  6A1C               	clrf	writeEEPromFloat@Data1+1,c
  1556                           
  1557                           ;Main.c: 275: unsigned int Data0 = EEPromData.L_data & 0xff;
  1558  0024AA  505D               	movf	_EEPromData,w,c
  1559  0024AC  6E1D               	movwf	writeEEPromFloat@Data0,c
  1560  0024AE  6A1E               	clrf	writeEEPromFloat@Data0+1,c
  1561                           
  1562                           ;Main.c: 278: writeSPI(Data0, EEaddress);
  1563  0024B0  C01D  F001         	movff	writeEEPromFloat@Data0,writeSPI@output_data
  1564  0024B4  C01E  F002         	movff	writeEEPromFloat@Data0+1,writeSPI@output_data+1
  1565  0024B8  C011  F003         	movff	writeEEPromFloat@EEaddress,writeSPI@EEaddress
  1566  0024BC  C012  F004         	movff	writeEEPromFloat@EEaddress+1,writeSPI@EEaddress+1
  1567  0024C0  C013  F005         	movff	writeEEPromFloat@EEaddress+2,writeSPI@EEaddress+2
  1568  0024C4  EC71  F011         	call	_writeSPI	;wreg free
  1569                           
  1570                           ;Main.c: 279: writeSPI(Data1, EEaddress + 1);
  1571  0024C8  C01B  F001         	movff	writeEEPromFloat@Data1,writeSPI@output_data
  1572  0024CC  C01C  F002         	movff	writeEEPromFloat@Data1+1,writeSPI@output_data+1
  1573  0024D0  0E01               	movlw	1
  1574  0024D2  2411               	addwf	writeEEPromFloat@EEaddress,w,c
  1575  0024D4  6E03               	movwf	writeSPI@EEaddress,c
  1576  0024D6  0E00               	movlw	0
  1577  0024D8  2012               	addwfc	writeEEPromFloat@EEaddress+1,w,c
  1578  0024DA  6E04               	movwf	writeSPI@EEaddress+1,c
  1579  0024DC  0E00               	movlw	0
  1580  0024DE  2013               	addwfc	writeEEPromFloat@EEaddress+2,w,c
  1581  0024E0  6E05               	movwf	writeSPI@EEaddress+2,c
  1582  0024E2  EC71  F011         	call	_writeSPI	;wreg free
  1583                           
  1584                           ;Main.c: 280: writeSPI(Data2, EEaddress + 2);
  1585  0024E6  C019  F001         	movff	writeEEPromFloat@Data2,writeSPI@output_data
  1586  0024EA  C01A  F002         	movff	writeEEPromFloat@Data2+1,writeSPI@output_data+1
  1587  0024EE  0E02               	movlw	2
  1588  0024F0  2411               	addwf	writeEEPromFloat@EEaddress,w,c
  1589  0024F2  6E03               	movwf	writeSPI@EEaddress,c
  1590  0024F4  0E00               	movlw	0
  1591  0024F6  2012               	addwfc	writeEEPromFloat@EEaddress+1,w,c
  1592  0024F8  6E04               	movwf	writeSPI@EEaddress+1,c
  1593  0024FA  0E00               	movlw	0
  1594  0024FC  2013               	addwfc	writeEEPromFloat@EEaddress+2,w,c
  1595  0024FE  6E05               	movwf	writeSPI@EEaddress+2,c
  1596  002500  EC71  F011         	call	_writeSPI	;wreg free
  1597  002504  0012               	return		;funcret
  1598  002506                     __end_of_writeEEPromFloat:
  1599                           	opt stack 0
  1600                           tblptru	equ	0xFF8
  1601                           tblptrh	equ	0xFF7
  1602                           tblptrl	equ	0xFF6
  1603                           tablat	equ	0xFF5
  1604                           postinc0	equ	0xFEE
  1605                           wreg	equ	0xFE8
  1606                           postdec1	equ	0xFE5
  1607                           fsr1l	equ	0xFE1
  1608                           status	equ	0xFD8
  1609                           
  1610 ;; *************** function _writeSPI *****************
  1611 ;; Defined at:
  1612 ;;		line 329 in file "Main.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;  output_data     2    0[COMRAM] unsigned int 
  1615 ;;  EEaddress       3    2[COMRAM] unsigned um
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;  local_data      2   11[COMRAM] unsigned int 
  1618 ;;  AdrsLsb         1   10[COMRAM] unsigned char 
  1619 ;;  AdrsMid         1    9[COMRAM] unsigned char 
  1620 ;;  AdrsMsb         1    8[COMRAM] unsigned char 
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  1    wreg      void 
  1623 ;; Registers used:
  1624 ;;		wreg, status,2, status,0
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1630 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1631 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1632 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1633 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1634 ;;Total ram usage:       13 bytes
  1635 ;; Hardware stack levels used:    1
  1636 ;; This function calls:
  1637 ;;		Nothing
  1638 ;; This function is called by:
  1639 ;;		_writeEEPromFloat
  1640 ;;		_main
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text2
  1645  0022E2                     __ptext2:
  1646                           	opt stack 0
  1647  0022E2                     _writeSPI:
  1648                           	opt stack 30
  1649                           
  1650                           ;Main.c: 330: unsigned int local_data = 0;
  1651                           
  1652                           ;incstack = 0
  1653  0022E2  0E00               	movlw	0
  1654  0022E4  6E0D               	movwf	writeSPI@local_data+1,c
  1655  0022E6  0E00               	movlw	0
  1656  0022E8  6E0C               	movwf	writeSPI@local_data,c
  1657                           
  1658                           ;Main.c: 331: char AdrsMsb = 0;
  1659  0022EA  0E00               	movlw	0
  1660  0022EC  6E09               	movwf	writeSPI@AdrsMsb,c
  1661                           
  1662                           ;Main.c: 332: char AdrsMid = 0;
  1663  0022EE  0E00               	movlw	0
  1664  0022F0  6E0A               	movwf	writeSPI@AdrsMid,c
  1665                           
  1666                           ;Main.c: 333: char AdrsLsb = 0;
  1667  0022F2  0E00               	movlw	0
  1668  0022F4  6E0B               	movwf	writeSPI@AdrsLsb,c
  1669                           
  1670                           ;Main.c: 336: AdrsMsb = (EEaddress >> 16)& 0xff;
  1671  0022F6  C005  F009         	movff	writeSPI@EEaddress+2,writeSPI@AdrsMsb
  1672                           
  1673                           ;Main.c: 337: AdrsMid = (EEaddress >> 8)& 0xff;
  1674  0022FA  C003  F006         	movff	writeSPI@EEaddress,??_writeSPI
  1675  0022FE  C004  F007         	movff	writeSPI@EEaddress+1,??_writeSPI+1
  1676  002302  C005  F008         	movff	writeSPI@EEaddress+2,??_writeSPI+2
  1677  002306  C007  F006         	movff	??_writeSPI+1,??_writeSPI
  1678  00230A  C008  F007         	movff	??_writeSPI+2,??_writeSPI+1
  1679  00230E  6A08               	clrf	??_writeSPI+2,c
  1680  002310  5006               	movf	??_writeSPI,w,c
  1681  002312  6E0A               	movwf	writeSPI@AdrsMid,c
  1682                           
  1683                           ;Main.c: 338: AdrsLsb = EEaddress & 0xff;
  1684  002314  C003  F00B         	movff	writeSPI@EEaddress,writeSPI@AdrsLsb
  1685                           
  1686                           ;Main.c: 340: PORTCbits.RC0 = 1;
  1687  002318  808F               	bsf	3983,0,c	;volatile
  1688                           
  1689                           ;Main.c: 341: SSP1CON1bits.WCOL = 0;
  1690  00231A  9E96               	bcf	3990,7,c	;volatile
  1691                           
  1692                           ;Main.c: 342: PORTCbits.RC0 = 0;
  1693  00231C  908F               	bcf	3983,0,c	;volatile
  1694                           
  1695                           ;Main.c: 344: SSP1BUF = 6;
  1696  00231E  0E06               	movlw	6
  1697  002320  6E92               	movwf	3986,c	;volatile
  1698  002322  A095               	btfss	3989,0,c	;volatile
  1699  002324  D7FE               	goto	l132
  1700                           
  1701                           ;Main.c: 346: PORTCbits.RC0 = 1;
  1702  002326  808F               	bsf	3983,0,c	;volatile
  1703                           
  1704                           ;Main.c: 347: local_data = SSP1BUF;
  1705  002328  CF92 F00C          	movff	3986,writeSPI@local_data	;volatile
  1706  00232C  6A0D               	clrf	writeSPI@local_data+1,c
  1707                           
  1708                           ;Main.c: 350: PORTCbits.RC0 = 0;
  1709  00232E  908F               	bcf	3983,0,c	;volatile
  1710                           
  1711                           ;Main.c: 351: SSP1BUF = 5;
  1712  002330  0E05               	movlw	5
  1713  002332  6E92               	movwf	3986,c	;volatile
  1714  002334  A095               	btfss	3989,0,c	;volatile
  1715  002336  D7FE               	goto	l135
  1716                           
  1717                           ;Main.c: 353: local_data = SSP1BUF;
  1718  002338  CF92 F00C          	movff	3986,writeSPI@local_data	;volatile
  1719  00233C  6A0D               	clrf	writeSPI@local_data+1,c
  1720                           
  1721                           ;Main.c: 354: local_data = 1;
  1722  00233E  0E00               	movlw	0
  1723  002340  6E0D               	movwf	writeSPI@local_data+1,c
  1724  002342  0E01               	movlw	1
  1725  002344  6E0C               	movwf	writeSPI@local_data,c
  1726                           
  1727                           ;Main.c: 355: while (local_data == 1) {
  1728  002346  D00B               	goto	l137
  1729  002348                     
  1730                           ;Main.c: 356: SSP1BUF = 0;
  1731  002348  0E00               	movlw	0
  1732  00234A  6E92               	movwf	3986,c	;volatile
  1733  00234C  A095               	btfss	3989,0,c	;volatile
  1734  00234E  D7FE               	goto	l140
  1735                           
  1736                           ;Main.c: 358: local_data = SSP1BUF;
  1737  002350  CF92 F00C          	movff	3986,writeSPI@local_data	;volatile
  1738  002354  6A0D               	clrf	writeSPI@local_data+1,c
  1739                           
  1740                           ;Main.c: 359: local_data = local_data & 1;
  1741  002356  0E01               	movlw	1
  1742  002358  140C               	andwf	writeSPI@local_data,w,c
  1743  00235A  6E0C               	movwf	writeSPI@local_data,c
  1744  00235C  6A0D               	clrf	writeSPI@local_data+1,c
  1745  00235E                     l137:
  1746  00235E  040C               	decf	writeSPI@local_data,w,c
  1747  002360  100D               	iorwf	writeSPI@local_data+1,w,c
  1748  002362  B4D8               	btfsc	status,2,c
  1749  002364  D7F1               	goto	l138
  1750                           
  1751                           ;Main.c: 360: }
  1752                           ;Main.c: 361: PORTCbits.RC0 = 1;
  1753  002366  808F               	bsf	3983,0,c	;volatile
  1754                           
  1755                           ;Main.c: 363: PORTCbits.RC0 = 0;
  1756  002368  908F               	bcf	3983,0,c	;volatile
  1757                           
  1758                           ;Main.c: 365: SSP1BUF = 2;
  1759  00236A  0E02               	movlw	2
  1760  00236C  6E92               	movwf	3986,c	;volatile
  1761  00236E  A095               	btfss	3989,0,c	;volatile
  1762  002370  D7FE               	goto	l144
  1763                           
  1764                           ;Main.c: 367: local_data = SSP1BUF;
  1765  002372  CF92 F00C          	movff	3986,writeSPI@local_data	;volatile
  1766  002376  6A0D               	clrf	writeSPI@local_data+1,c
  1767                           
  1768                           ;Main.c: 369: SSP1BUF = AdrsMsb;
  1769  002378  C009  FF92         	movff	writeSPI@AdrsMsb,3986	;volatile
  1770  00237C  A095               	btfss	3989,0,c	;volatile
  1771  00237E  D7FE               	goto	l147
  1772                           
  1773                           ;Main.c: 371: local_data = SSP1BUF;
  1774  002380  CF92 F00C          	movff	3986,writeSPI@local_data	;volatile
  1775  002384  6A0D               	clrf	writeSPI@local_data+1,c
  1776                           
  1777                           ;Main.c: 373: SSP1BUF = AdrsMid;
  1778  002386  C00A  FF92         	movff	writeSPI@AdrsMid,3986	;volatile
  1779  00238A  A095               	btfss	3989,0,c	;volatile
  1780  00238C  D7FE               	goto	l150
  1781                           
  1782                           ;Main.c: 375: local_data = SSP1BUF;
  1783  00238E  CF92 F00C          	movff	3986,writeSPI@local_data	;volatile
  1784  002392  6A0D               	clrf	writeSPI@local_data+1,c
  1785                           
  1786                           ;Main.c: 377: SSP1BUF = AdrsLsb;
  1787  002394  C00B  FF92         	movff	writeSPI@AdrsLsb,3986	;volatile
  1788  002398  A095               	btfss	3989,0,c	;volatile
  1789  00239A  D7FE               	goto	l153
  1790                           
  1791                           ;Main.c: 379: local_data = SSP1BUF;
  1792  00239C  CF92 F00C          	movff	3986,writeSPI@local_data	;volatile
  1793  0023A0  6A0D               	clrf	writeSPI@local_data+1,c
  1794                           
  1795                           ;Main.c: 381: SSP1BUF = output_data;
  1796  0023A2  C001  FF92         	movff	writeSPI@output_data,3986	;volatile
  1797  0023A6  A095               	btfss	3989,0,c	;volatile
  1798  0023A8  D7FE               	goto	l156
  1799                           
  1800                           ;Main.c: 383: local_data = SSP1BUF;
  1801  0023AA  CF92 F00C          	movff	3986,writeSPI@local_data	;volatile
  1802  0023AE  6A0D               	clrf	writeSPI@local_data+1,c
  1803                           
  1804                           ;Main.c: 385: PORTCbits.RC0 = 1;
  1805  0023B0  808F               	bsf	3983,0,c	;volatile
  1806  0023B2  0012               	return		;funcret
  1807  0023B4                     __end_of_writeSPI:
  1808                           	opt stack 0
  1809                           tblptru	equ	0xFF8
  1810                           tblptrh	equ	0xFF7
  1811                           tblptrl	equ	0xFF6
  1812                           tablat	equ	0xFF5
  1813                           postinc0	equ	0xFEE
  1814                           wreg	equ	0xFE8
  1815                           postdec1	equ	0xFE5
  1816                           fsr1l	equ	0xFE1
  1817                           status	equ	0xFD8
  1818                           
  1819 ;; *************** function _readWaterSensor *****************
  1820 ;; Defined at:
  1821 ;;		line 597 in file "Main.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;		None
  1824 ;; Auto vars:     Size  Location     Type
  1825 ;;  WaterPresent    2   84[COMRAM] int 
  1826 ;;  varToSee        2   82[COMRAM] int 
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  2   77[COMRAM] int 
  1829 ;; Registers used:
  1830 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1836 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1837 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1838 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1839 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1840 ;;Total ram usage:        9 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; Hardware stack levels required when called:    3
  1843 ;; This function calls:
  1844 ;;		_delayMs
  1845 ;;		_digitalPinStatus
  1846 ;; This function is called by:
  1847 ;;		_main
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	text3
  1852  001D1C                     __ptext3:
  1853                           	opt stack 0
  1854  001D1C                     _readWaterSensor:
  1855                           	opt stack 27
  1856                           
  1857                           ;Main.c: 599: int WaterPresent = 0;
  1858                           
  1859                           ;incstack = 0
  1860  001D1C  0E00               	movlw	0
  1861  001D1E  6E56               	movwf	readWaterSensor@WaterPresent+1,c
  1862  001D20  0E00               	movlw	0
  1863  001D22  6E55               	movwf	readWaterSensor@WaterPresent,c
  1864                           
  1865                           ;Main.c: 601: delayMs(5);
  1866  001D24  0E00               	movlw	0
  1867  001D26  6E46               	movwf	delayMs@ms+1,c
  1868  001D28  0E05               	movlw	5
  1869  001D2A  6E45               	movwf	delayMs@ms,c
  1870  001D2C  EC83  F012         	call	_delayMs	;wreg free
  1871                           
  1872                           ;Main.c: 603: TMR0 = 0;
  1873  001D30  0E00               	movlw	0
  1874  001D32  6ED3               	movwf	4051,c	;volatile
  1875                           
  1876                           ;Main.c: 604: if (digitalPinStatus(waterPresenceSensorPin) == 1) {
  1877  001D34  C0D8  F001         	movff	_waterPresenceSensorPin,digitalPinStatus@pin
  1878  001D38  C0D9  F002         	movff	_waterPresenceSensorPin+1,digitalPinStatus@pin+1
  1879  001D3C  ECD4  F00D         	call	_digitalPinStatus	;wreg free
  1880  001D40  0401               	decf	?_digitalPinStatus,w,c
  1881  001D42  1002               	iorwf	?_digitalPinStatus+1,w,c
  1882  001D44  A4D8               	btfss	status,2,c
  1883  001D46  D01F               	goto	u2880
  1884  001D48                     u2860:
  1885                           
  1886                           ;Main.c: 605: while ((digitalPinStatus(waterPresenceSensorPin))&&(TMR0 <= pulseWidthThre
      +                          shold)) {
  1887  001D48  C0D8  F001         	movff	_waterPresenceSensorPin,digitalPinStatus@pin
  1888  001D4C  C0D9  F002         	movff	_waterPresenceSensorPin+1,digitalPinStatus@pin+1
  1889  001D50  ECD4  F00D         	call	_digitalPinStatus	;wreg free
  1890  001D54  5001               	movf	?_digitalPinStatus,w,c
  1891  001D56  1002               	iorwf	?_digitalPinStatus+1,w,c
  1892  001D58  B4D8               	btfsc	status,2,c
  1893  001D5A  D015               	goto	u2880
  1894  001D5C  50D3               	movf	4051,w,c	;volatile
  1895  001D5E  6E50               	movwf	??_readWaterSensor& (0+255),c
  1896  001D60  6A51               	clrf	(??_readWaterSensor+1)& (0+255),c
  1897  001D62  0E0A               	movlw	low _pulseWidthThreshold
  1898  001D64  6EF6               	movwf	tblptrl,c
  1899  001D66                     	if	1	;There is more than 1 active tblptr byte
  1900  001D66  0E0F               	movlw	high _pulseWidthThreshold
  1901  001D68  6EF7               	movwf	tblptrh,c
  1902  001D6A                     	endif
  1903  001D6A                     	if	1	;There are 3 active tblptr bytes
  1904  001D6A  0E00               	movlw	low (_pulseWidthThreshold shr (0+16))
  1905  001D6C  6EF8               	movwf	tblptru,c
  1906  001D6E                     	endif
  1907  001D6E  5050               	movf	??_readWaterSensor,w,c
  1908  001D70  0009               	tblrd		*+
  1909  001D72  5CF5               	subwf	tablat,w,c
  1910  001D74  0009               	tblrd		*+
  1911  001D76  50F5               	movf	tablat,w,c
  1912  001D78  0A80               	xorlw	128
  1913  001D7A  6E52               	movwf	(??_readWaterSensor+2)& (0+255),c
  1914  001D7C  5051               	movf	??_readWaterSensor+1,w,c
  1915  001D7E  0A80               	xorlw	128
  1916  001D80  5852               	subwfb	(??_readWaterSensor+2)& (0+255),w,c
  1917  001D82  B0D8               	btfsc	status,0,c
  1918  001D84  D7E1               	goto	u2860
  1919  001D86                     u2880:
  1920                           
  1921                           ;Main.c: 607: }
  1922                           ;Main.c: 609: TMR0 = 0;
  1923                           
  1924                           ;Main.c: 606: };
  1925  001D86  0E00               	movlw	0
  1926  001D88  6ED3               	movwf	4051,c	;volatile
  1927  001D8A  C0D8  F001         	movff	_waterPresenceSensorPin,digitalPinStatus@pin
  1928  001D8E  C0D9  F002         	movff	_waterPresenceSensorPin+1,digitalPinStatus@pin+1
  1929  001D92  ECD4  F00D         	call	_digitalPinStatus	;wreg free
  1930  001D96  5001               	movf	?_digitalPinStatus,w,c
  1931  001D98  1002               	iorwf	?_digitalPinStatus+1,w,c
  1932  001D9A  A4D8               	btfss	status,2,c
  1933  001D9C  D015               	goto	u2900
  1934  001D9E  50D3               	movf	4051,w,c	;volatile
  1935  001DA0  6E50               	movwf	??_readWaterSensor& (0+255),c
  1936  001DA2  6A51               	clrf	(??_readWaterSensor+1)& (0+255),c
  1937  001DA4  0E0A               	movlw	low _pulseWidthThreshold
  1938  001DA6  6EF6               	movwf	tblptrl,c
  1939  001DA8                     	if	1	;There is more than 1 active tblptr byte
  1940  001DA8  0E0F               	movlw	high _pulseWidthThreshold
  1941  001DAA  6EF7               	movwf	tblptrh,c
  1942  001DAC                     	endif
  1943  001DAC                     	if	1	;There are 3 active tblptr bytes
  1944  001DAC  0E00               	movlw	low (_pulseWidthThreshold shr (0+16))
  1945  001DAE  6EF8               	movwf	tblptru,c
  1946  001DB0                     	endif
  1947  001DB0  5050               	movf	??_readWaterSensor,w,c
  1948  001DB2  0009               	tblrd		*+
  1949  001DB4  5CF5               	subwf	tablat,w,c
  1950  001DB6  0009               	tblrd		*+
  1951  001DB8  50F5               	movf	tablat,w,c
  1952  001DBA  0A80               	xorlw	128
  1953  001DBC  6E52               	movwf	(??_readWaterSensor+2)& (0+255),c
  1954  001DBE  5051               	movf	??_readWaterSensor+1,w,c
  1955  001DC0  0A80               	xorlw	128
  1956  001DC2  5852               	subwfb	(??_readWaterSensor+2)& (0+255),w,c
  1957  001DC4  B0D8               	btfsc	status,0,c
  1958  001DC6  D7E1               	goto	l198
  1959  001DC8                     u2900:
  1960                           
  1961                           ;Main.c: 611: };
  1962                           ;Main.c: 613: TMR0 = 0;
  1963  001DC8  0E00               	movlw	0
  1964  001DCA  6ED3               	movwf	4051,c	;volatile
  1965  001DCC  C0D8  F001         	movff	_waterPresenceSensorPin,digitalPinStatus@pin
  1966  001DD0  C0D9  F002         	movff	_waterPresenceSensorPin+1,digitalPinStatus@pin+1
  1967  001DD4  ECD4  F00D         	call	_digitalPinStatus	;wreg free
  1968  001DD8  5001               	movf	?_digitalPinStatus,w,c
  1969  001DDA  1002               	iorwf	?_digitalPinStatus+1,w,c
  1970  001DDC  B4D8               	btfsc	status,2,c
  1971  001DDE  D015               	goto	u2920
  1972  001DE0  50D3               	movf	4051,w,c	;volatile
  1973  001DE2  6E50               	movwf	??_readWaterSensor& (0+255),c
  1974  001DE4  6A51               	clrf	(??_readWaterSensor+1)& (0+255),c
  1975  001DE6  0E0A               	movlw	low _pulseWidthThreshold
  1976  001DE8  6EF6               	movwf	tblptrl,c
  1977  001DEA                     	if	1	;There is more than 1 active tblptr byte
  1978  001DEA  0E0F               	movlw	high _pulseWidthThreshold
  1979  001DEC  6EF7               	movwf	tblptrh,c
  1980  001DEE                     	endif
  1981  001DEE                     	if	1	;There are 3 active tblptr bytes
  1982  001DEE  0E00               	movlw	low (_pulseWidthThreshold shr (0+16))
  1983  001DF0  6EF8               	movwf	tblptru,c
  1984  001DF2                     	endif
  1985  001DF2  5050               	movf	??_readWaterSensor,w,c
  1986  001DF4  0009               	tblrd		*+
  1987  001DF6  5CF5               	subwf	tablat,w,c
  1988  001DF8  0009               	tblrd		*+
  1989  001DFA  50F5               	movf	tablat,w,c
  1990  001DFC  0A80               	xorlw	128
  1991  001DFE  6E52               	movwf	(??_readWaterSensor+2)& (0+255),c
  1992  001E00  5051               	movf	??_readWaterSensor+1,w,c
  1993  001E02  0A80               	xorlw	128
  1994  001E04  5852               	subwfb	(??_readWaterSensor+2)& (0+255),w,c
  1995  001E06  B0D8               	btfsc	status,0,c
  1996  001E08  D7E1               	goto	l203
  1997  001E0A                     u2920:
  1998                           
  1999                           ;Main.c: 615: };
  2000                           ;Main.c: 616: int varToSee = digitalPinStatus(waterPresenceSensorPin);
  2001  001E0A  C0D8  F001         	movff	_waterPresenceSensorPin,digitalPinStatus@pin
  2002  001E0E  C0D9  F002         	movff	_waterPresenceSensorPin+1,digitalPinStatus@pin+1
  2003  001E12  ECD4  F00D         	call	_digitalPinStatus	;wreg free
  2004  001E16  C001  F053         	movff	?_digitalPinStatus,readWaterSensor@varToSee
  2005  001E1A  C002  F054         	movff	?_digitalPinStatus+1,readWaterSensor@varToSee+1
  2006                           
  2007                           ;Main.c: 617: if(TMR0 <= pulseWidthThreshold){
  2008  001E1E  50D3               	movf	4051,w,c	;volatile
  2009  001E20  6E50               	movwf	??_readWaterSensor& (0+255),c
  2010  001E22  6A51               	clrf	(??_readWaterSensor+1)& (0+255),c
  2011  001E24  0E0A               	movlw	low _pulseWidthThreshold
  2012  001E26  6EF6               	movwf	tblptrl,c
  2013  001E28                     	if	1	;There is more than 1 active tblptr byte
  2014  001E28  0E0F               	movlw	high _pulseWidthThreshold
  2015  001E2A  6EF7               	movwf	tblptrh,c
  2016  001E2C                     	endif
  2017  001E2C                     	if	1	;There are 3 active tblptr bytes
  2018  001E2C  0E00               	movlw	low (_pulseWidthThreshold shr (0+16))
  2019  001E2E  6EF8               	movwf	tblptru,c
  2020  001E30                     	endif
  2021  001E30  5050               	movf	??_readWaterSensor,w,c
  2022  001E32  0009               	tblrd		*+
  2023  001E34  5CF5               	subwf	tablat,w,c
  2024  001E36  0009               	tblrd		*+
  2025  001E38  50F5               	movf	tablat,w,c
  2026  001E3A  0A80               	xorlw	128
  2027  001E3C  6E52               	movwf	(??_readWaterSensor+2)& (0+255),c
  2028  001E3E  5051               	movf	??_readWaterSensor+1,w,c
  2029  001E40  0A80               	xorlw	128
  2030  001E42  5852               	subwfb	(??_readWaterSensor+2)& (0+255),w,c
  2031  001E44  A0D8               	btfss	status,0,c
  2032  001E46  D004               	goto	l207
  2033                           
  2034                           ;Main.c: 618: WaterPresent = 1;
  2035  001E48  0E00               	movlw	0
  2036  001E4A  6E56               	movwf	readWaterSensor@WaterPresent+1,c
  2037  001E4C  0E01               	movlw	1
  2038  001E4E  6E55               	movwf	readWaterSensor@WaterPresent,c
  2039  001E50                     l207:
  2040                           
  2041                           ;Main.c: 619: }
  2042                           ;Main.c: 620: return WaterPresent;
  2043  001E50  C055  F04E         	movff	readWaterSensor@WaterPresent,?_readWaterSensor
  2044  001E54  C056  F04F         	movff	readWaterSensor@WaterPresent+1,?_readWaterSensor+1
  2045  001E58  0012               	return	
  2046  001E5A                     __end_of_readWaterSensor:
  2047                           	opt stack 0
  2048                           tblptru	equ	0xFF8
  2049                           tblptrh	equ	0xFF7
  2050                           tblptrl	equ	0xFF6
  2051                           tablat	equ	0xFF5
  2052                           postinc0	equ	0xFEE
  2053                           wreg	equ	0xFE8
  2054                           postdec1	equ	0xFE5
  2055                           fsr1l	equ	0xFE1
  2056                           status	equ	0xFD8
  2057                           
  2058 ;; *************** function _digitalPinStatus *****************
  2059 ;; Defined at:
  2060 ;;		line 266 in file "Pin_Manager.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;  pin             2    0[COMRAM] int 
  2063 ;; Auto vars:     Size  Location     Type
  2064 ;;  pinValue        2    3[COMRAM] int 
  2065 ;; Return value:  Size  Location     Type
  2066 ;;                  2    0[COMRAM] int 
  2067 ;; Registers used:
  2068 ;;		wreg, status,2, status,0
  2069 ;; Tracked objects:
  2070 ;;		On entry : 0/0
  2071 ;;		On exit  : 0/0
  2072 ;;		Unchanged: 0/0
  2073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2074 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2075 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2076 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2077 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2078 ;;Total ram usage:        5 bytes
  2079 ;; Hardware stack levels used:    1
  2080 ;; This function calls:
  2081 ;;		Nothing
  2082 ;; This function is called by:
  2083 ;;		_readWaterSensor
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           	psect	text4
  2088  001BA8                     __ptext4:
  2089                           	opt stack 0
  2090  001BA8                     _digitalPinStatus:
  2091                           	opt stack 29
  2092                           
  2093                           ;Pin_Manager.c: 268: int pinValue;
  2094                           ;Pin_Manager.c: 269: if (pin == 2)
  2095                           
  2096                           ;incstack = 0
  2097  001BA8  0E02               	movlw	2
  2098  001BAA  1801               	xorwf	digitalPinStatus@pin,w,c
  2099  001BAC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2100  001BAE  A4D8               	btfss	status,2,c
  2101  001BB0  D003               	goto	l292
  2102                           
  2103                           ;Pin_Manager.c: 270: {
  2104                           ;Pin_Manager.c: 271: pinValue = PORTAbits.RA0;
  2105  001BB2  A08D               	btfss	3981,0,c	;volatile
  2106  001BB4  D0AA               	goto	L4
  2107  001BB6  D09F               	goto	u2711
  2108  001BB8                     l292:
  2109                           
  2110                           ;Pin_Manager.c: 273: else if (pin == 3)
  2111  001BB8  0E03               	movlw	3
  2112  001BBA  1801               	xorwf	digitalPinStatus@pin,w,c
  2113  001BBC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2114  001BBE  A4D8               	btfss	status,2,c
  2115  001BC0  D003               	goto	l294
  2116                           
  2117                           ;Pin_Manager.c: 274: {
  2118                           ;Pin_Manager.c: 275: pinValue = PORTAbits.RA1;
  2119  001BC2  A28D               	btfss	3981,1,c	;volatile
  2120  001BC4  D0A2               	goto	L4
  2121  001BC6  D097               	goto	u2711
  2122  001BC8                     l294:
  2123                           
  2124                           ;Pin_Manager.c: 277: else if (pin == 4)
  2125  001BC8  0E04               	movlw	4
  2126  001BCA  1801               	xorwf	digitalPinStatus@pin,w,c
  2127  001BCC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2128  001BCE  A4D8               	btfss	status,2,c
  2129  001BD0  D003               	goto	l296
  2130                           
  2131                           ;Pin_Manager.c: 278: {
  2132                           ;Pin_Manager.c: 279: pinValue = PORTAbits.RA2;
  2133  001BD2  A48D               	btfss	3981,2,c	;volatile
  2134  001BD4  D09A               	goto	L4
  2135  001BD6  D08F               	goto	u2711
  2136  001BD8                     l296:
  2137                           
  2138                           ;Pin_Manager.c: 281: else if (pin == 5)
  2139  001BD8  0E05               	movlw	5
  2140  001BDA  1801               	xorwf	digitalPinStatus@pin,w,c
  2141  001BDC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2142  001BDE  A4D8               	btfss	status,2,c
  2143  001BE0  D003               	goto	l298
  2144                           
  2145                           ;Pin_Manager.c: 282: {
  2146                           ;Pin_Manager.c: 283: pinValue = PORTAbits.RA3;
  2147  001BE2  A68D               	btfss	3981,3,c	;volatile
  2148  001BE4  D092               	goto	L4
  2149  001BE6  D087               	goto	u2711
  2150  001BE8                     l298:
  2151                           
  2152                           ;Pin_Manager.c: 285: else if (pin == 6)
  2153  001BE8  0E06               	movlw	6
  2154  001BEA  1801               	xorwf	digitalPinStatus@pin,w,c
  2155  001BEC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2156  001BEE  A4D8               	btfss	status,2,c
  2157  001BF0  D003               	goto	l300
  2158                           
  2159                           ;Pin_Manager.c: 286: {
  2160                           ;Pin_Manager.c: 287: pinValue = PORTAbits.RA4;
  2161  001BF2  A88D               	btfss	3981,4,c	;volatile
  2162  001BF4  D08A               	goto	L4
  2163  001BF6  D07F               	goto	u2711
  2164  001BF8                     l300:
  2165                           
  2166                           ;Pin_Manager.c: 289: else if (pin == 7)
  2167  001BF8  0E07               	movlw	7
  2168  001BFA  1801               	xorwf	digitalPinStatus@pin,w,c
  2169  001BFC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2170  001BFE  A4D8               	btfss	status,2,c
  2171  001C00  D003               	goto	l302
  2172                           
  2173                           ;Pin_Manager.c: 290: {
  2174                           ;Pin_Manager.c: 291: pinValue = PORTAbits.RA5;
  2175  001C02  AA8D               	btfss	3981,5,c	;volatile
  2176  001C04  D082               	goto	L4
  2177  001C06  D077               	goto	u2711
  2178  001C08                     l302:
  2179                           
  2180                           ;Pin_Manager.c: 294: else if (pin == 9)
  2181  001C08  0E09               	movlw	9
  2182  001C0A  1801               	xorwf	digitalPinStatus@pin,w,c
  2183  001C0C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2184  001C0E  A4D8               	btfss	status,2,c
  2185  001C10  D003               	goto	l304
  2186                           
  2187                           ;Pin_Manager.c: 295: {
  2188                           ;Pin_Manager.c: 296: pinValue = PORTAbits.RA7;
  2189  001C12  AE8D               	btfss	3981,7,c	;volatile
  2190  001C14  D07A               	goto	L4
  2191  001C16  D06F               	goto	u2711
  2192  001C18                     l304:
  2193                           
  2194                           ;Pin_Manager.c: 298: else if (pin == 10)
  2195  001C18  0E0A               	movlw	10
  2196  001C1A  1801               	xorwf	digitalPinStatus@pin,w,c
  2197  001C1C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2198  001C1E  A4D8               	btfss	status,2,c
  2199  001C20  D003               	goto	l306
  2200                           
  2201                           ;Pin_Manager.c: 299: {
  2202                           ;Pin_Manager.c: 300: pinValue = PORTAbits.RA6;
  2203  001C22  AC8D               	btfss	3981,6,c	;volatile
  2204  001C24  D072               	goto	L4
  2205  001C26  D067               	goto	u2711
  2206  001C28                     l306:
  2207                           
  2208                           ;Pin_Manager.c: 302: else if (pin == 11)
  2209  001C28  0E0B               	movlw	11
  2210  001C2A  1801               	xorwf	digitalPinStatus@pin,w,c
  2211  001C2C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2212  001C2E  A4D8               	btfss	status,2,c
  2213  001C30  D003               	goto	l308
  2214                           
  2215                           ;Pin_Manager.c: 303: {
  2216                           ;Pin_Manager.c: 304: pinValue = PORTCbits.RC0;
  2217  001C32  A08F               	btfss	3983,0,c	;volatile
  2218  001C34  D06A               	goto	L4
  2219  001C36  D05F               	goto	u2711
  2220  001C38                     l308:
  2221                           
  2222                           ;Pin_Manager.c: 306: else if (pin == 12)
  2223  001C38  0E0C               	movlw	12
  2224  001C3A  1801               	xorwf	digitalPinStatus@pin,w,c
  2225  001C3C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2226  001C3E  A4D8               	btfss	status,2,c
  2227  001C40  D003               	goto	l310
  2228                           
  2229                           ;Pin_Manager.c: 307: {
  2230                           ;Pin_Manager.c: 308: pinValue = PORTCbits.RC1;
  2231  001C42  A28F               	btfss	3983,1,c	;volatile
  2232  001C44  D062               	goto	L4
  2233  001C46  D057               	goto	u2711
  2234  001C48                     l310:
  2235                           
  2236                           ;Pin_Manager.c: 310: else if (pin == 13)
  2237  001C48  0E0D               	movlw	13
  2238  001C4A  1801               	xorwf	digitalPinStatus@pin,w,c
  2239  001C4C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2240  001C4E  A4D8               	btfss	status,2,c
  2241  001C50  D003               	goto	l312
  2242                           
  2243                           ;Pin_Manager.c: 311: {
  2244                           ;Pin_Manager.c: 312: pinValue = PORTCbits.RC2;
  2245  001C52  A48F               	btfss	3983,2,c	;volatile
  2246  001C54  D05A               	goto	L4
  2247  001C56  D04F               	goto	u2711
  2248  001C58                     l312:
  2249                           
  2250                           ;Pin_Manager.c: 314: else if (pin == 14)
  2251  001C58  0E0E               	movlw	14
  2252  001C5A  1801               	xorwf	digitalPinStatus@pin,w,c
  2253  001C5C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2254  001C5E  A4D8               	btfss	status,2,c
  2255  001C60  D003               	goto	l314
  2256                           
  2257                           ;Pin_Manager.c: 315: {
  2258                           ;Pin_Manager.c: 316: pinValue = PORTCbits.RC3;
  2259  001C62  A68F               	btfss	3983,3,c	;volatile
  2260  001C64  D052               	goto	L4
  2261  001C66  D047               	goto	u2711
  2262  001C68                     l314:
  2263                           
  2264                           ;Pin_Manager.c: 318: else if (pin == 15)
  2265  001C68  0E0F               	movlw	15
  2266  001C6A  1801               	xorwf	digitalPinStatus@pin,w,c
  2267  001C6C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2268  001C6E  A4D8               	btfss	status,2,c
  2269  001C70  D003               	goto	l316
  2270                           
  2271                           ;Pin_Manager.c: 319: {
  2272                           ;Pin_Manager.c: 320: pinValue = PORTCbits.RC4;
  2273  001C72  A88F               	btfss	3983,4,c	;volatile
  2274  001C74  D04A               	goto	L4
  2275  001C76  D03F               	goto	u2711
  2276  001C78                     l316:
  2277                           
  2278                           ;Pin_Manager.c: 322: else if (pin == 16)
  2279  001C78  0E10               	movlw	16
  2280  001C7A  1801               	xorwf	digitalPinStatus@pin,w,c
  2281  001C7C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2282  001C7E  A4D8               	btfss	status,2,c
  2283  001C80  D003               	goto	l318
  2284                           
  2285                           ;Pin_Manager.c: 323: {
  2286                           ;Pin_Manager.c: 324: pinValue = PORTCbits.RC5;
  2287  001C82  AA8F               	btfss	3983,5,c	;volatile
  2288  001C84  D042               	goto	L4
  2289  001C86  D037               	goto	u2711
  2290  001C88                     l318:
  2291                           
  2292                           ;Pin_Manager.c: 326: else if (pin == 17)
  2293  001C88  0E11               	movlw	17
  2294  001C8A  1801               	xorwf	digitalPinStatus@pin,w,c
  2295  001C8C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2296  001C8E  A4D8               	btfss	status,2,c
  2297  001C90  D003               	goto	l320
  2298                           
  2299                           ;Pin_Manager.c: 327: {
  2300                           ;Pin_Manager.c: 328: pinValue = PORTCbits.RC6;
  2301  001C92  AC8F               	btfss	3983,6,c	;volatile
  2302  001C94  D03A               	goto	L4
  2303  001C96  D02F               	goto	u2711
  2304  001C98                     l320:
  2305                           
  2306                           ;Pin_Manager.c: 330: else if (pin == 18)
  2307  001C98  0E12               	movlw	18
  2308  001C9A  1801               	xorwf	digitalPinStatus@pin,w,c
  2309  001C9C  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2310  001C9E  A4D8               	btfss	status,2,c
  2311  001CA0  D003               	goto	l322
  2312                           
  2313                           ;Pin_Manager.c: 331: {
  2314                           ;Pin_Manager.c: 332: pinValue = PORTCbits.RC7;
  2315  001CA2  AE8F               	btfss	3983,7,c	;volatile
  2316  001CA4  D032               	goto	L4
  2317  001CA6  D027               	goto	u2711
  2318  001CA8                     l322:
  2319                           
  2320                           ;Pin_Manager.c: 335: else if (pin == 21)
  2321  001CA8  0E15               	movlw	21
  2322  001CAA  1801               	xorwf	digitalPinStatus@pin,w,c
  2323  001CAC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2324  001CAE  A4D8               	btfss	status,2,c
  2325  001CB0  D003               	goto	l324
  2326                           
  2327                           ;Pin_Manager.c: 336: {
  2328                           ;Pin_Manager.c: 337: pinValue = PORTBbits.RB0;
  2329  001CB2  A08E               	btfss	3982,0,c	;volatile
  2330  001CB4  D02A               	goto	L4
  2331  001CB6  D01F               	goto	u2711
  2332  001CB8                     l324:
  2333                           
  2334                           ;Pin_Manager.c: 339: else if (pin == 22)
  2335  001CB8  0E16               	movlw	22
  2336  001CBA  1801               	xorwf	digitalPinStatus@pin,w,c
  2337  001CBC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2338  001CBE  A4D8               	btfss	status,2,c
  2339  001CC0  D003               	goto	l326
  2340                           
  2341                           ;Pin_Manager.c: 340: {
  2342                           ;Pin_Manager.c: 341: pinValue = PORTBbits.RB1;
  2343  001CC2  A28E               	btfss	3982,1,c	;volatile
  2344  001CC4  D022               	goto	L4
  2345  001CC6  D017               	goto	u2711
  2346  001CC8                     l326:
  2347                           
  2348                           ;Pin_Manager.c: 343: else if (pin == 23)
  2349  001CC8  0E17               	movlw	23
  2350  001CCA  1801               	xorwf	digitalPinStatus@pin,w,c
  2351  001CCC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2352  001CCE  A4D8               	btfss	status,2,c
  2353  001CD0  D003               	goto	l328
  2354                           
  2355                           ;Pin_Manager.c: 344: {
  2356                           ;Pin_Manager.c: 345: pinValue = PORTBbits.RB2;
  2357  001CD2  A48E               	btfss	3982,2,c	;volatile
  2358  001CD4  D01A               	goto	L4
  2359  001CD6  D00F               	goto	u2711
  2360  001CD8                     l328:
  2361                           
  2362                           ;Pin_Manager.c: 347: else if (pin == 24)
  2363  001CD8  0E18               	movlw	24
  2364  001CDA  1801               	xorwf	digitalPinStatus@pin,w,c
  2365  001CDC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2366  001CDE  A4D8               	btfss	status,2,c
  2367  001CE0  D003               	goto	l330
  2368                           
  2369                           ;Pin_Manager.c: 348: {
  2370                           ;Pin_Manager.c: 349: pinValue = PORTBbits.RB3;
  2371  001CE2  A68E               	btfss	3982,3,c	;volatile
  2372  001CE4  D012               	goto	L4
  2373  001CE6  D007               	goto	u2711
  2374  001CE8                     l330:
  2375                           
  2376                           ;Pin_Manager.c: 351: else if (pin == 25)
  2377  001CE8  0E19               	movlw	25
  2378  001CEA  1801               	xorwf	digitalPinStatus@pin,w,c
  2379  001CEC  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2380  001CEE  A4D8               	btfss	status,2,c
  2381  001CF0  D005               	goto	l332
  2382                           
  2383                           ;Pin_Manager.c: 352: {
  2384                           ;Pin_Manager.c: 353: pinValue = PORTBbits.RB4;
  2385  001CF2  A88E               	btfss	3982,4,c	;volatile
  2386  001CF4  D00A               	goto	L4
  2387  001CF6                     u2711:
  2388  001CF6  6A03               	clrf	??_digitalPinStatus& (0+255),c
  2389  001CF8  2A03               	incf	??_digitalPinStatus& (0+255),f,c
  2390  001CFA  D008               	goto	u2738
  2391  001CFC                     l332:
  2392                           
  2393                           ;Pin_Manager.c: 355: else if (pin == 26)
  2394  001CFC  0E1A               	movlw	26
  2395  001CFE  1801               	xorwf	digitalPinStatus@pin,w,c
  2396  001D00  1002               	iorwf	digitalPinStatus@pin+1,w,c
  2397  001D02  A4D8               	btfss	status,2,c
  2398  001D04  D006               	goto	l334
  2399                           
  2400                           ;Pin_Manager.c: 356: {
  2401                           ;Pin_Manager.c: 357: pinValue = PORTBbits.RB5;
  2402  001D06  BA8E               	btfsc	3982,5,c	;volatile
  2403  001D08  D7F6               	goto	u2711
  2404  001D0A                     L4:
  2405  001D0A  6A03               	clrf	??_digitalPinStatus& (0+255),c
  2406  001D0C                     u2738:
  2407  001D0C  5003               	movf	??_digitalPinStatus,w,c
  2408  001D0E  6E04               	movwf	digitalPinStatus@pinValue,c
  2409  001D10  6A05               	clrf	digitalPinStatus@pinValue+1,c
  2410  001D12                     l334:
  2411                           
  2412                           ;Pin_Manager.c: 358: }
  2413                           ;Pin_Manager.c: 360: return pinValue;
  2414  001D12  C004  F001         	movff	digitalPinStatus@pinValue,?_digitalPinStatus
  2415  001D16  C005  F002         	movff	digitalPinStatus@pinValue+1,?_digitalPinStatus+1
  2416  001D1A  0012               	return	
  2417  001D1C                     __end_of_digitalPinStatus:
  2418                           	opt stack 0
  2419                           tblptru	equ	0xFF8
  2420                           tblptrh	equ	0xFF7
  2421                           tblptrl	equ	0xFF6
  2422                           tablat	equ	0xFF5
  2423                           postinc0	equ	0xFEE
  2424                           wreg	equ	0xFE8
  2425                           postdec1	equ	0xFE5
  2426                           fsr1l	equ	0xFE1
  2427                           status	equ	0xFD8
  2428                           
  2429 ;; *************** function _delayMs *****************
  2430 ;; Defined at:
  2431 ;;		line 455 in file "Main.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;  ms              2   68[COMRAM] int 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  end_count       2   75[COMRAM] int 
  2436 ;;  debug           2   73[COMRAM] int 
  2437 ;; Return value:  Size  Location     Type
  2438 ;;                  1    wreg      void 
  2439 ;; Registers used:
  2440 ;;		wreg, status,2, status,0, cstack
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2446 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2447 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2448 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2449 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2450 ;;Total ram usage:        9 bytes
  2451 ;; Hardware stack levels used:    1
  2452 ;; Hardware stack levels required when called:    2
  2453 ;; This function calls:
  2454 ;;		___awtoft
  2455 ;;		___ftmul
  2456 ;;		___fttol
  2457 ;; This function is called by:
  2458 ;;		_readWaterSensor
  2459 ;;		_main
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           	psect	text5
  2464  002506                     __ptext5:
  2465                           	opt stack 0
  2466  002506                     _delayMs:
  2467                           	opt stack 27
  2468                           
  2469                           ;Main.c: 456: int debug = 0;
  2470                           
  2471                           ;incstack = 0
  2472  002506  0E00               	movlw	0
  2473  002508  6E4B               	movwf	delayMs@debug+1,c
  2474  00250A  0E00               	movlw	0
  2475  00250C  6E4A               	movwf	delayMs@debug,c
  2476                           
  2477                           ;Main.c: 457: int end_count;
  2478                           ;Main.c: 459: while(ms > 4000) {
  2479  00250E  D009               	goto	l183
  2480  002510                     
  2481                           ;Main.c: 460: TMR0 = 0;
  2482  002510  0E00               	movlw	0
  2483  002512  6ED3               	movwf	4051,c	;volatile
  2484  002514                     
  2485                           ;Main.c: 462: ms = ms - 4000;
  2486  002514  0E60               	movlw	96
  2487  002516  2445               	addwf	delayMs@ms,w,c
  2488  002518  6E45               	movwf	delayMs@ms,c
  2489  00251A  0EF0               	movlw	240
  2490  00251C  2046               	addwfc	delayMs@ms+1,w,c
  2491  00251E  6E46               	movwf	delayMs@ms+1,c
  2492  002520  D7F9               	goto	l182
  2493  002522                     l183:
  2494  002522  BE46               	btfsc	delayMs@ms+1,7,c
  2495  002524  D006               	goto	u2280
  2496  002526  0EA1               	movlw	161
  2497  002528  5C45               	subwf	delayMs@ms,w,c
  2498  00252A  0E0F               	movlw	15
  2499  00252C  5846               	subwfb	delayMs@ms+1,w,c
  2500  00252E  B0D8               	btfsc	status,0,c
  2501  002530  D7EF               	goto	l180
  2502  002532                     u2280:
  2503                           
  2504                           ;Main.c: 463: }
  2505                           ;Main.c: 464: }
  2506                           ;Main.c: 466: end_count = ms * 15.625;
  2507  002532  0E00               	movlw	0
  2508  002534  6E2A               	movwf	___ftmul@f2,c
  2509  002536  0E7A               	movlw	122
  2510  002538  6E2B               	movwf	___ftmul@f2+1,c
  2511  00253A  0E41               	movlw	65
  2512  00253C  6E2C               	movwf	___ftmul@f2+2,c
  2513  00253E  C045  F009         	movff	delayMs@ms,___awtoft@c
  2514  002542  C046  F00A         	movff	delayMs@ms+1,___awtoft@c+1
  2515  002546  ECE1  F013         	call	___awtoft	;wreg free
  2516  00254A  C009  F027         	movff	?___awtoft,___ftmul@f1
  2517  00254E  C00A  F028         	movff	?___awtoft+1,___ftmul@f1+1
  2518  002552  C00B  F029         	movff	?___awtoft+2,___ftmul@f1+2
  2519  002556  ECA7  F00F         	call	___ftmul	;wreg free
  2520  00255A  C027  F036         	movff	?___ftmul,___fttol@f1
  2521  00255E  C028  F037         	movff	?___ftmul+1,___fttol@f1+1
  2522  002562  C029  F038         	movff	?___ftmul+2,___fttol@f1+2
  2523  002566  EC2D  F00F         	call	___fttol	;wreg free
  2524  00256A  C036  F04C         	movff	?___fttol,delayMs@end_count
  2525  00256E  C037  F04D         	movff	?___fttol+1,delayMs@end_count+1
  2526                           
  2527                           ;Main.c: 467: TMR0 = 0;
  2528  002572  0E00               	movlw	0
  2529  002574  6ED3               	movwf	4051,c	;volatile
  2530                           
  2531                           ;Main.c: 468: while(TMR0<end_count){
  2532  002576  D003               	goto	l185
  2533  002578                     l186:
  2534                           
  2535                           ;Main.c: 469: debug = TMR0;
  2536  002578  CFD3 F04A          	movff	4051,delayMs@debug	;volatile
  2537  00257C  6A4B               	clrf	delayMs@debug+1,c
  2538  00257E                     l185:
  2539  00257E  50D3               	movf	4051,w,c	;volatile
  2540  002580  6E47               	movwf	??_delayMs& (0+255),c
  2541  002582  6A48               	clrf	(??_delayMs+1)& (0+255),c
  2542  002584  504C               	movf	delayMs@end_count,w,c
  2543  002586  5C47               	subwf	??_delayMs,w,c
  2544  002588  5048               	movf	??_delayMs+1,w,c
  2545  00258A  0A80               	xorlw	128
  2546  00258C  6E49               	movwf	(??_delayMs+2)& (0+255),c
  2547  00258E  504D               	movf	delayMs@end_count+1,w,c
  2548  002590  0A80               	xorlw	128
  2549  002592  5849               	subwfb	(??_delayMs+2)& (0+255),w,c
  2550  002594  B0D8               	btfsc	status,0,c
  2551  002596  0012               	return	
  2552  002598  D7EF               	goto	l186
  2553  00259A                     __end_of_delayMs:
  2554                           	opt stack 0
  2555                           tblptru	equ	0xFF8
  2556                           tblptrh	equ	0xFF7
  2557                           tblptrl	equ	0xFF6
  2558                           tablat	equ	0xFF5
  2559                           postinc0	equ	0xFEE
  2560                           wreg	equ	0xFE8
  2561                           postdec1	equ	0xFE5
  2562                           fsr1l	equ	0xFE1
  2563                           status	equ	0xFD8
  2564                           
  2565 ;; *************** function ___fttol *****************
  2566 ;; Defined at:
  2567 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;  f1              3   53[COMRAM] float 
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;  lval            4   63[COMRAM] unsigned long 
  2572 ;;  exp1            1   67[COMRAM] unsigned char 
  2573 ;;  sign1           1   62[COMRAM] unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  4   53[COMRAM] long 
  2576 ;; Registers used:
  2577 ;;		wreg, status,2, status,0
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2583 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2584 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2585 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2586 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2587 ;;Total ram usage:       15 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; This function calls:
  2590 ;;		Nothing
  2591 ;; This function is called by:
  2592 ;;		_delayMs
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text6
  2597  001E5A                     __ptext6:
  2598                           	opt stack 0
  2599  001E5A                     ___fttol:
  2600                           	opt stack 28
  2601                           
  2602                           ;incstack = 0
  2603  001E5A  C038  F03A         	movff	___fttol@f1+2,??___fttol
  2604  001E5E  6A3B               	clrf	(??___fttol+1)& (0+255),c
  2605  001E60  6A3C               	clrf	(??___fttol+2)& (0+255),c
  2606  001E62  3437               	rlcf	___fttol@f1+1,w,c
  2607  001E64  363A               	rlcf	??___fttol& (0+255),f,c
  2608  001E66  E301               	bnc	u2061
  2609  001E68  803B               	bsf	(??___fttol+1)& (0+255),0,c
  2610  001E6A                     u2061:
  2611  001E6A  503A               	movf	??___fttol,w,c
  2612  001E6C  6E44               	movwf	___fttol@exp1,c
  2613  001E6E  5044               	movf	___fttol@exp1,w,c
  2614  001E70  A4D8               	btfss	status,2,c
  2615  001E72  D009               	goto	l678
  2616  001E74  0E00               	movlw	0
  2617  001E76  6E36               	movwf	?___fttol,c
  2618  001E78  0E00               	movlw	0
  2619  001E7A  6E37               	movwf	?___fttol+1,c
  2620  001E7C  0E00               	movlw	0
  2621  001E7E  6E38               	movwf	?___fttol+2,c
  2622  001E80  0E00               	movlw	0
  2623  001E82  6E39               	movwf	?___fttol+3,c
  2624  001E84  0012               	return	
  2625  001E86                     l678:
  2626  001E86  0E17               	movlw	23
  2627  001E88  6E3A               	movwf	??___fttol& (0+255),c
  2628  001E8A  C036  F03B         	movff	___fttol@f1,??___fttol+1
  2629  001E8E  C037  F03C         	movff	___fttol@f1+1,??___fttol+2
  2630  001E92  C038  F03D         	movff	___fttol@f1+2,??___fttol+3
  2631  001E96  283A               	incf	??___fttol,w,c
  2632  001E98  6E3E               	movwf	(??___fttol+4)& (0+255),c
  2633  001E9A  D004               	goto	u2080
  2634  001E9C                     u2085:
  2635  001E9C  90D8               	bcf	status,0,c
  2636  001E9E  323D               	rrcf	??___fttol+3,f,c
  2637  001EA0  323C               	rrcf	??___fttol+2,f,c
  2638  001EA2  323B               	rrcf	??___fttol+1,f,c
  2639  001EA4                     u2080:
  2640  001EA4  2E3E               	decfsz	(??___fttol+4)& (0+255),f,c
  2641  001EA6  D7FA               	goto	u2085
  2642  001EA8  503B               	movf	??___fttol+1,w,c
  2643  001EAA  6E3F               	movwf	___fttol@sign1,c
  2644  001EAC  8E37               	bsf	___fttol@f1+1,7,c
  2645  001EAE  0EFF               	movlw	255
  2646  001EB0  1636               	andwf	___fttol@f1,f,c
  2647  001EB2  0EFF               	movlw	255
  2648  001EB4  1637               	andwf	___fttol@f1+1,f,c
  2649  001EB6  0E00               	movlw	0
  2650  001EB8  1638               	andwf	___fttol@f1+2,f,c
  2651  001EBA  5036               	movf	___fttol@f1,w,c
  2652  001EBC  6E40               	movwf	___fttol@lval,c
  2653  001EBE  5037               	movf	___fttol@f1+1,w,c
  2654  001EC0  6E41               	movwf	___fttol@lval+1,c
  2655  001EC2  5038               	movf	___fttol@f1+2,w,c
  2656  001EC4  6E42               	movwf	___fttol@lval+2,c
  2657  001EC6  6A43               	clrf	___fttol@lval+3,c
  2658  001EC8  0E8E               	movlw	142
  2659  001ECA  5E44               	subwf	___fttol@exp1,f,c
  2660  001ECC  AE44               	btfss	___fttol@exp1,7,c
  2661  001ECE  D016               	goto	l680
  2662  001ED0  5044               	movf	___fttol@exp1,w,c
  2663  001ED2  0A80               	xorlw	128
  2664  001ED4  0F8F               	addlw	143
  2665  001ED6  B0D8               	btfsc	status,0,c
  2666  001ED8  D009               	goto	l681
  2667  001EDA  0E00               	movlw	0
  2668  001EDC  6E36               	movwf	?___fttol,c
  2669  001EDE  0E00               	movlw	0
  2670  001EE0  6E37               	movwf	?___fttol+1,c
  2671  001EE2  0E00               	movlw	0
  2672  001EE4  6E38               	movwf	?___fttol+2,c
  2673  001EE6  0E00               	movlw	0
  2674  001EE8  6E39               	movwf	?___fttol+3,c
  2675  001EEA  0012               	return	
  2676  001EEC                     l681:
  2677  001EEC  90D8               	bcf	status,0,c
  2678  001EEE  3243               	rrcf	___fttol@lval+3,f,c
  2679  001EF0  3242               	rrcf	___fttol@lval+2,f,c
  2680  001EF2  3241               	rrcf	___fttol@lval+1,f,c
  2681  001EF4  3240               	rrcf	___fttol@lval,f,c
  2682  001EF6  3E44               	incfsz	___fttol@exp1,f,c
  2683  001EF8  D7F9               	goto	l681
  2684  001EFA  D015               	goto	u2120
  2685  001EFC                     l680:
  2686  001EFC  0E17               	movlw	23
  2687  001EFE  6444               	cpfsgt	___fttol@exp1,c
  2688  001F00  D00F               	goto	l686
  2689  001F02  0E00               	movlw	0
  2690  001F04  6E36               	movwf	?___fttol,c
  2691  001F06  0E00               	movlw	0
  2692  001F08  6E37               	movwf	?___fttol+1,c
  2693  001F0A  0E00               	movlw	0
  2694  001F0C  6E38               	movwf	?___fttol+2,c
  2695  001F0E  0E00               	movlw	0
  2696  001F10  6E39               	movwf	?___fttol+3,c
  2697  001F12  0012               	return	
  2698  001F14  90D8               	bcf	status,0,c
  2699  001F16  3640               	rlcf	___fttol@lval,f,c
  2700  001F18  3641               	rlcf	___fttol@lval+1,f,c
  2701  001F1A  3642               	rlcf	___fttol@lval+2,f,c
  2702  001F1C  3643               	rlcf	___fttol@lval+3,f,c
  2703  001F1E  0644               	decf	___fttol@exp1,f,c
  2704  001F20                     l686:
  2705  001F20  5044               	movf	___fttol@exp1,w,c
  2706  001F22  A4D8               	btfss	status,2,c
  2707  001F24  D7F7               	goto	l687
  2708  001F26                     u2120:
  2709  001F26  503F               	movf	___fttol@sign1,w,c
  2710  001F28  B4D8               	btfsc	status,2,c
  2711  001F2A  D008               	goto	l689
  2712  001F2C  1E43               	comf	___fttol@lval+3,f,c
  2713  001F2E  1E42               	comf	___fttol@lval+2,f,c
  2714  001F30  1E41               	comf	___fttol@lval+1,f,c
  2715  001F32  6C40               	negf	___fttol@lval,c
  2716  001F34  0E00               	movlw	0
  2717  001F36  2241               	addwfc	___fttol@lval+1,f,c
  2718  001F38  2242               	addwfc	___fttol@lval+2,f,c
  2719  001F3A  2243               	addwfc	___fttol@lval+3,f,c
  2720  001F3C                     l689:
  2721  001F3C  C040  F036         	movff	___fttol@lval,?___fttol
  2722  001F40  C041  F037         	movff	___fttol@lval+1,?___fttol+1
  2723  001F44  C042  F038         	movff	___fttol@lval+2,?___fttol+2
  2724  001F48  C043  F039         	movff	___fttol@lval+3,?___fttol+3
  2725  001F4C  0012               	return	
  2726  001F4E                     __end_of___fttol:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           postinc0	equ	0xFEE
  2733                           wreg	equ	0xFE8
  2734                           postdec1	equ	0xFE5
  2735                           fsr1l	equ	0xFE1
  2736                           status	equ	0xFD8
  2737                           
  2738 ;; *************** function _readEEPromFloat *****************
  2739 ;; Defined at:
  2740 ;;		line 294 in file "Main.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;  EEaddress       3   12[COMRAM] unsigned um
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;  Data0           1   22[COMRAM] unsigned char 
  2745 ;;  Data1           1   21[COMRAM] unsigned char 
  2746 ;;  Data2           1   20[COMRAM] unsigned char 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  3   12[COMRAM] float 
  2749 ;; Registers used:
  2750 ;;		wreg, status,2, status,0, cstack
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2756 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2757 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2758 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2759 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2760 ;;Total ram usage:       11 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    1
  2763 ;; This function calls:
  2764 ;;		_readSPI
  2765 ;; This function is called by:
  2766 ;;		_main
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text7
  2771  002128                     __ptext7:
  2772                           	opt stack 0
  2773  002128                     _readEEPromFloat:
  2774                           	opt stack 29
  2775                           
  2776                           ;Main.c: 295: char Data2 = 0;
  2777                           
  2778                           ;incstack = 0
  2779  002128  0E00               	movlw	0
  2780  00212A  6E15               	movwf	readEEPromFloat@Data2,c
  2781                           
  2782                           ;Main.c: 296: char Data1 = 0;
  2783  00212C  0E00               	movlw	0
  2784  00212E  6E16               	movwf	readEEPromFloat@Data1,c
  2785                           
  2786                           ;Main.c: 297: char Data0 = 0;
  2787  002130  0E00               	movlw	0
  2788  002132  6E17               	movwf	readEEPromFloat@Data0,c
  2789                           
  2790                           ;Main.c: 300: Data0 = readSPI(0, EEaddress);
  2791  002134  0E00               	movlw	0
  2792  002136  6E02               	movwf	readSPI@dummy+1,c
  2793  002138  0E00               	movlw	0
  2794  00213A  6E01               	movwf	readSPI@dummy,c
  2795  00213C  C00D  F003         	movff	readEEPromFloat@EEaddress,readSPI@EEaddress
  2796  002140  C00E  F004         	movff	readEEPromFloat@EEaddress+1,readSPI@EEaddress+1
  2797  002144  C00F  F005         	movff	readEEPromFloat@EEaddress+2,readSPI@EEaddress+2
  2798  002148  EC15  F013         	call	_readSPI	;wreg free
  2799  00214C  6E17               	movwf	readEEPromFloat@Data0,c
  2800                           
  2801                           ;Main.c: 301: Data1 = readSPI(0, EEaddress + 1);
  2802  00214E  0E00               	movlw	0
  2803  002150  6E02               	movwf	readSPI@dummy+1,c
  2804  002152  0E00               	movlw	0
  2805  002154  6E01               	movwf	readSPI@dummy,c
  2806  002156  0E01               	movlw	1
  2807  002158  240D               	addwf	readEEPromFloat@EEaddress,w,c
  2808  00215A  6E03               	movwf	readSPI@EEaddress,c
  2809  00215C  0E00               	movlw	0
  2810  00215E  200E               	addwfc	readEEPromFloat@EEaddress+1,w,c
  2811  002160  6E04               	movwf	readSPI@EEaddress+1,c
  2812  002162  0E00               	movlw	0
  2813  002164  200F               	addwfc	readEEPromFloat@EEaddress+2,w,c
  2814  002166  6E05               	movwf	readSPI@EEaddress+2,c
  2815  002168  EC15  F013         	call	_readSPI	;wreg free
  2816  00216C  6E16               	movwf	readEEPromFloat@Data1,c
  2817                           
  2818                           ;Main.c: 302: Data2 = readSPI(0, EEaddress + 2);
  2819  00216E  0E00               	movlw	0
  2820  002170  6E02               	movwf	readSPI@dummy+1,c
  2821  002172  0E00               	movlw	0
  2822  002174  6E01               	movwf	readSPI@dummy,c
  2823  002176  0E02               	movlw	2
  2824  002178  240D               	addwf	readEEPromFloat@EEaddress,w,c
  2825  00217A  6E03               	movwf	readSPI@EEaddress,c
  2826  00217C  0E00               	movlw	0
  2827  00217E  200E               	addwfc	readEEPromFloat@EEaddress+1,w,c
  2828  002180  6E04               	movwf	readSPI@EEaddress+1,c
  2829  002182  0E00               	movlw	0
  2830  002184  200F               	addwfc	readEEPromFloat@EEaddress+2,w,c
  2831  002186  6E05               	movwf	readSPI@EEaddress+2,c
  2832  002188  EC15  F013         	call	_readSPI	;wreg free
  2833  00218C  6E15               	movwf	readEEPromFloat@Data2,c
  2834                           
  2835                           ;Main.c: 304: EEPromData.L_data = Data2;
  2836  00218E  5015               	movf	readEEPromFloat@Data2,w,c
  2837  002190  6E5D               	movwf	_EEPromData,c
  2838  002192  6A5E               	clrf	_EEPromData+1,c
  2839  002194  6A5F               	clrf	_EEPromData+2,c
  2840                           
  2841                           ;Main.c: 305: EEPromData.L_data = EEPromData.L_data << 16;
  2842  002196  0E10               	movlw	16
  2843  002198  6E10               	movwf	??_readEEPromFloat& (0+255),c
  2844  00219A  C05D  F011         	movff	_EEPromData,??_readEEPromFloat+1
  2845  00219E  C05E  F012         	movff	_EEPromData+1,??_readEEPromFloat+2
  2846  0021A2  C05F  F013         	movff	_EEPromData+2,??_readEEPromFloat+3
  2847  0021A6  2810               	incf	??_readEEPromFloat,w,c
  2848  0021A8  D004               	goto	u2850
  2849  0021AA                     u2855:
  2850  0021AA  90D8               	bcf	status,0,c
  2851  0021AC  3611               	rlcf	??_readEEPromFloat+1,f,c
  2852  0021AE  3612               	rlcf	??_readEEPromFloat+2,f,c
  2853  0021B0  3613               	rlcf	??_readEEPromFloat+3,f,c
  2854  0021B2                     u2850:
  2855  0021B2  2EE8               	decfsz	wreg,f,c
  2856  0021B4  D7FA               	goto	u2855
  2857  0021B6  C011  F05D         	movff	??_readEEPromFloat+1,_EEPromData
  2858  0021BA  C012  F05E         	movff	??_readEEPromFloat+2,_EEPromData+1
  2859  0021BE  C013  F05F         	movff	??_readEEPromFloat+3,_EEPromData+2
  2860                           
  2861                           ;Main.c: 306: EEPromData.L_data = EEPromData.L_data | (Data1 << 8);
  2862  0021C2  5016               	movf	readEEPromFloat@Data1,w,c
  2863  0021C4  6E11               	movwf	(??_readEEPromFloat+1)& (0+255),c
  2864  0021C6  6A10               	clrf	??_readEEPromFloat& (0+255),c
  2865  0021C8  C010  F012         	movff	??_readEEPromFloat,??_readEEPromFloat+2
  2866  0021CC  C011  F013         	movff	??_readEEPromFloat+1,??_readEEPromFloat+3
  2867  0021D0  6A14               	clrf	(??_readEEPromFloat+4)& (0+255),c
  2868  0021D2  BE13               	btfsc	(??_readEEPromFloat+3)& (0+255),7,c
  2869  0021D4  6814               	setf	(??_readEEPromFloat+4)& (0+255),c
  2870  0021D6  505D               	movf	_EEPromData,w,c
  2871  0021D8  1012               	iorwf	??_readEEPromFloat+2,w,c
  2872  0021DA  6E5D               	movwf	_EEPromData,c
  2873  0021DC  505E               	movf	_EEPromData+1,w,c
  2874  0021DE  1013               	iorwf	??_readEEPromFloat+3,w,c
  2875  0021E0  6E5E               	movwf	_EEPromData+1,c
  2876  0021E2  505F               	movf	_EEPromData+2,w,c
  2877  0021E4  1014               	iorwf	??_readEEPromFloat+4,w,c
  2878  0021E6  6E5F               	movwf	_EEPromData+2,c
  2879                           
  2880                           ;Main.c: 307: EEPromData.L_data = EEPromData.L_data | Data0;
  2881  0021E8  5017               	movf	readEEPromFloat@Data0,w,c
  2882  0021EA  105D               	iorwf	_EEPromData,w,c
  2883  0021EC  6E5D               	movwf	_EEPromData,c
  2884  0021EE  0E00               	movlw	0
  2885  0021F0  105E               	iorwf	_EEPromData+1,w,c
  2886  0021F2  6E5E               	movwf	_EEPromData+1,c
  2887  0021F4  0E00               	movlw	0
  2888  0021F6  105F               	iorwf	_EEPromData+2,w,c
  2889  0021F8  6E5F               	movwf	_EEPromData+2,c
  2890                           
  2891                           ;Main.c: 309: return EEPromData.F_data;
  2892  0021FA  C05D  F00D         	movff	_EEPromData,?_readEEPromFloat
  2893  0021FE  C05E  F00E         	movff	_EEPromData+1,?_readEEPromFloat+1
  2894  002202  C05F  F00F         	movff	_EEPromData+2,?_readEEPromFloat+2
  2895  002206  0012               	return	
  2896  002208                     __end_of_readEEPromFloat:
  2897                           	opt stack 0
  2898                           tblptru	equ	0xFF8
  2899                           tblptrh	equ	0xFF7
  2900                           tblptrl	equ	0xFF6
  2901                           tablat	equ	0xFF5
  2902                           postinc0	equ	0xFEE
  2903                           wreg	equ	0xFE8
  2904                           postdec1	equ	0xFE5
  2905                           fsr1l	equ	0xFE1
  2906                           status	equ	0xFD8
  2907                           
  2908 ;; *************** function _readSPI *****************
  2909 ;; Defined at:
  2910 ;;		line 402 in file "Main.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;  dummy           2    0[COMRAM] unsigned int 
  2913 ;;  EEaddress       3    2[COMRAM] unsigned um
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;  local_data      1   11[COMRAM] unsigned char 
  2916 ;;  AdrsLsb         1   10[COMRAM] unsigned char 
  2917 ;;  AdrsMid         1    9[COMRAM] unsigned char 
  2918 ;;  AdrsMsb         1    8[COMRAM] unsigned char 
  2919 ;; Return value:  Size  Location     Type
  2920 ;;                  1    wreg      unsigned char 
  2921 ;; Registers used:
  2922 ;;		wreg, status,2
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2928 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2929 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2930 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2931 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2932 ;;Total ram usage:       12 bytes
  2933 ;; Hardware stack levels used:    1
  2934 ;; This function calls:
  2935 ;;		Nothing
  2936 ;; This function is called by:
  2937 ;;		_readEEPromFloat
  2938 ;;		_main
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text8
  2943  00262A                     __ptext8:
  2944                           	opt stack 0
  2945  00262A                     _readSPI:
  2946                           	opt stack 30
  2947                           
  2948                           ;Main.c: 403: char local_data = 0;
  2949                           
  2950                           ;incstack = 0
  2951  00262A  0E00               	movlw	0
  2952  00262C  6E0C               	movwf	readSPI@local_data,c
  2953                           
  2954                           ;Main.c: 404: char AdrsMsb = 0;
  2955  00262E  0E00               	movlw	0
  2956  002630  6E09               	movwf	readSPI@AdrsMsb,c
  2957                           
  2958                           ;Main.c: 405: char AdrsMid = 0;
  2959  002632  0E00               	movlw	0
  2960  002634  6E0A               	movwf	readSPI@AdrsMid,c
  2961                           
  2962                           ;Main.c: 406: char AdrsLsb = 0;
  2963  002636  0E00               	movlw	0
  2964  002638  6E0B               	movwf	readSPI@AdrsLsb,c
  2965                           
  2966                           ;Main.c: 409: AdrsMsb = (EEaddress >> 16)& 0xff;
  2967  00263A  C005  F009         	movff	readSPI@EEaddress+2,readSPI@AdrsMsb
  2968                           
  2969                           ;Main.c: 410: AdrsMid = (EEaddress >> 8)& 0xff;
  2970  00263E  C003  F006         	movff	readSPI@EEaddress,??_readSPI
  2971  002642  C004  F007         	movff	readSPI@EEaddress+1,??_readSPI+1
  2972  002646  C005  F008         	movff	readSPI@EEaddress+2,??_readSPI+2
  2973  00264A  C007  F006         	movff	??_readSPI+1,??_readSPI
  2974  00264E  C008  F007         	movff	??_readSPI+2,??_readSPI+1
  2975  002652  6A08               	clrf	??_readSPI+2,c
  2976  002654  5006               	movf	??_readSPI,w,c
  2977  002656  6E0A               	movwf	readSPI@AdrsMid,c
  2978                           
  2979                           ;Main.c: 411: AdrsLsb = EEaddress & 0xff;
  2980  002658  C003  F00B         	movff	readSPI@EEaddress,readSPI@AdrsLsb
  2981                           
  2982                           ;Main.c: 413: PORTCbits.RC0 = 1;
  2983  00265C  808F               	bsf	3983,0,c	;volatile
  2984                           
  2985                           ;Main.c: 414: SSP1CON1bits.WCOL = 0;
  2986  00265E  9E96               	bcf	3990,7,c	;volatile
  2987                           
  2988                           ;Main.c: 417: PORTCbits.RC0 = 0;
  2989  002660  908F               	bcf	3983,0,c	;volatile
  2990                           
  2991                           ;Main.c: 419: SSP1BUF = 3;
  2992  002662  0E03               	movlw	3
  2993  002664  6E92               	movwf	3986,c	;volatile
  2994  002666  A095               	btfss	3989,0,c	;volatile
  2995  002668  D7FE               	goto	l162
  2996                           
  2997                           ;Main.c: 421: local_data = SSP1BUF;
  2998  00266A  CF92 F00C          	movff	3986,readSPI@local_data	;volatile
  2999                           
  3000                           ;Main.c: 423: SSP1BUF = AdrsMsb;
  3001  00266E  C009  FF92         	movff	readSPI@AdrsMsb,3986	;volatile
  3002  002672  A095               	btfss	3989,0,c	;volatile
  3003  002674  D7FE               	goto	l165
  3004                           
  3005                           ;Main.c: 425: local_data = SSP1BUF;
  3006  002676  CF92 F00C          	movff	3986,readSPI@local_data	;volatile
  3007                           
  3008                           ;Main.c: 427: SSP1BUF = AdrsMid;
  3009  00267A  C00A  FF92         	movff	readSPI@AdrsMid,3986	;volatile
  3010  00267E  A095               	btfss	3989,0,c	;volatile
  3011  002680  D7FE               	goto	l168
  3012                           
  3013                           ;Main.c: 429: local_data = SSP1BUF;
  3014  002682  CF92 F00C          	movff	3986,readSPI@local_data	;volatile
  3015                           
  3016                           ;Main.c: 431: SSP1BUF = AdrsLsb;
  3017  002686  C00B  FF92         	movff	readSPI@AdrsLsb,3986	;volatile
  3018  00268A  A095               	btfss	3989,0,c	;volatile
  3019  00268C  D7FE               	goto	l171
  3020                           
  3021                           ;Main.c: 433: local_data = SSP1BUF;
  3022  00268E  CF92 F00C          	movff	3986,readSPI@local_data	;volatile
  3023                           
  3024                           ;Main.c: 435: SSP1BUF = 00;
  3025  002692  0E00               	movlw	0
  3026  002694  6E92               	movwf	3986,c	;volatile
  3027  002696  A095               	btfss	3989,0,c	;volatile
  3028  002698  D7FE               	goto	l174
  3029                           
  3030                           ;Main.c: 437: PORTCbits.RC0 = 1;
  3031  00269A  808F               	bsf	3983,0,c	;volatile
  3032                           
  3033                           ;Main.c: 439: local_data = SSP1BUF;
  3034  00269C  CF92 F00C          	movff	3986,readSPI@local_data	;volatile
  3035                           
  3036                           ;Main.c: 440: return local_data;
  3037  0026A0  500C               	movf	readSPI@local_data,w,c
  3038  0026A2  0012               	return	
  3039  0026A4                     __end_of_readSPI:
  3040                           	opt stack 0
  3041                           tblptru	equ	0xFF8
  3042                           tblptrh	equ	0xFF7
  3043                           tblptrl	equ	0xFF6
  3044                           tablat	equ	0xFF5
  3045                           postinc0	equ	0xFEE
  3046                           wreg	equ	0xFE8
  3047                           postdec1	equ	0xFE5
  3048                           fsr1l	equ	0xFE1
  3049                           status	equ	0xFD8
  3050                           
  3051 ;; *************** function _initialization *****************
  3052 ;; Defined at:
  3053 ;;		line 148 in file "Main.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;		None
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;		None
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  1    wreg      void 
  3060 ;; Registers used:
  3061 ;;		wreg, status,2, cstack
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3071 ;;Total ram usage:        0 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    1
  3074 ;; This function calls:
  3075 ;;		_initAdc
  3076 ;;		_initSPI
  3077 ;; This function is called by:
  3078 ;;		_main
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           	psect	text9
  3083  0026A4                     __ptext9:
  3084                           	opt stack 0
  3085  0026A4                     _initialization:
  3086                           	opt stack 29
  3087                           
  3088                           ;Main.c: 152: ANSELA = 0;
  3089                           
  3090                           ;incstack = 0
  3091  0026A4  0E00               	movlw	0
  3092  0026A6  010F               	movlb	15	; () banked
  3093  0026A8  6F11               	movwf	17,b	;volatile
  3094                           
  3095                           ; BSR set to: 15
  3096                           ;Main.c: 153: TRISA = 0xFFFF;
  3097  0026AA  6888               	setf	3976,c	;volatile
  3098                           
  3099                           ;Main.c: 154: ANSELB = 0;
  3100  0026AC  0E00               	movlw	0
  3101  0026AE  6F19               	movwf	25,b	;volatile
  3102                           
  3103                           ; BSR set to: 15
  3104                           ;Main.c: 155: TRISB = 0xFFFF;
  3105  0026B0  6889               	setf	3977,c	;volatile
  3106                           
  3107                           ;Main.c: 156: ANSELC = 0;
  3108  0026B2  0E00               	movlw	0
  3109  0026B4  6F21               	movwf	33,b	;volatile
  3110                           
  3111                           ; BSR set to: 15
  3112                           ;Main.c: 157: TRISC = 0xFFFF;
  3113  0026B6  688A               	setf	3978,c	;volatile
  3114                           
  3115                           ;Main.c: 160: T0CON1bits.T0CS = 3;
  3116  0026B8  50D6               	movf	4054,w,c	;volatile
  3117  0026BA  0B1F               	andlw	-225
  3118  0026BC  0960               	iorlw	96
  3119  0026BE  6ED6               	movwf	4054,c	;volatile
  3120                           
  3121                           ; BSR set to: 15
  3122                           ;Main.c: 161: T0CON0bits.T016BIT = 1;
  3123  0026C0  88D5               	bsf	4053,4,c	;volatile
  3124                           
  3125                           ;Main.c: 162: T0CON1bits.T0CKPS = 8;
  3126  0026C2  50D6               	movf	4054,w,c	;volatile
  3127  0026C4  0BF0               	andlw	-16
  3128  0026C6  0908               	iorlw	8
  3129  0026C8  6ED6               	movwf	4054,c	;volatile
  3130                           
  3131                           ; BSR set to: 15
  3132                           ;Main.c: 163: T0CON0bits.T0EN = 1;
  3133  0026CA  8ED5               	bsf	4053,7,c	;volatile
  3134                           
  3135                           ;Main.c: 168: TMR1CLKbits.CS = 3;
  3136  0026CC  50D2               	movf	4050,w,c	;volatile
  3137  0026CE  0BF0               	andlw	-16
  3138  0026D0  0903               	iorlw	3
  3139  0026D2  6ED2               	movwf	4050,c	;volatile
  3140                           
  3141                           ;Main.c: 169: T1CONbits.CKPS = 3;
  3142  0026D4  0E30               	movlw	48
  3143  0026D6  12CF               	iorwf	4047,f,c	;volatile
  3144                           
  3145                           ; BSR set to: 15
  3146                           ;Main.c: 170: T1CONbits.RD16 = 1;
  3147  0026D8  82CF               	bsf	4047,1,c	;volatile
  3148                           
  3149                           ; BSR set to: 15
  3150                           ;Main.c: 171: T1CONbits.ON = 1;
  3151  0026DA  80CF               	bsf	4047,0,c	;volatile
  3152                           
  3153                           ; BSR set to: 15
  3154                           ;Main.c: 172: T1GCONbits.GE = 0;
  3155  0026DC  9ED0               	bcf	4048,7,c	;volatile
  3156                           
  3157                           ;Main.c: 175: TMR3CLKbits.CS = 3;
  3158  0026DE  50CC               	movf	4044,w,c	;volatile
  3159  0026E0  0BF0               	andlw	-16
  3160  0026E2  0903               	iorlw	3
  3161  0026E4  6ECC               	movwf	4044,c	;volatile
  3162                           
  3163                           ; BSR set to: 15
  3164                           ;Main.c: 176: T3CONbits.RD16 = 1;
  3165  0026E6  82C9               	bsf	4041,1,c	;volatile
  3166                           
  3167                           ;Main.c: 177: T3CONbits.CKPS = 3;
  3168  0026E8  0E30               	movlw	48
  3169  0026EA  12C9               	iorwf	4041,f,c	;volatile
  3170                           
  3171                           ; BSR set to: 15
  3172                           ;Main.c: 178: T3CONbits.ON = 1;
  3173  0026EC  80C9               	bsf	4041,0,c	;volatile
  3174                           
  3175                           ; BSR set to: 15
  3176                           ;Main.c: 180: initAdc();
  3177  0026EE  EC4E  F014         	call	_initAdc	;wreg free
  3178                           
  3179                           ;Main.c: 181: initSPI();
  3180  0026F2  EC15  F014         	call	_initSPI	;wreg free
  3181  0026F6  0012               	return		;funcret
  3182  0026F8                     __end_of_initialization:
  3183                           	opt stack 0
  3184                           tblptru	equ	0xFF8
  3185                           tblptrh	equ	0xFF7
  3186                           tblptrl	equ	0xFF6
  3187                           tablat	equ	0xFF5
  3188                           postinc0	equ	0xFEE
  3189                           wreg	equ	0xFE8
  3190                           postdec1	equ	0xFE5
  3191                           fsr1l	equ	0xFE1
  3192                           status	equ	0xFD8
  3193                           
  3194 ;; *************** function _initSPI *****************
  3195 ;; Defined at:
  3196 ;;		line 237 in file "Main.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;		None
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		wreg, status,2
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3214 ;;Total ram usage:        0 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; This function calls:
  3217 ;;		Nothing
  3218 ;; This function is called by:
  3219 ;;		_initialization
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           	psect	text10
  3224  00282A                     __ptext10:
  3225                           	opt stack 0
  3226  00282A                     _initSPI:
  3227                           	opt stack 29
  3228                           
  3229                           ;Main.c: 238: TRISCbits.TRISC5 = 0;
  3230                           
  3231                           ;incstack = 0
  3232  00282A  9A8A               	bcf	3978,5,c	;volatile
  3233                           
  3234                           ;Main.c: 239: TRISCbits.TRISC3 = 0;
  3235  00282C  968A               	bcf	3978,3,c	;volatile
  3236                           
  3237                           ;Main.c: 240: TRISCbits.TRISC0 = 0;
  3238  00282E  908A               	bcf	3978,0,c	;volatile
  3239                           
  3240                           ;Main.c: 243: SSP1CON1bits.CKP = 0;
  3241  002830  9896               	bcf	3990,4,c	;volatile
  3242                           
  3243                           ;Main.c: 244: SSP1STATbits.CKE = 1;
  3244  002832  8C95               	bsf	3989,6,c	;volatile
  3245                           
  3246                           ;Main.c: 245: SSP1CON1bits.SSPM = 0;
  3247  002834  9096               	bcf	3990,0,c	;volatile
  3248  002836  9296               	bcf	3990,1,c	;volatile
  3249  002838  9496               	bcf	3990,2,c	;volatile
  3250  00283A  9696               	bcf	3990,3,c	;volatile
  3251                           
  3252                           ;Main.c: 246: SSP1CON3bits.BOEN = 0;
  3253  00283C  9898               	bcf	3992,4,c	;volatile
  3254                           
  3255                           ;Main.c: 247: SSP1DATPPS = 20;
  3256  00283E  0E14               	movlw	20
  3257  002840  010E               	movlb	14	; () banked
  3258  002842  6FB8               	movwf	184,b	;volatile
  3259                           
  3260                           ;Main.c: 248: RC3PPS = 15;
  3261  002844  0E0F               	movlw	15
  3262  002846  6FFA               	movwf	250,b	;volatile
  3263                           
  3264                           ;Main.c: 249: RC5PPS = 16;
  3265  002848  0E10               	movlw	16
  3266  00284A  6FFC               	movwf	252,b	;volatile
  3267                           
  3268                           ; BSR set to: 14
  3269                           ;Main.c: 250: SSP1CON1bits.SSPEN = 1;
  3270  00284C  8A96               	bsf	3990,5,c	;volatile
  3271                           
  3272                           ; BSR set to: 14
  3273                           ;Main.c: 251: PORTCbits.RC0 = 1;
  3274  00284E  808F               	bsf	3983,0,c	;volatile
  3275                           
  3276                           ; BSR set to: 14
  3277  002850  0012               	return		;funcret
  3278  002852                     __end_of_initSPI:
  3279                           	opt stack 0
  3280                           tblptru	equ	0xFF8
  3281                           tblptrh	equ	0xFF7
  3282                           tblptrl	equ	0xFF6
  3283                           tablat	equ	0xFF5
  3284                           postinc0	equ	0xFEE
  3285                           wreg	equ	0xFE8
  3286                           postdec1	equ	0xFE5
  3287                           fsr1l	equ	0xFE1
  3288                           status	equ	0xFD8
  3289                           
  3290 ;; *************** function _initAdc *****************
  3291 ;; Defined at:
  3292 ;;		line 650 in file "Main.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;		None
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;		None
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  1    wreg      void 
  3299 ;; Registers used:
  3300 ;;		wreg, status,2
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3310 ;;Total ram usage:        0 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; This function calls:
  3313 ;;		Nothing
  3314 ;; This function is called by:
  3315 ;;		_initialization
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           	psect	text11
  3320  00289C                     __ptext11:
  3321                           	opt stack 0
  3322  00289C                     _initAdc:
  3323                           	opt stack 29
  3324                           
  3325                           ;Main.c: 652: ADCON0bits.ADON = 0;
  3326                           
  3327                           ; BSR set to: 14
  3328                           ;incstack = 0
  3329  00289C  9E60               	bcf	3936,7,c	;volatile
  3330                           
  3331                           ;Main.c: 654: TRISAbits.TRISA4 = 1;
  3332  00289E  8888               	bsf	3976,4,c	;volatile
  3333                           
  3334                           ;Main.c: 655: ANSELAbits.ANSELA4 = 1;
  3335  0028A0  010F               	movlb	15	; () banked
  3336  0028A2  8911               	bsf	17,4,b	;volatile
  3337                           
  3338                           ;Main.c: 656: TRISAbits.TRISA5 = 1;
  3339  0028A4  8A88               	bsf	3976,5,c	;volatile
  3340                           
  3341                           ;Main.c: 657: ANSELAbits.ANSELA5 = 1;
  3342  0028A6  8B11               	bsf	17,5,b	;volatile
  3343                           
  3344                           ; BSR set to: 15
  3345                           ;Main.c: 660: ADREFbits.ADPREF = 0;
  3346  0028A8  0EFC               	movlw	-4
  3347  0028AA  1758               	andwf	88,f,b	;volatile
  3348                           
  3349                           ; BSR set to: 15
  3350                           ;Main.c: 661: ADREFbits.ADNREF = 0;
  3351  0028AC  9958               	bcf	88,4,b	;volatile
  3352                           
  3353                           ; BSR set to: 15
  3354                           ;Main.c: 664: ADCON0bits.ADCS = 0;
  3355  0028AE  9860               	bcf	3936,4,c	;volatile
  3356                           
  3357                           ;Main.c: 665: ADCLK = 3;
  3358  0028B0  0E03               	movlw	3
  3359  0028B2  6F57               	movwf	87,b	;volatile
  3360                           
  3361                           ; BSR set to: 15
  3362                           ;Main.c: 670: ADCON0bits.ADFM = 1;
  3363  0028B4  8460               	bsf	3936,2,c	;volatile
  3364                           
  3365                           ; BSR set to: 15
  3366  0028B6  0012               	return		;funcret
  3367  0028B8                     __end_of_initAdc:
  3368                           	opt stack 0
  3369                           tblptru	equ	0xFF8
  3370                           tblptrh	equ	0xFF7
  3371                           tblptrl	equ	0xFF6
  3372                           tablat	equ	0xFF5
  3373                           postinc0	equ	0xFEE
  3374                           wreg	equ	0xFE8
  3375                           postdec1	equ	0xFE5
  3376                           fsr1l	equ	0xFE1
  3377                           status	equ	0xFD8
  3378                           
  3379 ;; *************** function _getHandleAngle *****************
  3380 ;; Defined at:
  3381 ;;		line 722 in file "Main.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;		None
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  angle           3   43[BANK0 ] float 
  3386 ;;  averageAngle    3    9[BANK0 ] float 
  3387 ;;  yValue          2   41[BANK0 ] int 
  3388 ;;  xValue          2   39[BANK0 ] int 
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  3   87[COMRAM] float 
  3391 ;; Registers used:
  3392 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3398 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3399 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3400 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3401 ;;      Totals:         5      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3402 ;;Total ram usage:       42 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    5
  3405 ;; This function calls:
  3406 ;;		___awtoft
  3407 ;;		___ftadd
  3408 ;;		___ftdiv
  3409 ;;		___ftge
  3410 ;;		___ftmul
  3411 ;;		_atan2
  3412 ;;		_readAdc
  3413 ;; This function is called by:
  3414 ;;		_main
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text12
  3419  000F36                     __ptext12:
  3420                           	opt stack 0
  3421  000F36                     _getHandleAngle:
  3422                           	opt stack 25
  3423                           
  3424                           ;Main.c: 724: signed int xValue = readAdc(xAxis) - signedNumAdjustADC;
  3425                           
  3426                           ; BSR set to: 15
  3427                           ;incstack = 0
  3428  000F36  0E0E               	movlw	low _signedNumAdjustADC
  3429  000F38  6EF6               	movwf	tblptrl,c
  3430  000F3A                     	if	1	;There is more than 1 active tblptr byte
  3431  000F3A  0E0F               	movlw	high _signedNumAdjustADC
  3432  000F3C  6EF7               	movwf	tblptrh,c
  3433  000F3E                     	endif
  3434  000F3E                     	if	1	;There are 3 active tblptr bytes
  3435  000F3E  0E00               	movlw	low (_signedNumAdjustADC shr (0+16))
  3436  000F40  6EF8               	movwf	tblptru,c
  3437  000F42                     	endif
  3438  000F42  0009               	tblrd		*+
  3439  000F44  CFF5 F05B          	movff	tablat,??_getHandleAngle
  3440  000F48  0009               	tblrd		*+
  3441  000F4A  CFF5 F05C          	movff	tablat,??_getHandleAngle+1
  3442  000F4E  1E5B               	comf	??_getHandleAngle,f,c
  3443  000F50  1E5C               	comf	??_getHandleAngle+1,f,c
  3444  000F52  4A5B               	infsnz	??_getHandleAngle,f,c
  3445  000F54  2A5C               	incf	??_getHandleAngle+1,f,c
  3446  000F56  0E12               	movlw	low _xAxis
  3447  000F58  6EF6               	movwf	tblptrl,c
  3448  000F5A                     	if	1	;There is more than 1 active tblptr byte
  3449  000F5A  0E0F               	movlw	high _xAxis
  3450  000F5C  6EF7               	movwf	tblptrh,c
  3451  000F5E                     	endif
  3452  000F5E                     	if	1	;There are 3 active tblptr bytes
  3453  000F5E  0E00               	movlw	low (_xAxis shr (0+16))
  3454  000F60  6EF8               	movwf	tblptru,c
  3455  000F62                     	endif
  3456  000F62  0009               	tblrd		*+
  3457  000F64  CFF5 F001          	movff	tablat,readAdc@pin
  3458  000F68  000A               	tblrd		*-
  3459  000F6A  CFF5 F002          	movff	tablat,readAdc@pin+1
  3460  000F6E  EC7C  F013         	call	_readAdc	;wreg free
  3461  000F72  505B               	movf	??_getHandleAngle,w,c
  3462  000F74  2401               	addwf	?_readAdc,w,c
  3463  000F76  0100               	movlb	0	; () banked
  3464  000F78  6F87               	movwf	getHandleAngle@xValue& (0+255),b
  3465  000F7A  505C               	movf	??_getHandleAngle+1,w,c
  3466  000F7C  2002               	addwfc	?_readAdc+1,w,c
  3467  000F7E  6F88               	movwf	(getHandleAngle@xValue+1)& (0+255),b
  3468                           
  3469                           ;Main.c: 725: signed int yValue = readAdc(yAxis) - signedNumAdjustADC;
  3470  000F80  0E0E               	movlw	low _signedNumAdjustADC
  3471  000F82  6EF6               	movwf	tblptrl,c
  3472  000F84                     	if	1	;There is more than 1 active tblptr byte
  3473  000F84  0E0F               	movlw	high _signedNumAdjustADC
  3474  000F86  6EF7               	movwf	tblptrh,c
  3475  000F88                     	endif
  3476  000F88                     	if	1	;There are 3 active tblptr bytes
  3477  000F88  0E00               	movlw	low (_signedNumAdjustADC shr (0+16))
  3478  000F8A  6EF8               	movwf	tblptru,c
  3479  000F8C                     	endif
  3480  000F8C  0009               	tblrd		*+
  3481  000F8E  CFF5 F05B          	movff	tablat,??_getHandleAngle
  3482  000F92  0009               	tblrd		*+
  3483  000F94  CFF5 F05C          	movff	tablat,??_getHandleAngle+1
  3484  000F98  1E5B               	comf	??_getHandleAngle,f,c
  3485  000F9A  1E5C               	comf	??_getHandleAngle+1,f,c
  3486  000F9C  4A5B               	infsnz	??_getHandleAngle,f,c
  3487  000F9E  2A5C               	incf	??_getHandleAngle+1,f,c
  3488  000FA0  0E10               	movlw	low _yAxis
  3489  000FA2  6EF6               	movwf	tblptrl,c
  3490  000FA4                     	if	1	;There is more than 1 active tblptr byte
  3491  000FA4  0E0F               	movlw	high _yAxis
  3492  000FA6  6EF7               	movwf	tblptrh,c
  3493  000FA8                     	endif
  3494  000FA8                     	if	1	;There are 3 active tblptr bytes
  3495  000FA8  0E00               	movlw	low (_yAxis shr (0+16))
  3496  000FAA  6EF8               	movwf	tblptru,c
  3497  000FAC                     	endif
  3498  000FAC  0009               	tblrd		*+
  3499  000FAE  CFF5 F001          	movff	tablat,readAdc@pin
  3500  000FB2  000A               	tblrd		*-
  3501  000FB4  CFF5 F002          	movff	tablat,readAdc@pin+1
  3502  000FB8  EC7C  F013         	call	_readAdc	;wreg free
  3503  000FBC  505B               	movf	??_getHandleAngle,w,c
  3504  000FBE  2401               	addwf	?_readAdc,w,c
  3505  000FC0  0100               	movlb	0	; () banked
  3506  000FC2  6F89               	movwf	getHandleAngle@yValue& (0+255),b
  3507  000FC4  505C               	movf	??_getHandleAngle+1,w,c
  3508  000FC6  2002               	addwfc	?_readAdc+1,w,c
  3509  000FC8  6F8A               	movwf	(getHandleAngle@yValue+1)& (0+255),b
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;Main.c: 726: float angle = atan2(yValue, xValue) * (180 / PI);
  3513  000FCA  C087  F009         	movff	getHandleAngle@xValue,___awtoft@c
  3514  000FCE  C088  F00A         	movff	getHandleAngle@xValue+1,___awtoft@c+1
  3515  000FD2  ECE1  F013         	call	___awtoft	;wreg free
  3516  000FD6  C009  F055         	movff	?___awtoft,atan2@x
  3517  000FDA  C00A  F056         	movff	?___awtoft+1,atan2@x+1
  3518  000FDE  C00B  F057         	movff	?___awtoft+2,atan2@x+2
  3519  000FE2  C089  F009         	movff	getHandleAngle@yValue,___awtoft@c
  3520  000FE6  C08A  F00A         	movff	getHandleAngle@yValue+1,___awtoft@c+1
  3521  000FEA  ECE1  F013         	call	___awtoft	;wreg free
  3522  000FEE  C009  F052         	movff	?___awtoft,atan2@y
  3523  000FF2  C00A  F053         	movff	?___awtoft+1,atan2@y+1
  3524  000FF6  C00B  F054         	movff	?___awtoft+2,atan2@y+2
  3525  000FFA  ECF1  F00A         	call	_atan2	;wreg free
  3526  000FFE  C052  F06C         	movff	?_atan2,_getHandleAngle$1847
  3527  001002  C053  F06D         	movff	?_atan2+1,_getHandleAngle$1847+1
  3528  001006  C054  F06E         	movff	?_atan2+2,_getHandleAngle$1847+2
  3529                           
  3530                           ;Main.c: 726: float angle = atan2(yValue, xValue) * (180 / PI);
  3531  00100A  C06C  F027         	movff	_getHandleAngle$1847,___ftmul@f1
  3532  00100E  C06D  F028         	movff	_getHandleAngle$1847+1,___ftmul@f1+1
  3533  001012  C06E  F029         	movff	_getHandleAngle$1847+2,___ftmul@f1+2
  3534  001016  0E07               	movlw	low _PI
  3535  001018  6EF6               	movwf	tblptrl,c
  3536  00101A                     	if	1	;There is more than 1 active tblptr byte
  3537  00101A  0E0F               	movlw	high _PI
  3538  00101C  6EF7               	movwf	tblptrh,c
  3539  00101E                     	endif
  3540  00101E                     	if	1	;There are 3 active tblptr bytes
  3541  00101E  0E00               	movlw	low (_PI shr (0+16))
  3542  001020  6EF8               	movwf	tblptru,c
  3543  001022                     	endif
  3544  001022  0009               	tblrd		*+
  3545  001024  CFF5 F01B          	movff	tablat,___ftdiv@f2
  3546  001028  0009               	tblrd		*+
  3547  00102A  CFF5 F01C          	movff	tablat,___ftdiv@f2+1
  3548  00102E  000A               	tblrd		*-
  3549  001030  CFF5 F01D          	movff	tablat,___ftdiv@f2+2
  3550  001034  0E00               	movlw	0
  3551  001036  6E18               	movwf	___ftdiv@f1,c
  3552  001038  0E34               	movlw	52
  3553  00103A  6E19               	movwf	___ftdiv@f1+1,c
  3554  00103C  0E43               	movlw	67
  3555  00103E  6E1A               	movwf	___ftdiv@f1+2,c
  3556  001040  EC21  F010         	call	___ftdiv	;wreg free
  3557  001044  C018  F02A         	movff	?___ftdiv,___ftmul@f2
  3558  001048  C019  F02B         	movff	?___ftdiv+1,___ftmul@f2+1
  3559  00104C  C01A  F02C         	movff	?___ftdiv+2,___ftmul@f2+2
  3560  001050  ECA7  F00F         	call	___ftmul	;wreg free
  3561  001054  C027  F08B         	movff	?___ftmul,getHandleAngle@angle
  3562  001058  C028  F08C         	movff	?___ftmul+1,getHandleAngle@angle+1
  3563  00105C  C029  F08D         	movff	?___ftmul+2,getHandleAngle@angle+2
  3564                           
  3565                           ;Main.c: 728: if (angle > 20) {
  3566  001060  0E00               	movlw	0
  3567  001062  6E0F               	movwf	___ftge@ff1,c
  3568  001064  0EA0               	movlw	160
  3569  001066  6E10               	movwf	___ftge@ff1+1,c
  3570  001068  0E41               	movlw	65
  3571  00106A  6E11               	movwf	___ftge@ff1+2,c
  3572  00106C  C08B  F012         	movff	getHandleAngle@angle,___ftge@ff2
  3573  001070  C08C  F013         	movff	getHandleAngle@angle+1,___ftge@ff2+1
  3574  001074  C08D  F014         	movff	getHandleAngle@angle+2,___ftge@ff2+2
  3575  001078  ECCD  F012         	call	___ftge	;wreg free
  3576  00107C  B0D8               	btfsc	status,0,c
  3577  00107E  D007               	goto	l243
  3578                           
  3579                           ;Main.c: 729: angle = 20.0;
  3580  001080  0E00               	movlw	0
  3581  001082  0100               	movlb	0	; () banked
  3582  001084  6F8B               	movwf	getHandleAngle@angle& (0+255),b
  3583  001086  0EA0               	movlw	160
  3584  001088  6F8C               	movwf	(getHandleAngle@angle+1)& (0+255),b
  3585  00108A  0E41               	movlw	65
  3586  00108C  D016               	goto	L1
  3587  00108E                     l243:
  3588                           
  3589                           ; BSR set to: 0
  3590  00108E  C08B  F00F         	movff	getHandleAngle@angle,___ftge@ff1
  3591  001092  C08C  F010         	movff	getHandleAngle@angle+1,___ftge@ff1+1
  3592  001096  C08D  F011         	movff	getHandleAngle@angle+2,___ftge@ff1+2
  3593  00109A  0E00               	movlw	0
  3594  00109C  6E12               	movwf	___ftge@ff2,c
  3595  00109E  0EF0               	movlw	240
  3596  0010A0  6E13               	movwf	___ftge@ff2+1,c
  3597  0010A2  0EC1               	movlw	193
  3598  0010A4  6E14               	movwf	___ftge@ff2+2,c
  3599  0010A6  ECCD  F012         	call	___ftge	;wreg free
  3600  0010AA  B0D8               	btfsc	status,0,c
  3601  0010AC  D007               	goto	l245
  3602                           
  3603                           ;Main.c: 731: angle = -30.0;
  3604  0010AE  0E00               	movlw	0
  3605  0010B0  0100               	movlb	0	; () banked
  3606  0010B2  6F8B               	movwf	getHandleAngle@angle& (0+255),b
  3607  0010B4  0EF0               	movlw	240
  3608  0010B6  6F8C               	movwf	(getHandleAngle@angle+1)& (0+255),b
  3609  0010B8  0EC1               	movlw	193
  3610  0010BA                     L1:
  3611  0010BA  6F8D               	movwf	(getHandleAngle@angle+2)& (0+255),b
  3612  0010BC                     l245:
  3613                           
  3614                           ;Main.c: 732: }
  3615                           ;Main.c: 733: angle10 = angle9;
  3616                           
  3617                           ; BSR set to: 0
  3618                           
  3619                           ; BSR set to: 0
  3620  0010BC  C0AB  F0A8         	movff	_angle9,_angle10
  3621  0010C0  C0AC  F0A9         	movff	_angle9+1,_angle10+1
  3622  0010C4  C0AD  F0AA         	movff	_angle9+2,_angle10+2
  3623                           
  3624                           ;Main.c: 734: angle9 = angle8;
  3625  0010C8  C0AE  F0AB         	movff	_angle8,_angle9
  3626  0010CC  C0AF  F0AC         	movff	_angle8+1,_angle9+1
  3627  0010D0  C0B0  F0AD         	movff	_angle8+2,_angle9+2
  3628                           
  3629                           ;Main.c: 735: angle8 = angle7;
  3630  0010D4  C0B1  F0AE         	movff	_angle7,_angle8
  3631  0010D8  C0B2  F0AF         	movff	_angle7+1,_angle8+1
  3632  0010DC  C0B3  F0B0         	movff	_angle7+2,_angle8+2
  3633                           
  3634                           ;Main.c: 736: angle7 = angle6;
  3635  0010E0  C0B4  F0B1         	movff	_angle6,_angle7
  3636  0010E4  C0B5  F0B2         	movff	_angle6+1,_angle7+1
  3637  0010E8  C0B6  F0B3         	movff	_angle6+2,_angle7+2
  3638                           
  3639                           ;Main.c: 737: angle6 = angle5;
  3640  0010EC  C0B7  F0B4         	movff	_angle5,_angle6
  3641  0010F0  C0B8  F0B5         	movff	_angle5+1,_angle6+1
  3642  0010F4  C0B9  F0B6         	movff	_angle5+2,_angle6+2
  3643                           
  3644                           ;Main.c: 738: angle5 = angle4;
  3645  0010F8  C0BA  F0B7         	movff	_angle4,_angle5
  3646  0010FC  C0BB  F0B8         	movff	_angle4+1,_angle5+1
  3647  001100  C0BC  F0B9         	movff	_angle4+2,_angle5+2
  3648                           
  3649                           ;Main.c: 739: angle4 = angle3;
  3650  001104  C0BD  F0BA         	movff	_angle3,_angle4
  3651  001108  C0BE  F0BB         	movff	_angle3+1,_angle4+1
  3652  00110C  C0BF  F0BC         	movff	_angle3+2,_angle4+2
  3653                           
  3654                           ;Main.c: 740: angle3 = angle2;
  3655  001110  C0C0  F0BD         	movff	_angle2,_angle3
  3656  001114  C0C1  F0BE         	movff	_angle2+1,_angle3+1
  3657  001118  C0C2  F0BF         	movff	_angle2+2,_angle3+2
  3658                           
  3659                           ;Main.c: 741: angle2 = angle1;
  3660  00111C  C0C3  F0C0         	movff	_angle1,_angle2
  3661  001120  C0C4  F0C1         	movff	_angle1+1,_angle2+1
  3662  001124  C0C5  F0C2         	movff	_angle1+2,_angle2+2
  3663                           
  3664                           ;Main.c: 742: angle1 = angle;
  3665  001128  C08B  F0C3         	movff	getHandleAngle@angle,_angle1
  3666  00112C  C08C  F0C4         	movff	getHandleAngle@angle+1,_angle1+1
  3667  001130  C08D  F0C5         	movff	getHandleAngle@angle+2,_angle1+2
  3668                           
  3669                           ;Main.c: 744: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  3670  001134  C0C0  F00F         	movff	_angle2,___ftadd@f2
  3671  001138  C0C1  F010         	movff	_angle2+1,___ftadd@f2+1
  3672  00113C  C0C2  F011         	movff	_angle2+2,___ftadd@f2+2
  3673  001140  C0C3  F00C         	movff	_angle1,___ftadd@f1
  3674  001144  C0C4  F00D         	movff	_angle1+1,___ftadd@f1+1
  3675  001148  C0C5  F00E         	movff	_angle1+2,___ftadd@f1+2
  3676  00114C  ECFE  F00C         	call	___ftadd	;wreg free
  3677  001150  C00C  F06F         	movff	?___ftadd,_getHandleAngle$1848
  3678  001154  C00D  F070         	movff	?___ftadd+1,_getHandleAngle$1848+1
  3679  001158  C00E  F071         	movff	?___ftadd+2,_getHandleAngle$1848+2
  3680                           
  3681                           ;Main.c: 744: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  3682  00115C  C0BD  F00F         	movff	_angle3,___ftadd@f2
  3683  001160  C0BE  F010         	movff	_angle3+1,___ftadd@f2+1
  3684  001164  C0BF  F011         	movff	_angle3+2,___ftadd@f2+2
  3685  001168  C06F  F00C         	movff	_getHandleAngle$1848,___ftadd@f1
  3686  00116C  C070  F00D         	movff	_getHandleAngle$1848+1,___ftadd@f1+1
  3687  001170  C071  F00E         	movff	_getHandleAngle$1848+2,___ftadd@f1+2
  3688  001174  ECFE  F00C         	call	___ftadd	;wreg free
  3689  001178  C00C  F072         	movff	?___ftadd,_getHandleAngle$1849
  3690  00117C  C00D  F073         	movff	?___ftadd+1,_getHandleAngle$1849+1
  3691  001180  C00E  F074         	movff	?___ftadd+2,_getHandleAngle$1849+2
  3692                           
  3693                           ;Main.c: 744: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  3694  001184  C0BA  F00F         	movff	_angle4,___ftadd@f2
  3695  001188  C0BB  F010         	movff	_angle4+1,___ftadd@f2+1
  3696  00118C  C0BC  F011         	movff	_angle4+2,___ftadd@f2+2
  3697  001190  C072  F00C         	movff	_getHandleAngle$1849,___ftadd@f1
  3698  001194  C073  F00D         	movff	_getHandleAngle$1849+1,___ftadd@f1+1
  3699  001198  C074  F00E         	movff	_getHandleAngle$1849+2,___ftadd@f1+2
  3700  00119C  ECFE  F00C         	call	___ftadd	;wreg free
  3701  0011A0  C00C  F075         	movff	?___ftadd,_getHandleAngle$1850
  3702  0011A4  C00D  F076         	movff	?___ftadd+1,_getHandleAngle$1850+1
  3703  0011A8  C00E  F077         	movff	?___ftadd+2,_getHandleAngle$1850+2
  3704                           
  3705                           ;Main.c: 744: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  3706  0011AC  C0B7  F00F         	movff	_angle5,___ftadd@f2
  3707  0011B0  C0B8  F010         	movff	_angle5+1,___ftadd@f2+1
  3708  0011B4  C0B9  F011         	movff	_angle5+2,___ftadd@f2+2
  3709  0011B8  C075  F00C         	movff	_getHandleAngle$1850,___ftadd@f1
  3710  0011BC  C076  F00D         	movff	_getHandleAngle$1850+1,___ftadd@f1+1
  3711  0011C0  C077  F00E         	movff	_getHandleAngle$1850+2,___ftadd@f1+2
  3712  0011C4  ECFE  F00C         	call	___ftadd	;wreg free
  3713  0011C8  C00C  F078         	movff	?___ftadd,_getHandleAngle$1851
  3714  0011CC  C00D  F079         	movff	?___ftadd+1,_getHandleAngle$1851+1
  3715  0011D0  C00E  F07A         	movff	?___ftadd+2,_getHandleAngle$1851+2
  3716                           
  3717                           ;Main.c: 744: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  3718  0011D4  C0B4  F00F         	movff	_angle6,___ftadd@f2
  3719  0011D8  C0B5  F010         	movff	_angle6+1,___ftadd@f2+1
  3720  0011DC  C0B6  F011         	movff	_angle6+2,___ftadd@f2+2
  3721  0011E0  C078  F00C         	movff	_getHandleAngle$1851,___ftadd@f1
  3722  0011E4  C079  F00D         	movff	_getHandleAngle$1851+1,___ftadd@f1+1
  3723  0011E8  C07A  F00E         	movff	_getHandleAngle$1851+2,___ftadd@f1+2
  3724  0011EC  ECFE  F00C         	call	___ftadd	;wreg free
  3725  0011F0  C00C  F07B         	movff	?___ftadd,_getHandleAngle$1852
  3726  0011F4  C00D  F07C         	movff	?___ftadd+1,_getHandleAngle$1852+1
  3727  0011F8  C00E  F07D         	movff	?___ftadd+2,_getHandleAngle$1852+2
  3728                           
  3729                           ;Main.c: 744: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  3730  0011FC  C0B1  F00F         	movff	_angle7,___ftadd@f2
  3731  001200  C0B2  F010         	movff	_angle7+1,___ftadd@f2+1
  3732  001204  C0B3  F011         	movff	_angle7+2,___ftadd@f2+2
  3733  001208  C07B  F00C         	movff	_getHandleAngle$1852,___ftadd@f1
  3734  00120C  C07C  F00D         	movff	_getHandleAngle$1852+1,___ftadd@f1+1
  3735  001210  C07D  F00E         	movff	_getHandleAngle$1852+2,___ftadd@f1+2
  3736  001214  ECFE  F00C         	call	___ftadd	;wreg free
  3737  001218  C00C  F07E         	movff	?___ftadd,_getHandleAngle$1853
  3738  00121C  C00D  F07F         	movff	?___ftadd+1,_getHandleAngle$1853+1
  3739  001220  C00E  F080         	movff	?___ftadd+2,_getHandleAngle$1853+2
  3740                           
  3741                           ;Main.c: 744: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  3742  001224  C0AE  F00F         	movff	_angle8,___ftadd@f2
  3743  001228  C0AF  F010         	movff	_angle8+1,___ftadd@f2+1
  3744  00122C  C0B0  F011         	movff	_angle8+2,___ftadd@f2+2
  3745  001230  C07E  F00C         	movff	_getHandleAngle$1853,___ftadd@f1
  3746  001234  C07F  F00D         	movff	_getHandleAngle$1853+1,___ftadd@f1+1
  3747  001238  C080  F00E         	movff	_getHandleAngle$1853+2,___ftadd@f1+2
  3748  00123C  ECFE  F00C         	call	___ftadd	;wreg free
  3749  001240  C00C  F081         	movff	?___ftadd,_getHandleAngle$1854
  3750  001244  C00D  F082         	movff	?___ftadd+1,_getHandleAngle$1854+1
  3751  001248  C00E  F083         	movff	?___ftadd+2,_getHandleAngle$1854+2
  3752                           
  3753                           ;Main.c: 744: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  3754  00124C  C0AB  F00F         	movff	_angle9,___ftadd@f2
  3755  001250  C0AC  F010         	movff	_angle9+1,___ftadd@f2+1
  3756  001254  C0AD  F011         	movff	_angle9+2,___ftadd@f2+2
  3757  001258  C081  F00C         	movff	_getHandleAngle$1854,___ftadd@f1
  3758  00125C  C082  F00D         	movff	_getHandleAngle$1854+1,___ftadd@f1+1
  3759  001260  C083  F00E         	movff	_getHandleAngle$1854+2,___ftadd@f1+2
  3760  001264  ECFE  F00C         	call	___ftadd	;wreg free
  3761  001268  C00C  F084         	movff	?___ftadd,_getHandleAngle$1855
  3762  00126C  C00D  F085         	movff	?___ftadd+1,_getHandleAngle$1855+1
  3763  001270  C00E  F086         	movff	?___ftadd+2,_getHandleAngle$1855+2
  3764                           
  3765                           ;Main.c: 744: float averageAngle = (angle1 + angle2 + angle3 + angle4 + angle5 + angle6 
      +                          + angle7 + angle8 + angle9 + angle10) / 10.0;
  3766  001274  C0A8  F00F         	movff	_angle10,___ftadd@f2
  3767  001278  C0A9  F010         	movff	_angle10+1,___ftadd@f2+1
  3768  00127C  C0AA  F011         	movff	_angle10+2,___ftadd@f2+2
  3769  001280  C084  F00C         	movff	_getHandleAngle$1855,___ftadd@f1
  3770  001284  C085  F00D         	movff	_getHandleAngle$1855+1,___ftadd@f1+1
  3771  001288  C086  F00E         	movff	_getHandleAngle$1855+2,___ftadd@f1+2
  3772  00128C  ECFE  F00C         	call	___ftadd	;wreg free
  3773  001290  C00C  F018         	movff	?___ftadd,___ftdiv@f1
  3774  001294  C00D  F019         	movff	?___ftadd+1,___ftdiv@f1+1
  3775  001298  C00E  F01A         	movff	?___ftadd+2,___ftdiv@f1+2
  3776  00129C  0E00               	movlw	0
  3777  00129E  6E1B               	movwf	___ftdiv@f2,c
  3778  0012A0  0E20               	movlw	32
  3779  0012A2  6E1C               	movwf	___ftdiv@f2+1,c
  3780  0012A4  0E41               	movlw	65
  3781  0012A6  6E1D               	movwf	___ftdiv@f2+2,c
  3782  0012A8  EC21  F010         	call	___ftdiv	;wreg free
  3783  0012AC  C018  F069         	movff	?___ftdiv,getHandleAngle@averageAngle
  3784  0012B0  C019  F06A         	movff	?___ftdiv+1,getHandleAngle@averageAngle+1
  3785  0012B4  C01A  F06B         	movff	?___ftdiv+2,getHandleAngle@averageAngle+2
  3786                           
  3787                           ;Main.c: 746: return averageAngle;
  3788  0012B8  C069  F058         	movff	getHandleAngle@averageAngle,?_getHandleAngle
  3789  0012BC  C06A  F059         	movff	getHandleAngle@averageAngle+1,?_getHandleAngle+1
  3790  0012C0  C06B  F05A         	movff	getHandleAngle@averageAngle+2,?_getHandleAngle+2
  3791  0012C4  0012               	return	
  3792  0012C6                     __end_of_getHandleAngle:
  3793                           	opt stack 0
  3794                           tblptru	equ	0xFF8
  3795                           tblptrh	equ	0xFF7
  3796                           tblptrl	equ	0xFF6
  3797                           tablat	equ	0xFF5
  3798                           postinc0	equ	0xFEE
  3799                           wreg	equ	0xFE8
  3800                           postdec1	equ	0xFE5
  3801                           fsr1l	equ	0xFE1
  3802                           status	equ	0xFD8
  3803                           
  3804 ;; *************** function _readAdc *****************
  3805 ;; Defined at:
  3806 ;;		line 675 in file "Main.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;  pin             2    0[COMRAM] int 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  adcValue        2    4[COMRAM] unsigned int 
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  2    0[COMRAM] int 
  3813 ;; Registers used:
  3814 ;;		wreg, status,2, status,0
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3820 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3821 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3822 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3823 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3824 ;;Total ram usage:        6 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_getHandleAngle
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           	psect	text13
  3834  0026F8                     __ptext13:
  3835                           	opt stack 0
  3836  0026F8                     _readAdc:
  3837                           	opt stack 29
  3838                           
  3839                           ;Main.c: 677: switch (pin) {
  3840                           
  3841                           ;incstack = 0
  3842  0026F8  D00B               	goto	l233
  3843  0026FA                     l234:
  3844                           
  3845                           ;Main.c: 680: ADPCHbits.ADPCH = 4;
  3846  0026FA  010F               	movlb	15	; () banked
  3847  0026FC  915F               	bcf	95,0,b	;volatile
  3848  0026FE  D002               	goto	L2
  3849  002700                     l236:
  3850                           
  3851                           ;Main.c: 687: ADPCHbits.ADPCH = 5;
  3852  002700  010F               	movlb	15	; () banked
  3853  002702  815F               	bsf	95,0,b	;volatile
  3854  002704                     L2:
  3855  002704  935F               	bcf	95,1,b	;volatile
  3856  002706  855F               	bsf	95,2,b	;volatile
  3857  002708  975F               	bcf	95,3,b	;volatile
  3858  00270A  995F               	bcf	95,4,b	;volatile
  3859  00270C  9B5F               	bcf	95,5,b	;volatile
  3860                           
  3861                           ; BSR set to: 15
  3862                           ;Main.c: 694: }
  3863                           
  3864                           ;Main.c: 692: break;
  3865  00270E  D00F               	goto	l235
  3866  002710                     l233:
  3867                           
  3868                           ; BSR set to: 15
  3869  002710  C001  F003         	movff	readAdc@pin,??_readAdc
  3870  002714  C002  F004         	movff	readAdc@pin+1,??_readAdc+1
  3871                           
  3872                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3873                           ; Switch size 1, requested type "space"
  3874                           ; Number of cases is 1, Range of values is 0 to 0
  3875                           ; switch strategies available:
  3876                           ; Name         Instructions Cycles
  3877                           ; simple_byte            4     3 (average)
  3878                           ;	Chosen strategy is simple_byte
  3879  002718  5004               	movf	??_readAdc+1,w,c
  3880  00271A  0A00               	xorlw	0	; case 0
  3881  00271C  A4D8               	btfss	status,2,c
  3882  00271E  D007               	goto	l235
  3883                           
  3884                           ; Switch size 1, requested type "space"
  3885                           ; Number of cases is 2, Range of values is 6 to 7
  3886                           ; switch strategies available:
  3887                           ; Name         Instructions Cycles
  3888                           ; simple_byte            7     4 (average)
  3889                           ;	Chosen strategy is simple_byte
  3890  002720  5003               	movf	??_readAdc,w,c
  3891  002722  0A06               	xorlw	6	; case 6
  3892  002724  B4D8               	btfsc	status,2,c
  3893  002726  D7E9               	goto	l234
  3894  002728  0A01               	xorlw	1	; case 7
  3895  00272A  B4D8               	btfsc	status,2,c
  3896  00272C  D7E9               	goto	l236
  3897  00272E                     l235:
  3898                           
  3899                           ;Main.c: 696: ADCON0bits.ADON = 1;
  3900  00272E  8E60               	bsf	3936,7,c	;volatile
  3901                           
  3902                           ;Main.c: 698: ADCON0bits.ADGO = 1;
  3903  002730  8060               	bsf	3936,0,c	;volatile
  3904  002732  B060               	btfsc	3936,0,c	;volatile
  3905  002734  D7FE               	goto	l238
  3906                           
  3907                           ;Main.c: 700: }
  3908                           ;Main.c: 701: unsigned int adcValue = ADRES;
  3909  002736  CF63 F005          	movff	3939,readAdc@adcValue	;volatile
  3910  00273A  CF64 F006          	movff	3940,readAdc@adcValue+1	;volatile
  3911                           
  3912                           ;Main.c: 703: ADCON0bits.ADON = 0;
  3913  00273E  9E60               	bcf	3936,7,c	;volatile
  3914                           
  3915                           ;Main.c: 704: return adcValue;
  3916  002740  C005  F001         	movff	readAdc@adcValue,?_readAdc
  3917  002744  C006  F002         	movff	readAdc@adcValue+1,?_readAdc+1
  3918  002748  0012               	return		;funcret
  3919  00274A                     __end_of_readAdc:
  3920                           	opt stack 0
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           postinc0	equ	0xFEE
  3926                           wreg	equ	0xFE8
  3927                           postdec1	equ	0xFE5
  3928                           fsr1l	equ	0xFE1
  3929                           status	equ	0xFD8
  3930                           
  3931 ;; *************** function _atan2 *****************
  3932 ;; Defined at:
  3933 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\atan2.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;  y               3   81[COMRAM] int 
  3936 ;;  x               3   84[COMRAM] int 
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;  v               3    6[BANK0 ] int 
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  3   81[COMRAM] int 
  3941 ;; Registers used:
  3942 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3948 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3949 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3951 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3952 ;;Total ram usage:       15 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; Hardware stack levels required when called:    4
  3955 ;; This function calls:
  3956 ;;		___ftadd
  3957 ;;		___ftdiv
  3958 ;;		___ftge
  3959 ;;		___ftneg
  3960 ;;		___ftsub
  3961 ;;		_atan
  3962 ;;		_fabs
  3963 ;; This function is called by:
  3964 ;;		_getHandleAngle
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text14
  3969  0015E2                     __ptext14:
  3970                           	opt stack 0
  3971  0015E2                     _atan2:
  3972                           	opt stack 25
  3973                           
  3974                           ;incstack = 0
  3975  0015E2  5055               	movf	atan2@x,w,c
  3976  0015E4  1056               	iorwf	atan2@x+1,w,c
  3977  0015E6  1057               	iorwf	atan2@x+2,w,c
  3978  0015E8  A4D8               	btfss	status,2,c
  3979  0015EA  D02F               	goto	l481
  3980  0015EC  5052               	movf	atan2@y,w,c
  3981  0015EE  1053               	iorwf	atan2@y+1,w,c
  3982  0015F0  1054               	iorwf	atan2@y+2,w,c
  3983  0015F2  A4D8               	btfss	status,2,c
  3984  0015F4  D00C               	goto	l478
  3985  0015F6  0E00               	movlw	0
  3986  0015F8  0100               	movlb	0	; () banked
  3987  0015FA  6FC7               	movwf	(_errno+1)& (0+255),b
  3988  0015FC  0E21               	movlw	33
  3989  0015FE  6FC6               	movwf	_errno& (0+255),b
  3990  001600  0E00               	movlw	0
  3991  001602  6E52               	movwf	?_atan2,c
  3992  001604  0E00               	movlw	0
  3993  001606  6E53               	movwf	?_atan2+1,c
  3994  001608  0E00               	movlw	0
  3995  00160A  6E54               	movwf	?_atan2+2,c
  3996                           
  3997                           ; BSR set to: 0
  3998  00160C  0012               	return	
  3999  00160E                     l478:
  4000                           
  4001                           ; BSR set to: 0
  4002  00160E  0E00               	movlw	0
  4003  001610  6E0F               	movwf	___ftge@ff1,c
  4004  001612  0E00               	movlw	0
  4005  001614  6E10               	movwf	___ftge@ff1+1,c
  4006  001616  0E00               	movlw	0
  4007  001618  6E11               	movwf	___ftge@ff1+2,c
  4008  00161A  C052  F012         	movff	atan2@y,___ftge@ff2
  4009  00161E  C053  F013         	movff	atan2@y+1,___ftge@ff2+1
  4010  001622  C054  F014         	movff	atan2@y+2,___ftge@ff2+2
  4011  001626  ECCD  F012         	call	___ftge	;wreg free
  4012  00162A  B0D8               	btfsc	status,0,c
  4013  00162C  D007               	goto	l480
  4014  00162E  0E10               	movlw	16
  4015  001630  6E52               	movwf	?_atan2,c
  4016  001632  0EC9               	movlw	201
  4017  001634  6E53               	movwf	?_atan2+1,c
  4018  001636  0E3F               	movlw	63
  4019  001638  6E54               	movwf	?_atan2+2,c
  4020  00163A  0012               	return	
  4021  00163C                     l480:
  4022  00163C  0E10               	movlw	16
  4023  00163E  6E52               	movwf	?_atan2,c
  4024  001640  0EC9               	movlw	201
  4025  001642  6E53               	movwf	?_atan2+1,c
  4026  001644  0EBF               	movlw	191
  4027  001646  6E54               	movwf	?_atan2+2,c
  4028  001648  0012               	return	
  4029  00164A                     l481:
  4030  00164A  5052               	movf	atan2@y,w,c
  4031  00164C  1053               	iorwf	atan2@y+1,w,c
  4032  00164E  1054               	iorwf	atan2@y+2,w,c
  4033  001650  A4D8               	btfss	status,2,c
  4034  001652  D01E               	goto	l484
  4035  001654  0E00               	movlw	0
  4036  001656  6E0F               	movwf	___ftge@ff1,c
  4037  001658  0E00               	movlw	0
  4038  00165A  6E10               	movwf	___ftge@ff1+1,c
  4039  00165C  0E00               	movlw	0
  4040  00165E  6E11               	movwf	___ftge@ff1+2,c
  4041  001660  C055  F012         	movff	atan2@x,___ftge@ff2
  4042  001664  C056  F013         	movff	atan2@x+1,___ftge@ff2+1
  4043  001668  C057  F014         	movff	atan2@x+2,___ftge@ff2+2
  4044  00166C  ECCD  F012         	call	___ftge	;wreg free
  4045  001670  B0D8               	btfsc	status,0,c
  4046  001672  D007               	goto	l483
  4047  001674  0E00               	movlw	0
  4048  001676  6E52               	movwf	?_atan2,c
  4049  001678  0E00               	movlw	0
  4050  00167A  6E53               	movwf	?_atan2+1,c
  4051  00167C  0E00               	movlw	0
  4052  00167E  6E54               	movwf	?_atan2+2,c
  4053  001680  0012               	return	
  4054  001682                     l483:
  4055  001682  0E10               	movlw	16
  4056  001684  6E52               	movwf	?_atan2,c
  4057  001686  0E49               	movlw	73
  4058  001688  6E53               	movwf	?_atan2+1,c
  4059  00168A  0E40               	movlw	64
  4060  00168C  6E54               	movwf	?_atan2+2,c
  4061  00168E  0012               	return	
  4062  001690                     l484:
  4063  001690  C055  F00C         	movff	atan2@x,fabs@d
  4064  001694  C056  F00D         	movff	atan2@x+1,fabs@d+1
  4065  001698  C057  F00E         	movff	atan2@x+2,fabs@d+2
  4066  00169C  ECFD  F013         	call	_fabs	;wreg free
  4067  0016A0  C00C  F00F         	movff	?_fabs,___ftge@ff1
  4068  0016A4  C00D  F010         	movff	?_fabs+1,___ftge@ff1+1
  4069  0016A8  C00E  F011         	movff	?_fabs+2,___ftge@ff1+2
  4070  0016AC  C052  F00C         	movff	atan2@y,fabs@d
  4071  0016B0  C053  F00D         	movff	atan2@y+1,fabs@d+1
  4072  0016B4  C054  F00E         	movff	atan2@y+2,fabs@d+2
  4073  0016B8  ECFD  F013         	call	_fabs	;wreg free
  4074  0016BC  C00C  F012         	movff	?_fabs,___ftge@ff2
  4075  0016C0  C00D  F013         	movff	?_fabs+1,___ftge@ff2+1
  4076  0016C4  C00E  F014         	movff	?_fabs+2,___ftge@ff2+2
  4077  0016C8  ECCD  F012         	call	___ftge	;wreg free
  4078  0016CC  A0D8               	btfss	status,0,c
  4079  0016CE  D056               	goto	l485
  4080  0016D0  C052  F018         	movff	atan2@y,___ftdiv@f1
  4081  0016D4  C053  F019         	movff	atan2@y+1,___ftdiv@f1+1
  4082  0016D8  C054  F01A         	movff	atan2@y+2,___ftdiv@f1+2
  4083  0016DC  C055  F01B         	movff	atan2@x,___ftdiv@f2
  4084  0016E0  C056  F01C         	movff	atan2@x+1,___ftdiv@f2+1
  4085  0016E4  C057  F01D         	movff	atan2@x+2,___ftdiv@f2+2
  4086  0016E8  EC21  F010         	call	___ftdiv	;wreg free
  4087  0016EC  C018  F063         	movff	?___ftdiv,_atan2$1856
  4088  0016F0  C019  F064         	movff	?___ftdiv+1,_atan2$1856+1
  4089  0016F4  C01A  F065         	movff	?___ftdiv+2,_atan2$1856+2
  4090  0016F8  C063  F042         	movff	_atan2$1856,atan@f
  4091  0016FC  C064  F043         	movff	_atan2$1856+1,atan@f+1
  4092  001700  C065  F044         	movff	_atan2$1856+2,atan@f+2
  4093  001704  EC20  F00C         	call	_atan	;wreg free
  4094  001708  C042  F066         	movff	?_atan,atan2@v
  4095  00170C  C043  F067         	movff	?_atan+1,atan2@v+1
  4096  001710  C044  F068         	movff	?_atan+2,atan2@v+2
  4097  001714  AE57               	btfss	atan2@x+2,7,c
  4098  001716  D02B               	goto	l488
  4099  001718  BE54               	btfsc	atan2@y+2,7,c
  4100  00171A  D015               	goto	l487
  4101  00171C  C066  F00C         	movff	atan2@v,___ftadd@f1
  4102  001720  C067  F00D         	movff	atan2@v+1,___ftadd@f1+1
  4103  001724  C068  F00E         	movff	atan2@v+2,___ftadd@f1+2
  4104  001728  0E10               	movlw	16
  4105  00172A  6E0F               	movwf	___ftadd@f2,c
  4106  00172C  0E49               	movlw	73
  4107  00172E  6E10               	movwf	___ftadd@f2+1,c
  4108  001730  0E40               	movlw	64
  4109  001732  6E11               	movwf	___ftadd@f2+2,c
  4110  001734  ECFE  F00C         	call	___ftadd	;wreg free
  4111  001738  C00C  F066         	movff	?___ftadd,atan2@v
  4112  00173C  C00D  F067         	movff	?___ftadd+1,atan2@v+1
  4113  001740  C00E  F068         	movff	?___ftadd+2,atan2@v+2
  4114  001744  D014               	goto	l488
  4115  001746                     l487:
  4116  001746  C066  F018         	movff	atan2@v,___ftsub@f1
  4117  00174A  C067  F019         	movff	atan2@v+1,___ftsub@f1+1
  4118  00174E  C068  F01A         	movff	atan2@v+2,___ftsub@f1+2
  4119  001752  0E10               	movlw	16
  4120  001754  6E1B               	movwf	___ftsub@f2,c
  4121  001756  0E49               	movlw	73
  4122  001758  6E1C               	movwf	___ftsub@f2+1,c
  4123  00175A  0E40               	movlw	64
  4124  00175C  6E1D               	movwf	___ftsub@f2+2,c
  4125  00175E  ECA5  F013         	call	___ftsub	;wreg free
  4126  001762  C018  F066         	movff	?___ftsub,atan2@v
  4127  001766  C019  F067         	movff	?___ftsub+1,atan2@v+1
  4128  00176A  C01A  F068         	movff	?___ftsub+2,atan2@v+2
  4129  00176E                     l488:
  4130  00176E  C066  F052         	movff	atan2@v,?_atan2
  4131  001772  C067  F053         	movff	atan2@v+1,?_atan2+1
  4132  001776  C068  F054         	movff	atan2@v+2,?_atan2+2
  4133  00177A  0012               	return	
  4134  00177C                     l485:
  4135  00177C  C052  F01B         	movff	atan2@y,___ftdiv@f2
  4136  001780  C053  F01C         	movff	atan2@y+1,___ftdiv@f2+1
  4137  001784  C054  F01D         	movff	atan2@y+2,___ftdiv@f2+2
  4138  001788  C055  F018         	movff	atan2@x,___ftdiv@f1
  4139  00178C  C056  F019         	movff	atan2@x+1,___ftdiv@f1+1
  4140  001790  C057  F01A         	movff	atan2@x+2,___ftdiv@f1+2
  4141  001794  EC21  F010         	call	___ftdiv	;wreg free
  4142  001798  C018  F063         	movff	?___ftdiv,_atan2$1856
  4143  00179C  C019  F064         	movff	?___ftdiv+1,_atan2$1856+1
  4144  0017A0  C01A  F065         	movff	?___ftdiv+2,_atan2$1856+2
  4145  0017A4  C063  F042         	movff	_atan2$1856,atan@f
  4146  0017A8  C064  F043         	movff	_atan2$1856+1,atan@f+1
  4147  0017AC  C065  F044         	movff	_atan2$1856+2,atan@f+2
  4148  0017B0  EC20  F00C         	call	_atan	;wreg free
  4149  0017B4  C042  F060         	movff	?_atan,_atan2$1857
  4150  0017B8  C043  F061         	movff	?_atan+1,_atan2$1857+1
  4151  0017BC  C044  F062         	movff	?_atan+2,_atan2$1857+2
  4152  0017C0  C060  F009         	movff	_atan2$1857,___ftneg@f1
  4153  0017C4  C061  F00A         	movff	_atan2$1857+1,___ftneg@f1+1
  4154  0017C8  C062  F00B         	movff	_atan2$1857+2,___ftneg@f1+2
  4155  0017CC  EC3C  F014         	call	___ftneg	;wreg free
  4156  0017D0  C009  F066         	movff	?___ftneg,atan2@v
  4157  0017D4  C00A  F067         	movff	?___ftneg+1,atan2@v+1
  4158  0017D8  C00B  F068         	movff	?___ftneg+2,atan2@v+2
  4159  0017DC  AE54               	btfss	atan2@y+2,7,c
  4160  0017DE  D015               	goto	l489
  4161  0017E0  C066  F018         	movff	atan2@v,___ftsub@f1
  4162  0017E4  C067  F019         	movff	atan2@v+1,___ftsub@f1+1
  4163  0017E8  C068  F01A         	movff	atan2@v+2,___ftsub@f1+2
  4164  0017EC  0E10               	movlw	16
  4165  0017EE  6E1B               	movwf	___ftsub@f2,c
  4166  0017F0  0EC9               	movlw	201
  4167  0017F2  6E1C               	movwf	___ftsub@f2+1,c
  4168  0017F4  0E3F               	movlw	63
  4169  0017F6  6E1D               	movwf	___ftsub@f2+2,c
  4170  0017F8  ECA5  F013         	call	___ftsub	;wreg free
  4171  0017FC  C018  F066         	movff	?___ftsub,atan2@v
  4172  001800  C019  F067         	movff	?___ftsub+1,atan2@v+1
  4173  001804  C01A  F068         	movff	?___ftsub+2,atan2@v+2
  4174  001808  D014               	goto	l490
  4175  00180A                     l489:
  4176  00180A  C066  F00C         	movff	atan2@v,___ftadd@f1
  4177  00180E  C067  F00D         	movff	atan2@v+1,___ftadd@f1+1
  4178  001812  C068  F00E         	movff	atan2@v+2,___ftadd@f1+2
  4179  001816  0E10               	movlw	16
  4180  001818  6E0F               	movwf	___ftadd@f2,c
  4181  00181A  0EC9               	movlw	201
  4182  00181C  6E10               	movwf	___ftadd@f2+1,c
  4183  00181E  0E3F               	movlw	63
  4184  001820  6E11               	movwf	___ftadd@f2+2,c
  4185  001822  ECFE  F00C         	call	___ftadd	;wreg free
  4186  001826  C00C  F066         	movff	?___ftadd,atan2@v
  4187  00182A  C00D  F067         	movff	?___ftadd+1,atan2@v+1
  4188  00182E  C00E  F068         	movff	?___ftadd+2,atan2@v+2
  4189  001832                     l490:
  4190  001832  C066  F052         	movff	atan2@v,?_atan2
  4191  001836  C067  F053         	movff	atan2@v+1,?_atan2+1
  4192  00183A  C068  F054         	movff	atan2@v+2,?_atan2+2
  4193  00183E  0012               	return	
  4194  001840                     __end_of_atan2:
  4195                           	opt stack 0
  4196                           tblptru	equ	0xFF8
  4197                           tblptrh	equ	0xFF7
  4198                           tblptrl	equ	0xFF6
  4199                           tablat	equ	0xFF5
  4200                           postinc0	equ	0xFEE
  4201                           wreg	equ	0xFE8
  4202                           postdec1	equ	0xFE5
  4203                           fsr1l	equ	0xFE1
  4204                           status	equ	0xFD8
  4205                           
  4206 ;; *************** function _atan *****************
  4207 ;; Defined at:
  4208 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\atan.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  f               3   65[COMRAM] int 
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  val             3   78[COMRAM] int 
  4213 ;;  val_squared     3   75[COMRAM] int 
  4214 ;;  x               3   71[COMRAM] int 
  4215 ;;  y               3   68[COMRAM] int 
  4216 ;;  recip           1   74[COMRAM] unsigned char 
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  3   65[COMRAM] unsigned char 
  4219 ;; Registers used:
  4220 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4226 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4227 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4229 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4230 ;;Total ram usage:       16 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; Hardware stack levels required when called:    3
  4233 ;; This function calls:
  4234 ;;		___ftadd
  4235 ;;		___ftdiv
  4236 ;;		___ftge
  4237 ;;		___ftmul
  4238 ;;		___ftneg
  4239 ;;		_eval_poly
  4240 ;;		_fabs
  4241 ;; This function is called by:
  4242 ;;		_atan2
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           	psect	text15
  4247  001840                     __ptext15:
  4248                           	opt stack 0
  4249  001840                     _atan:
  4250                           	opt stack 25
  4251                           
  4252                           ;incstack = 0
  4253  001840  C042  F00C         	movff	atan@f,fabs@d
  4254  001844  C043  F00D         	movff	atan@f+1,fabs@d+1
  4255  001848  C044  F00E         	movff	atan@f+2,fabs@d+2
  4256  00184C  ECFD  F013         	call	_fabs	;wreg free
  4257  001850  C00C  F04F         	movff	?_fabs,atan@val
  4258  001854  C00D  F050         	movff	?_fabs+1,atan@val+1
  4259  001858  C00E  F051         	movff	?_fabs+2,atan@val+2
  4260  00185C  504F               	movf	atan@val,w,c
  4261  00185E  1050               	iorwf	atan@val+1,w,c
  4262  001860  1051               	iorwf	atan@val+2,w,c
  4263  001862  A4D8               	btfss	status,2,c
  4264  001864  D007               	goto	l938
  4265  001866  0E00               	movlw	0
  4266  001868  6E42               	movwf	?_atan,c
  4267  00186A  0E00               	movlw	0
  4268  00186C  6E43               	movwf	?_atan+1,c
  4269  00186E  0E00               	movlw	0
  4270  001870  6E44               	movwf	?_atan+2,c
  4271  001872  0012               	return	
  4272  001874                     l938:
  4273  001874  0E00               	movlw	0
  4274  001876  6E0F               	movwf	___ftge@ff1,c
  4275  001878  0E80               	movlw	128
  4276  00187A  6E10               	movwf	___ftge@ff1+1,c
  4277  00187C  0E3F               	movlw	63
  4278  00187E  6E11               	movwf	___ftge@ff1+2,c
  4279  001880  C04F  F012         	movff	atan@val,___ftge@ff2
  4280  001884  C050  F013         	movff	atan@val+1,___ftge@ff2+1
  4281  001888  C051  F014         	movff	atan@val+2,___ftge@ff2+2
  4282  00188C  ECCD  F012         	call	___ftge	;wreg free
  4283  001890  B0D8               	btfsc	status,0,c
  4284  001892  D002               	goto	u2000
  4285  001894  0E01               	movlw	1
  4286  001896  D001               	goto	u2010
  4287  001898                     u2000:
  4288  001898  0E00               	movlw	0
  4289  00189A                     u2010:
  4290  00189A  6E4B               	movwf	atan@recip,c
  4291  00189C  504B               	movf	atan@recip,w,c
  4292  00189E  B4D8               	btfsc	status,2,c
  4293  0018A0  D014               	goto	l940
  4294  0018A2  0E00               	movlw	0
  4295  0018A4  6E18               	movwf	___ftdiv@f1,c
  4296  0018A6  0E80               	movlw	128
  4297  0018A8  6E19               	movwf	___ftdiv@f1+1,c
  4298  0018AA  0E3F               	movlw	63
  4299  0018AC  6E1A               	movwf	___ftdiv@f1+2,c
  4300  0018AE  C04F  F01B         	movff	atan@val,___ftdiv@f2
  4301  0018B2  C050  F01C         	movff	atan@val+1,___ftdiv@f2+1
  4302  0018B6  C051  F01D         	movff	atan@val+2,___ftdiv@f2+2
  4303  0018BA  EC21  F010         	call	___ftdiv	;wreg free
  4304  0018BE  C018  F04F         	movff	?___ftdiv,atan@val
  4305  0018C2  C019  F050         	movff	?___ftdiv+1,atan@val+1
  4306  0018C6  C01A  F051         	movff	?___ftdiv+2,atan@val+2
  4307  0018CA                     l940:
  4308  0018CA  C04F  F027         	movff	atan@val,___ftmul@f1
  4309  0018CE  C050  F028         	movff	atan@val+1,___ftmul@f1+1
  4310  0018D2  C051  F029         	movff	atan@val+2,___ftmul@f1+2
  4311  0018D6  C04F  F02A         	movff	atan@val,___ftmul@f2
  4312  0018DA  C050  F02B         	movff	atan@val+1,___ftmul@f2+1
  4313  0018DE  C051  F02C         	movff	atan@val+2,___ftmul@f2+2
  4314  0018E2  ECA7  F00F         	call	___ftmul	;wreg free
  4315  0018E6  C027  F04C         	movff	?___ftmul,atan@val_squared
  4316  0018EA  C028  F04D         	movff	?___ftmul+1,atan@val_squared+1
  4317  0018EE  C029  F04E         	movff	?___ftmul+2,atan@val_squared+2
  4318  0018F2  C04C  F036         	movff	atan@val_squared,eval_poly@x
  4319  0018F6  C04D  F037         	movff	atan@val_squared+1,eval_poly@x+1
  4320  0018FA  C04E  F038         	movff	atan@val_squared+2,eval_poly@x+2
  4321  0018FE  0E26               	movlw	low atan@coeff_b
  4322  001900  6E39               	movwf	eval_poly@d,c
  4323  001902  0E0F               	movlw	high atan@coeff_b
  4324  001904  6E3A               	movwf	eval_poly@d+1,c
  4325  001906  0E00               	movlw	0
  4326  001908  6E3C               	movwf	eval_poly@n+1,c
  4327  00190A  0E04               	movlw	4
  4328  00190C  6E3B               	movwf	eval_poly@n,c
  4329  00190E  EC04  F011         	call	_eval_poly	;wreg free
  4330  001912  C036  F045         	movff	?_eval_poly,atan@y
  4331  001916  C037  F046         	movff	?_eval_poly+1,atan@y+1
  4332  00191A  C038  F047         	movff	?_eval_poly+2,atan@y+2
  4333  00191E  C04C  F036         	movff	atan@val_squared,eval_poly@x
  4334  001922  C04D  F037         	movff	atan@val_squared+1,eval_poly@x+1
  4335  001926  C04E  F038         	movff	atan@val_squared+2,eval_poly@x+2
  4336  00192A  0E14               	movlw	low atan@coeff_a
  4337  00192C  6E39               	movwf	eval_poly@d,c
  4338  00192E  0E0F               	movlw	high atan@coeff_a
  4339  001930  6E3A               	movwf	eval_poly@d+1,c
  4340  001932  0E00               	movlw	0
  4341  001934  6E3C               	movwf	eval_poly@n+1,c
  4342  001936  0E05               	movlw	5
  4343  001938  6E3B               	movwf	eval_poly@n,c
  4344  00193A  EC04  F011         	call	_eval_poly	;wreg free
  4345  00193E  C036  F048         	movff	?_eval_poly,atan@x
  4346  001942  C037  F049         	movff	?_eval_poly+1,atan@x+1
  4347  001946  C038  F04A         	movff	?_eval_poly+2,atan@x+2
  4348  00194A  C04F  F027         	movff	atan@val,___ftmul@f1
  4349  00194E  C050  F028         	movff	atan@val+1,___ftmul@f1+1
  4350  001952  C051  F029         	movff	atan@val+2,___ftmul@f1+2
  4351  001956  C045  F01B         	movff	atan@y,___ftdiv@f2
  4352  00195A  C046  F01C         	movff	atan@y+1,___ftdiv@f2+1
  4353  00195E  C047  F01D         	movff	atan@y+2,___ftdiv@f2+2
  4354  001962  C048  F018         	movff	atan@x,___ftdiv@f1
  4355  001966  C049  F019         	movff	atan@x+1,___ftdiv@f1+1
  4356  00196A  C04A  F01A         	movff	atan@x+2,___ftdiv@f1+2
  4357  00196E  EC21  F010         	call	___ftdiv	;wreg free
  4358  001972  C018  F02A         	movff	?___ftdiv,___ftmul@f2
  4359  001976  C019  F02B         	movff	?___ftdiv+1,___ftmul@f2+1
  4360  00197A  C01A  F02C         	movff	?___ftdiv+2,___ftmul@f2+2
  4361  00197E  ECA7  F00F         	call	___ftmul	;wreg free
  4362  001982  C027  F04F         	movff	?___ftmul,atan@val
  4363  001986  C028  F050         	movff	?___ftmul+1,atan@val+1
  4364  00198A  C029  F051         	movff	?___ftmul+2,atan@val+2
  4365  00198E  504B               	movf	atan@recip,w,c
  4366  001990  B4D8               	btfsc	status,2,c
  4367  001992  D01C               	goto	l941
  4368  001994  C04F  F009         	movff	atan@val,___ftneg@f1
  4369  001998  C050  F00A         	movff	atan@val+1,___ftneg@f1+1
  4370  00199C  C051  F00B         	movff	atan@val+2,___ftneg@f1+2
  4371  0019A0  EC3C  F014         	call	___ftneg	;wreg free
  4372  0019A4  C009  F00C         	movff	?___ftneg,___ftadd@f1
  4373  0019A8  C00A  F00D         	movff	?___ftneg+1,___ftadd@f1+1
  4374  0019AC  C00B  F00E         	movff	?___ftneg+2,___ftadd@f1+2
  4375  0019B0  0E10               	movlw	16
  4376  0019B2  6E0F               	movwf	___ftadd@f2,c
  4377  0019B4  0EC9               	movlw	201
  4378  0019B6  6E10               	movwf	___ftadd@f2+1,c
  4379  0019B8  0E3F               	movlw	63
  4380  0019BA  6E11               	movwf	___ftadd@f2+2,c
  4381  0019BC  ECFE  F00C         	call	___ftadd	;wreg free
  4382  0019C0  C00C  F04F         	movff	?___ftadd,atan@val
  4383  0019C4  C00D  F050         	movff	?___ftadd+1,atan@val+1
  4384  0019C8  C00E  F051         	movff	?___ftadd+2,atan@val+2
  4385  0019CC                     l941:
  4386  0019CC  BE44               	btfsc	atan@f+2,7,c
  4387  0019CE  D007               	goto	l943
  4388  0019D0  C04F  F042         	movff	atan@val,?_atan
  4389  0019D4  C050  F043         	movff	atan@val+1,?_atan+1
  4390  0019D8  C051  F044         	movff	atan@val+2,?_atan+2
  4391  0019DC  0012               	return	
  4392  0019DE                     l943:
  4393  0019DE  C04F  F009         	movff	atan@val,___ftneg@f1
  4394  0019E2  C050  F00A         	movff	atan@val+1,___ftneg@f1+1
  4395  0019E6  C051  F00B         	movff	atan@val+2,___ftneg@f1+2
  4396  0019EA  EC3C  F014         	call	___ftneg	;wreg free
  4397  0019EE  C009  F042         	movff	?___ftneg,?_atan
  4398  0019F2  C00A  F043         	movff	?___ftneg+1,?_atan+1
  4399  0019F6  C00B  F044         	movff	?___ftneg+2,?_atan+2
  4400  0019FA  0012               	return	
  4401  0019FC                     __end_of_atan:
  4402                           	opt stack 0
  4403                           tblptru	equ	0xFF8
  4404                           tblptrh	equ	0xFF7
  4405                           tblptrl	equ	0xFF6
  4406                           tablat	equ	0xFF5
  4407                           postinc0	equ	0xFEE
  4408                           wreg	equ	0xFE8
  4409                           postdec1	equ	0xFE5
  4410                           fsr1l	equ	0xFE1
  4411                           status	equ	0xFD8
  4412                           
  4413 ;; *************** function _fabs *****************
  4414 ;; Defined at:
  4415 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fabs.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;  d               3   11[COMRAM] unsigned char 
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;		None
  4420 ;; Return value:  Size  Location     Type
  4421 ;;                  3   11[COMRAM] unsigned char 
  4422 ;; Registers used:
  4423 ;;		wreg, status,2, status,0, cstack
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4429 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4432 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4433 ;;Total ram usage:        3 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; Hardware stack levels required when called:    1
  4436 ;; This function calls:
  4437 ;;		___ftneg
  4438 ;; This function is called by:
  4439 ;;		_atan2
  4440 ;;		_atan
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           	psect	text16
  4445  0027FA                     __ptext16:
  4446                           	opt stack 0
  4447  0027FA                     _fabs:
  4448                           	opt stack 27
  4449                           
  4450                           ;incstack = 0
  4451  0027FA  AE0E               	btfss	fabs@d+2,7,c
  4452  0027FC  D00F               	goto	l559
  4453  0027FE  C00C  F009         	movff	fabs@d,___ftneg@f1
  4454  002802  C00D  F00A         	movff	fabs@d+1,___ftneg@f1+1
  4455  002806  C00E  F00B         	movff	fabs@d+2,___ftneg@f1+2
  4456  00280A  EC3C  F014         	call	___ftneg	;wreg free
  4457  00280E  C009  F00C         	movff	?___ftneg,?_fabs
  4458  002812  C00A  F00D         	movff	?___ftneg+1,?_fabs+1
  4459  002816  C00B  F00E         	movff	?___ftneg+2,?_fabs+2
  4460  00281A  0012               	return	
  4461  00281C                     l559:
  4462  00281C  C00C  F00C         	movff	fabs@d,?_fabs
  4463  002820  C00D  F00D         	movff	fabs@d+1,?_fabs+1
  4464  002824  C00E  F00E         	movff	fabs@d+2,?_fabs+2
  4465  002828  0012               	return		;funcret
  4466  00282A                     __end_of_fabs:
  4467                           	opt stack 0
  4468                           tblptru	equ	0xFF8
  4469                           tblptrh	equ	0xFF7
  4470                           tblptrl	equ	0xFF6
  4471                           tablat	equ	0xFF5
  4472                           postinc0	equ	0xFEE
  4473                           wreg	equ	0xFE8
  4474                           postdec1	equ	0xFE5
  4475                           fsr1l	equ	0xFE1
  4476                           status	equ	0xFD8
  4477                           
  4478 ;; *************** function ___ftneg *****************
  4479 ;; Defined at:
  4480 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;  f1              3    8[COMRAM] float 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;		None
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  3    8[COMRAM] float 
  4487 ;; Registers used:
  4488 ;;		wreg, status,2, status,0
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4494 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4497 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4498 ;;Total ram usage:        3 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; This function calls:
  4501 ;;		Nothing
  4502 ;; This function is called by:
  4503 ;;		_main
  4504 ;;		_atan2
  4505 ;;		_fabs
  4506 ;;		_atan
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text17
  4511  002878                     __ptext17:
  4512                           	opt stack 0
  4513  002878                     ___ftneg:
  4514                           	opt stack 27
  4515                           
  4516                           ;incstack = 0
  4517  002878  5009               	movf	___ftneg@f1,w,c
  4518  00287A  100A               	iorwf	___ftneg@f1+1,w,c
  4519  00287C  100B               	iorwf	___ftneg@f1+2,w,c
  4520  00287E  B4D8               	btfsc	status,2,c
  4521  002880  D006               	goto	l668
  4522  002882  0E00               	movlw	0
  4523  002884  1A09               	xorwf	___ftneg@f1,f,c
  4524  002886  0E00               	movlw	0
  4525  002888  1A0A               	xorwf	___ftneg@f1+1,f,c
  4526  00288A  0E80               	movlw	128
  4527  00288C  1A0B               	xorwf	___ftneg@f1+2,f,c
  4528  00288E                     l668:
  4529  00288E  C009  F009         	movff	___ftneg@f1,?___ftneg
  4530  002892  C00A  F00A         	movff	___ftneg@f1+1,?___ftneg+1
  4531  002896  C00B  F00B         	movff	___ftneg@f1+2,?___ftneg+2
  4532  00289A  0012               	return		;funcret
  4533  00289C                     __end_of___ftneg:
  4534                           	opt stack 0
  4535                           tblptru	equ	0xFF8
  4536                           tblptrh	equ	0xFF7
  4537                           tblptrl	equ	0xFF6
  4538                           tablat	equ	0xFF5
  4539                           postinc0	equ	0xFEE
  4540                           wreg	equ	0xFE8
  4541                           postdec1	equ	0xFE5
  4542                           fsr1l	equ	0xFE1
  4543                           status	equ	0xFD8
  4544                           
  4545 ;; *************** function _eval_poly *****************
  4546 ;; Defined at:
  4547 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;  x               3   53[COMRAM] float 
  4550 ;;  d               2   56[COMRAM] PTR const 
  4551 ;;		 -> atan@coeff_a(18), atan@coeff_b(15), 
  4552 ;;  n               2   58[COMRAM] int 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  res             3   62[COMRAM] int 
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  3   53[COMRAM] int 
  4557 ;; Registers used:
  4558 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4564 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4565 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4566 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4567 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4568 ;;Total ram usage:       12 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; Hardware stack levels required when called:    2
  4571 ;; This function calls:
  4572 ;;		___ftadd
  4573 ;;		___ftmul
  4574 ;;		___wmul
  4575 ;; This function is called by:
  4576 ;;		_atan
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           	psect	text18
  4581  002208                     __ptext18:
  4582                           	opt stack 0
  4583  002208                     _eval_poly:
  4584                           	opt stack 25
  4585                           
  4586                           ;incstack = 0
  4587  002208  C03B  F001         	movff	eval_poly@n,___wmul@multiplier
  4588  00220C  C03C  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  4589  002210  0E00               	movlw	0
  4590  002212  6E04               	movwf	___wmul@multiplicand+1,c
  4591  002214  0E03               	movlw	3
  4592  002216  6E03               	movwf	___wmul@multiplicand,c
  4593  002218  EC29  F014         	call	___wmul	;wreg free
  4594  00221C  C039  F03D         	movff	eval_poly@d,??_eval_poly
  4595  002220  C03A  F03E         	movff	eval_poly@d+1,??_eval_poly+1
  4596  002224  5001               	movf	?___wmul,w,c
  4597  002226  263D               	addwf	??_eval_poly,f,c
  4598  002228  5002               	movf	?___wmul+1,w,c
  4599  00222A  223E               	addwfc	??_eval_poly+1,f,c
  4600  00222C  C03D  FFF6         	movff	??_eval_poly,tblptrl
  4601  002230  C03E  FFF7         	movff	??_eval_poly+1,tblptrh
  4602  002234                     	if	0	;tblptru may be non-zero
  4603  002234                     	endif
  4604  002234                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4605  002234  0E00               	movlw	low (__mediumconst shr (0+16))
  4606  002236  6EF8               	movwf	tblptru,c
  4607  002238                     	endif
  4608  002238  0009               	tblrd		*+
  4609  00223A  CFF5 F03F          	movff	tablat,eval_poly@res
  4610  00223E  0009               	tblrd		*+
  4611  002240  CFF5 F040          	movff	tablat,eval_poly@res+1
  4612  002244  000A               	tblrd		*-
  4613  002246  CFF5 F041          	movff	tablat,eval_poly@res+2
  4614  00224A  D040               	goto	l948
  4615  00224C  C03F  F02A         	movff	eval_poly@res,___ftmul@f2
  4616  002250  C040  F02B         	movff	eval_poly@res+1,___ftmul@f2+1
  4617  002254  C041  F02C         	movff	eval_poly@res+2,___ftmul@f2+2
  4618  002258  C036  F027         	movff	eval_poly@x,___ftmul@f1
  4619  00225C  C037  F028         	movff	eval_poly@x+1,___ftmul@f1+1
  4620  002260  C038  F029         	movff	eval_poly@x+2,___ftmul@f1+2
  4621  002264  ECA7  F00F         	call	___ftmul	;wreg free
  4622  002268  C027  F00C         	movff	?___ftmul,___ftadd@f1
  4623  00226C  C028  F00D         	movff	?___ftmul+1,___ftadd@f1+1
  4624  002270  C029  F00E         	movff	?___ftmul+2,___ftadd@f1+2
  4625  002274  0E00               	movlw	0
  4626  002276  6E04               	movwf	___wmul@multiplicand+1,c
  4627  002278  0E03               	movlw	3
  4628  00227A  6E03               	movwf	___wmul@multiplicand,c
  4629  00227C  063B               	decf	eval_poly@n,f,c
  4630  00227E  A0D8               	btfss	status,0,c
  4631  002280  063C               	decf	eval_poly@n+1,f,c
  4632  002282  C03B  F001         	movff	eval_poly@n,___wmul@multiplier
  4633  002286  C03C  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  4634  00228A  EC29  F014         	call	___wmul	;wreg free
  4635  00228E  C039  F03D         	movff	eval_poly@d,??_eval_poly
  4636  002292  C03A  F03E         	movff	eval_poly@d+1,??_eval_poly+1
  4637  002296  5001               	movf	?___wmul,w,c
  4638  002298  263D               	addwf	??_eval_poly,f,c
  4639  00229A  5002               	movf	?___wmul+1,w,c
  4640  00229C  223E               	addwfc	??_eval_poly+1,f,c
  4641  00229E  C03D  FFF6         	movff	??_eval_poly,tblptrl
  4642  0022A2  C03E  FFF7         	movff	??_eval_poly+1,tblptrh
  4643  0022A6                     	if	0	;tblptru may be non-zero
  4644  0022A6                     	endif
  4645  0022A6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4646  0022A6  0E00               	movlw	low (__mediumconst shr (0+16))
  4647  0022A8  6EF8               	movwf	tblptru,c
  4648  0022AA                     	endif
  4649  0022AA  0009               	tblrd		*+
  4650  0022AC  CFF5 F00F          	movff	tablat,___ftadd@f2
  4651  0022B0  0009               	tblrd		*+
  4652  0022B2  CFF5 F010          	movff	tablat,___ftadd@f2+1
  4653  0022B6  000A               	tblrd		*-
  4654  0022B8  CFF5 F011          	movff	tablat,___ftadd@f2+2
  4655  0022BC  ECFE  F00C         	call	___ftadd	;wreg free
  4656  0022C0  C00C  F03F         	movff	?___ftadd,eval_poly@res
  4657  0022C4  C00D  F040         	movff	?___ftadd+1,eval_poly@res+1
  4658  0022C8  C00E  F041         	movff	?___ftadd+2,eval_poly@res+2
  4659  0022CC                     l948:
  4660  0022CC  503B               	movf	eval_poly@n,w,c
  4661  0022CE  103C               	iorwf	eval_poly@n+1,w,c
  4662  0022D0  A4D8               	btfss	status,2,c
  4663  0022D2  D7BC               	goto	l949
  4664  0022D4  C03F  F036         	movff	eval_poly@res,?_eval_poly
  4665  0022D8  C040  F037         	movff	eval_poly@res+1,?_eval_poly+1
  4666  0022DC  C041  F038         	movff	eval_poly@res+2,?_eval_poly+2
  4667  0022E0  0012               	return		;funcret
  4668  0022E2                     __end_of_eval_poly:
  4669                           	opt stack 0
  4670                           tblptru	equ	0xFF8
  4671                           tblptrh	equ	0xFF7
  4672                           tblptrl	equ	0xFF6
  4673                           tablat	equ	0xFF5
  4674                           postinc0	equ	0xFEE
  4675                           wreg	equ	0xFE8
  4676                           postdec1	equ	0xFE5
  4677                           fsr1l	equ	0xFE1
  4678                           status	equ	0xFD8
  4679                           
  4680 ;; *************** function ___wmul *****************
  4681 ;; Defined at:
  4682 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;  multiplier      2    0[COMRAM] unsigned int 
  4685 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;  product         2    4[COMRAM] unsigned int 
  4688 ;; Return value:  Size  Location     Type
  4689 ;;                  2    0[COMRAM] unsigned int 
  4690 ;; Registers used:
  4691 ;;		wreg, status,2, status,0, prodl, prodh
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4697 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4698 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4700 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4701 ;;Total ram usage:        6 bytes
  4702 ;; Hardware stack levels used:    1
  4703 ;; This function calls:
  4704 ;;		Nothing
  4705 ;; This function is called by:
  4706 ;;		_eval_poly
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           	psect	text19
  4711  002852                     __ptext19:
  4712                           	opt stack 0
  4713  002852                     ___wmul:
  4714                           	opt stack 26
  4715                           
  4716                           ;incstack = 0
  4717  002852  5001               	movf	___wmul@multiplier,w,c
  4718  002854  0203               	mulwf	___wmul@multiplicand,c
  4719  002856  CFF3 F005          	movff	prodl,___wmul@product
  4720  00285A  CFF4 F006          	movff	prodh,___wmul@product+1
  4721  00285E  5001               	movf	___wmul@multiplier,w,c
  4722  002860  0204               	mulwf	___wmul@multiplicand+1,c
  4723  002862  50F3               	movf	prodl,w,c
  4724  002864  2606               	addwf	___wmul@product+1,f,c
  4725  002866  5002               	movf	___wmul@multiplier+1,w,c
  4726  002868  0203               	mulwf	___wmul@multiplicand,c
  4727  00286A  50F3               	movf	prodl,w,c
  4728  00286C  2606               	addwf	___wmul@product+1,f,c
  4729  00286E  C005  F001         	movff	___wmul@product,?___wmul
  4730  002872  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4731  002876  0012               	return	
  4732  002878                     __end_of___wmul:
  4733                           	opt stack 0
  4734                           tblptru	equ	0xFF8
  4735                           tblptrh	equ	0xFF7
  4736                           tblptrl	equ	0xFF6
  4737                           tablat	equ	0xFF5
  4738                           prodh	equ	0xFF4
  4739                           prodl	equ	0xFF3
  4740                           postinc0	equ	0xFEE
  4741                           wreg	equ	0xFE8
  4742                           postdec1	equ	0xFE5
  4743                           fsr1l	equ	0xFE1
  4744                           status	equ	0xFD8
  4745                           
  4746 ;; *************** function ___ftmul *****************
  4747 ;; Defined at:
  4748 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;  f1              3   38[COMRAM] float 
  4751 ;;  f2              3   41[COMRAM] float 
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;  f3_as_produc    3   48[COMRAM] unsigned um
  4754 ;;  sign            1   52[COMRAM] unsigned char 
  4755 ;;  cntr            1   51[COMRAM] unsigned char 
  4756 ;;  exp             1   47[COMRAM] unsigned char 
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  3   38[COMRAM] float 
  4759 ;; Registers used:
  4760 ;;		wreg, status,2, status,0, cstack
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4766 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4767 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4768 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4769 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4770 ;;Total ram usage:       15 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    1
  4773 ;; This function calls:
  4774 ;;		___ftpack
  4775 ;; This function is called by:
  4776 ;;		_delayMs
  4777 ;;		_getHandleAngle
  4778 ;;		_main
  4779 ;;		_atan
  4780 ;;		_eval_poly
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           	psect	text20
  4785  001F4E                     __ptext20:
  4786                           	opt stack 0
  4787  001F4E                     ___ftmul:
  4788                           	opt stack 27
  4789                           
  4790                           ;incstack = 0
  4791  001F4E  C029  F02D         	movff	___ftmul@f1+2,??___ftmul
  4792  001F52  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  4793  001F54  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  4794  001F56  3428               	rlcf	___ftmul@f1+1,w,c
  4795  001F58  362D               	rlcf	??___ftmul& (0+255),f,c
  4796  001F5A  E301               	bnc	u1811
  4797  001F5C  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  4798  001F5E                     u1811:
  4799  001F5E  502D               	movf	??___ftmul,w,c
  4800  001F60  6E30               	movwf	___ftmul@exp,c
  4801  001F62  5030               	movf	___ftmul@exp,w,c
  4802  001F64  A4D8               	btfss	status,2,c
  4803  001F66  D007               	goto	l657
  4804  001F68  0E00               	movlw	0
  4805  001F6A  6E27               	movwf	?___ftmul,c
  4806  001F6C  0E00               	movlw	0
  4807  001F6E  6E28               	movwf	?___ftmul+1,c
  4808  001F70  0E00               	movlw	0
  4809  001F72  6E29               	movwf	?___ftmul+2,c
  4810  001F74  0012               	return	
  4811  001F76                     l657:
  4812  001F76  C02C  F02D         	movff	___ftmul@f2+2,??___ftmul
  4813  001F7A  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  4814  001F7C  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  4815  001F7E  342B               	rlcf	___ftmul@f2+1,w,c
  4816  001F80  362D               	rlcf	??___ftmul& (0+255),f,c
  4817  001F82  E301               	bnc	u1831
  4818  001F84  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  4819  001F86                     u1831:
  4820  001F86  502D               	movf	??___ftmul,w,c
  4821  001F88  6E35               	movwf	___ftmul@sign,c
  4822  001F8A  5035               	movf	___ftmul@sign,w,c
  4823  001F8C  A4D8               	btfss	status,2,c
  4824  001F8E  D007               	goto	l659
  4825  001F90  0E00               	movlw	0
  4826  001F92  6E27               	movwf	?___ftmul,c
  4827  001F94  0E00               	movlw	0
  4828  001F96  6E28               	movwf	?___ftmul+1,c
  4829  001F98  0E00               	movlw	0
  4830  001F9A  6E29               	movwf	?___ftmul+2,c
  4831  001F9C  0012               	return	
  4832  001F9E                     l659:
  4833  001F9E  5035               	movf	___ftmul@sign,w,c
  4834  001FA0  0F7B               	addlw	123
  4835  001FA2  2630               	addwf	___ftmul@exp,f,c
  4836  001FA4  C029  F035         	movff	___ftmul@f1+2,___ftmul@sign
  4837  001FA8  502C               	movf	___ftmul@f2+2,w,c
  4838  001FAA  1A35               	xorwf	___ftmul@sign,f,c
  4839  001FAC  0E80               	movlw	128
  4840  001FAE  1635               	andwf	___ftmul@sign,f,c
  4841  001FB0  8E28               	bsf	___ftmul@f1+1,7,c
  4842  001FB2  8E2B               	bsf	___ftmul@f2+1,7,c
  4843  001FB4  0EFF               	movlw	255
  4844  001FB6  162A               	andwf	___ftmul@f2,f,c
  4845  001FB8  0EFF               	movlw	255
  4846  001FBA  162B               	andwf	___ftmul@f2+1,f,c
  4847  001FBC  0E00               	movlw	0
  4848  001FBE  162C               	andwf	___ftmul@f2+2,f,c
  4849  001FC0  0E00               	movlw	0
  4850  001FC2  6E31               	movwf	___ftmul@f3_as_product,c
  4851  001FC4  0E00               	movlw	0
  4852  001FC6  6E32               	movwf	___ftmul@f3_as_product+1,c
  4853  001FC8  0E00               	movlw	0
  4854  001FCA  6E33               	movwf	___ftmul@f3_as_product+2,c
  4855  001FCC  0E07               	movlw	7
  4856  001FCE  6E34               	movwf	___ftmul@cntr,c
  4857  001FD0  A027               	btfss	___ftmul@f1,0,c
  4858  001FD2  D006               	goto	l661
  4859  001FD4  502A               	movf	___ftmul@f2,w,c
  4860  001FD6  2631               	addwf	___ftmul@f3_as_product,f,c
  4861  001FD8  502B               	movf	___ftmul@f2+1,w,c
  4862  001FDA  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  4863  001FDC  502C               	movf	___ftmul@f2+2,w,c
  4864  001FDE  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  4865  001FE0                     l661:
  4866  001FE0  90D8               	bcf	status,0,c
  4867  001FE2  3229               	rrcf	___ftmul@f1+2,f,c
  4868  001FE4  3228               	rrcf	___ftmul@f1+1,f,c
  4869  001FE6  3227               	rrcf	___ftmul@f1,f,c
  4870  001FE8  90D8               	bcf	status,0,c
  4871  001FEA  362A               	rlcf	___ftmul@f2,f,c
  4872  001FEC  362B               	rlcf	___ftmul@f2+1,f,c
  4873  001FEE  362C               	rlcf	___ftmul@f2+2,f,c
  4874  001FF0  2E34               	decfsz	___ftmul@cntr,f,c
  4875  001FF2  D7EE               	goto	l660
  4876  001FF4  0E09               	movlw	9
  4877  001FF6  6E34               	movwf	___ftmul@cntr,c
  4878  001FF8  A027               	btfss	___ftmul@f1,0,c
  4879  001FFA  D006               	goto	l664
  4880  001FFC  502A               	movf	___ftmul@f2,w,c
  4881  001FFE  2631               	addwf	___ftmul@f3_as_product,f,c
  4882  002000  502B               	movf	___ftmul@f2+1,w,c
  4883  002002  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  4884  002004  502C               	movf	___ftmul@f2+2,w,c
  4885  002006  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  4886  002008                     l664:
  4887  002008  90D8               	bcf	status,0,c
  4888  00200A  3229               	rrcf	___ftmul@f1+2,f,c
  4889  00200C  3228               	rrcf	___ftmul@f1+1,f,c
  4890  00200E  3227               	rrcf	___ftmul@f1,f,c
  4891  002010  90D8               	bcf	status,0,c
  4892  002012  3233               	rrcf	___ftmul@f3_as_product+2,f,c
  4893  002014  3232               	rrcf	___ftmul@f3_as_product+1,f,c
  4894  002016  3231               	rrcf	___ftmul@f3_as_product,f,c
  4895  002018  2E34               	decfsz	___ftmul@cntr,f,c
  4896  00201A  D7EE               	goto	l663
  4897  00201C  C031  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4898  002020  C032  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4899  002024  C033  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4900  002028  C030  F004         	movff	___ftmul@exp,___ftpack@exp
  4901  00202C  C035  F005         	movff	___ftmul@sign,___ftpack@sign
  4902  002030  ECDA  F011         	call	___ftpack	;wreg free
  4903  002034  C001  F027         	movff	?___ftpack,?___ftmul
  4904  002038  C002  F028         	movff	?___ftpack+1,?___ftmul+1
  4905  00203C  C003  F029         	movff	?___ftpack+2,?___ftmul+2
  4906  002040  0012               	return	
  4907  002042                     __end_of___ftmul:
  4908                           	opt stack 0
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           prodh	equ	0xFF4
  4914                           prodl	equ	0xFF3
  4915                           postinc0	equ	0xFEE
  4916                           wreg	equ	0xFE8
  4917                           postdec1	equ	0xFE5
  4918                           fsr1l	equ	0xFE1
  4919                           status	equ	0xFD8
  4920                           
  4921 ;; *************** function ___ftge *****************
  4922 ;; Defined at:
  4923 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;  ff1             3   14[COMRAM] float 
  4926 ;;  ff2             3   17[COMRAM] float 
  4927 ;; Auto vars:     Size  Location     Type
  4928 ;;		None
  4929 ;; Return value:  Size  Location     Type
  4930 ;;		None               void
  4931 ;; Registers used:
  4932 ;;		wreg, status,2, status,0
  4933 ;; Tracked objects:
  4934 ;;		On entry : 0/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4938 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4940 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4941 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4942 ;;Total ram usage:        9 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; This function calls:
  4945 ;;		Nothing
  4946 ;; This function is called by:
  4947 ;;		_getHandleAngle
  4948 ;;		_main
  4949 ;;		_atan2
  4950 ;;		_atan
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           	psect	text21
  4955  00259A                     __ptext21:
  4956                           	opt stack 0
  4957  00259A                     ___ftge:
  4958                           	opt stack 27
  4959                           
  4960                           ;incstack = 0
  4961  00259A  AE11               	btfss	___ftge@ff1+2,7,c
  4962  00259C  D016               	goto	l650
  4963  00259E  C00F  F015         	movff	___ftge@ff1,??___ftge
  4964  0025A2  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  4965  0025A6  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  4966  0025AA  1E15               	comf	??___ftge,f,c
  4967  0025AC  1E16               	comf	??___ftge+1,f,c
  4968  0025AE  1E17               	comf	??___ftge+2,f,c
  4969  0025B0  2A15               	incf	??___ftge,f,c
  4970  0025B2  0E00               	movlw	0
  4971  0025B4  2216               	addwfc	??___ftge+1,f,c
  4972  0025B6  2217               	addwfc	??___ftge+2,f,c
  4973  0025B8  0E00               	movlw	0
  4974  0025BA  2415               	addwf	??___ftge,w,c
  4975  0025BC  6E0F               	movwf	___ftge@ff1,c
  4976  0025BE  0E00               	movlw	0
  4977  0025C0  2016               	addwfc	??___ftge+1,w,c
  4978  0025C2  6E10               	movwf	___ftge@ff1+1,c
  4979  0025C4  0E80               	movlw	128
  4980  0025C6  2017               	addwfc	??___ftge+2,w,c
  4981  0025C8  6E11               	movwf	___ftge@ff1+2,c
  4982  0025CA                     l650:
  4983  0025CA  AE14               	btfss	___ftge@ff2+2,7,c
  4984  0025CC  D016               	goto	l651
  4985  0025CE  C012  F015         	movff	___ftge@ff2,??___ftge
  4986  0025D2  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  4987  0025D6  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  4988  0025DA  1E15               	comf	??___ftge,f,c
  4989  0025DC  1E16               	comf	??___ftge+1,f,c
  4990  0025DE  1E17               	comf	??___ftge+2,f,c
  4991  0025E0  2A15               	incf	??___ftge,f,c
  4992  0025E2  0E00               	movlw	0
  4993  0025E4  2216               	addwfc	??___ftge+1,f,c
  4994  0025E6  2217               	addwfc	??___ftge+2,f,c
  4995  0025E8  0E00               	movlw	0
  4996  0025EA  2415               	addwf	??___ftge,w,c
  4997  0025EC  6E12               	movwf	___ftge@ff2,c
  4998  0025EE  0E00               	movlw	0
  4999  0025F0  2016               	addwfc	??___ftge+1,w,c
  5000  0025F2  6E13               	movwf	___ftge@ff2+1,c
  5001  0025F4  0E80               	movlw	128
  5002  0025F6  2017               	addwfc	??___ftge+2,w,c
  5003  0025F8  6E14               	movwf	___ftge@ff2+2,c
  5004  0025FA                     l651:
  5005  0025FA  0E00               	movlw	0
  5006  0025FC  1A0F               	xorwf	___ftge@ff1,f,c
  5007  0025FE  0E00               	movlw	0
  5008  002600  1A10               	xorwf	___ftge@ff1+1,f,c
  5009  002602  0E80               	movlw	128
  5010  002604  1A11               	xorwf	___ftge@ff1+2,f,c
  5011  002606  0E00               	movlw	0
  5012  002608  1A12               	xorwf	___ftge@ff2,f,c
  5013  00260A  0E00               	movlw	0
  5014  00260C  1A13               	xorwf	___ftge@ff2+1,f,c
  5015  00260E  0E80               	movlw	128
  5016  002610  1A14               	xorwf	___ftge@ff2+2,f,c
  5017  002612  5012               	movf	___ftge@ff2,w,c
  5018  002614  5C0F               	subwf	___ftge@ff1,w,c
  5019  002616  5013               	movf	___ftge@ff2+1,w,c
  5020  002618  5810               	subwfb	___ftge@ff1+1,w,c
  5021  00261A  5014               	movf	___ftge@ff2+2,w,c
  5022  00261C  5811               	subwfb	___ftge@ff1+2,w,c
  5023  00261E  B0D8               	btfsc	status,0,c
  5024  002620  D002               	goto	l1883
  5025  002622  90D8               	bcf	status,0,c
  5026  002624  0012               	return	
  5027  002626                     l1883:
  5028  002626  80D8               	bsf	status,0,c
  5029  002628  0012               	return	
  5030  00262A                     __end_of___ftge:
  5031                           	opt stack 0
  5032                           tblptru	equ	0xFF8
  5033                           tblptrh	equ	0xFF7
  5034                           tblptrl	equ	0xFF6
  5035                           tablat	equ	0xFF5
  5036                           prodh	equ	0xFF4
  5037                           prodl	equ	0xFF3
  5038                           postinc0	equ	0xFEE
  5039                           wreg	equ	0xFE8
  5040                           postdec1	equ	0xFE5
  5041                           fsr1l	equ	0xFE1
  5042                           status	equ	0xFD8
  5043                           
  5044 ;; *************** function ___ftdiv *****************
  5045 ;; Defined at:
  5046 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;  f1              3   23[COMRAM] float 
  5049 ;;  f2              3   26[COMRAM] float 
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;  f3              3   33[COMRAM] float 
  5052 ;;  sign            1   37[COMRAM] unsigned char 
  5053 ;;  exp             1   36[COMRAM] unsigned char 
  5054 ;;  cntr            1   32[COMRAM] unsigned char 
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  3   23[COMRAM] float 
  5057 ;; Registers used:
  5058 ;;		wreg, status,2, status,0, cstack
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5064 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5065 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5066 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5067 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5068 ;;Total ram usage:       15 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; Hardware stack levels required when called:    1
  5071 ;; This function calls:
  5072 ;;		___ftpack
  5073 ;; This function is called by:
  5074 ;;		_getHandleAngle
  5075 ;;		_atan2
  5076 ;;		_atan
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           	psect	text22
  5081  002042                     __ptext22:
  5082                           	opt stack 0
  5083  002042                     ___ftdiv:
  5084                           	opt stack 26
  5085                           
  5086                           ;incstack = 0
  5087  002042  C01A  F01E         	movff	___ftdiv@f1+2,??___ftdiv
  5088  002046  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  5089  002048  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  5090  00204A  3419               	rlcf	___ftdiv@f1+1,w,c
  5091  00204C  361E               	rlcf	??___ftdiv& (0+255),f,c
  5092  00204E  E301               	bnc	u1881
  5093  002050  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  5094  002052                     u1881:
  5095  002052  501E               	movf	??___ftdiv,w,c
  5096  002054  6E25               	movwf	___ftdiv@exp,c
  5097  002056  5025               	movf	___ftdiv@exp,w,c
  5098  002058  A4D8               	btfss	status,2,c
  5099  00205A  D007               	goto	l642
  5100  00205C  0E00               	movlw	0
  5101  00205E  6E18               	movwf	?___ftdiv,c
  5102  002060  0E00               	movlw	0
  5103  002062  6E19               	movwf	?___ftdiv+1,c
  5104  002064  0E00               	movlw	0
  5105  002066  6E1A               	movwf	?___ftdiv+2,c
  5106  002068  0012               	return	
  5107  00206A                     l642:
  5108  00206A  C01D  F01E         	movff	___ftdiv@f2+2,??___ftdiv
  5109  00206E  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  5110  002070  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  5111  002072  341C               	rlcf	___ftdiv@f2+1,w,c
  5112  002074  361E               	rlcf	??___ftdiv& (0+255),f,c
  5113  002076  E301               	bnc	u1901
  5114  002078  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  5115  00207A                     u1901:
  5116  00207A  501E               	movf	??___ftdiv,w,c
  5117  00207C  6E26               	movwf	___ftdiv@sign,c
  5118  00207E  5026               	movf	___ftdiv@sign,w,c
  5119  002080  A4D8               	btfss	status,2,c
  5120  002082  D007               	goto	l644
  5121  002084  0E00               	movlw	0
  5122  002086  6E18               	movwf	?___ftdiv,c
  5123  002088  0E00               	movlw	0
  5124  00208A  6E19               	movwf	?___ftdiv+1,c
  5125  00208C  0E00               	movlw	0
  5126  00208E  6E1A               	movwf	?___ftdiv+2,c
  5127  002090  0012               	return	
  5128  002092                     l644:
  5129  002092  0E00               	movlw	0
  5130  002094  6E22               	movwf	___ftdiv@f3,c
  5131  002096  0E00               	movlw	0
  5132  002098  6E23               	movwf	___ftdiv@f3+1,c
  5133  00209A  0E00               	movlw	0
  5134  00209C  6E24               	movwf	___ftdiv@f3+2,c
  5135  00209E  5026               	movf	___ftdiv@sign,w,c
  5136  0020A0  0F89               	addlw	137
  5137  0020A2  5E25               	subwf	___ftdiv@exp,f,c
  5138  0020A4  C01A  F026         	movff	___ftdiv@f1+2,___ftdiv@sign
  5139  0020A8  501D               	movf	___ftdiv@f2+2,w,c
  5140  0020AA  1A26               	xorwf	___ftdiv@sign,f,c
  5141  0020AC  0E80               	movlw	128
  5142  0020AE  1626               	andwf	___ftdiv@sign,f,c
  5143  0020B0  8E19               	bsf	___ftdiv@f1+1,7,c
  5144  0020B2  0EFF               	movlw	255
  5145  0020B4  1618               	andwf	___ftdiv@f1,f,c
  5146  0020B6  0EFF               	movlw	255
  5147  0020B8  1619               	andwf	___ftdiv@f1+1,f,c
  5148  0020BA  0E00               	movlw	0
  5149  0020BC  161A               	andwf	___ftdiv@f1+2,f,c
  5150  0020BE  8E1C               	bsf	___ftdiv@f2+1,7,c
  5151  0020C0  0EFF               	movlw	255
  5152  0020C2  161B               	andwf	___ftdiv@f2,f,c
  5153  0020C4  0EFF               	movlw	255
  5154  0020C6  161C               	andwf	___ftdiv@f2+1,f,c
  5155  0020C8  0E00               	movlw	0
  5156  0020CA  161D               	andwf	___ftdiv@f2+2,f,c
  5157  0020CC  0E18               	movlw	24
  5158  0020CE  6E21               	movwf	___ftdiv@cntr,c
  5159  0020D0  90D8               	bcf	status,0,c
  5160  0020D2  3622               	rlcf	___ftdiv@f3,f,c
  5161  0020D4  3623               	rlcf	___ftdiv@f3+1,f,c
  5162  0020D6  3624               	rlcf	___ftdiv@f3+2,f,c
  5163  0020D8  501B               	movf	___ftdiv@f2,w,c
  5164  0020DA  5C18               	subwf	___ftdiv@f1,w,c
  5165  0020DC  501C               	movf	___ftdiv@f2+1,w,c
  5166  0020DE  5819               	subwfb	___ftdiv@f1+1,w,c
  5167  0020E0  501D               	movf	___ftdiv@f2+2,w,c
  5168  0020E2  581A               	subwfb	___ftdiv@f1+2,w,c
  5169  0020E4  A0D8               	btfss	status,0,c
  5170  0020E6  D007               	goto	l646
  5171  0020E8  501B               	movf	___ftdiv@f2,w,c
  5172  0020EA  5E18               	subwf	___ftdiv@f1,f,c
  5173  0020EC  501C               	movf	___ftdiv@f2+1,w,c
  5174  0020EE  5A19               	subwfb	___ftdiv@f1+1,f,c
  5175  0020F0  501D               	movf	___ftdiv@f2+2,w,c
  5176  0020F2  5A1A               	subwfb	___ftdiv@f1+2,f,c
  5177  0020F4  8022               	bsf	___ftdiv@f3,0,c
  5178  0020F6                     l646:
  5179  0020F6  90D8               	bcf	status,0,c
  5180  0020F8  3618               	rlcf	___ftdiv@f1,f,c
  5181  0020FA  3619               	rlcf	___ftdiv@f1+1,f,c
  5182  0020FC  361A               	rlcf	___ftdiv@f1+2,f,c
  5183  0020FE  2E21               	decfsz	___ftdiv@cntr,f,c
  5184  002100  D7E7               	goto	l645
  5185  002102  C022  F001         	movff	___ftdiv@f3,___ftpack@arg
  5186  002106  C023  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5187  00210A  C024  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5188  00210E  C025  F004         	movff	___ftdiv@exp,___ftpack@exp
  5189  002112  C026  F005         	movff	___ftdiv@sign,___ftpack@sign
  5190  002116  ECDA  F011         	call	___ftpack	;wreg free
  5191  00211A  C001  F018         	movff	?___ftpack,?___ftdiv
  5192  00211E  C002  F019         	movff	?___ftpack+1,?___ftdiv+1
  5193  002122  C003  F01A         	movff	?___ftpack+2,?___ftdiv+2
  5194  002126  0012               	return	
  5195  002128                     __end_of___ftdiv:
  5196                           	opt stack 0
  5197                           tblptru	equ	0xFF8
  5198                           tblptrh	equ	0xFF7
  5199                           tblptrl	equ	0xFF6
  5200                           tablat	equ	0xFF5
  5201                           prodh	equ	0xFF4
  5202                           prodl	equ	0xFF3
  5203                           postinc0	equ	0xFEE
  5204                           wreg	equ	0xFE8
  5205                           postdec1	equ	0xFE5
  5206                           fsr1l	equ	0xFE1
  5207                           status	equ	0xFD8
  5208                           
  5209 ;; *************** function ___ftsub *****************
  5210 ;; Defined at:
  5211 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  f1              3   23[COMRAM] float 
  5214 ;;  f2              3   26[COMRAM] float 
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;		None
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  3   23[COMRAM] float 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2, status,0, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5226 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5229 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5230 ;;Total ram usage:        6 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    2
  5233 ;; This function calls:
  5234 ;;		___ftadd
  5235 ;; This function is called by:
  5236 ;;		_atan2
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           	psect	text23
  5241  00274A                     __ptext23:
  5242                           	opt stack 0
  5243  00274A                     ___ftsub:
  5244                           	opt stack 26
  5245                           
  5246                           ;incstack = 0
  5247  00274A  501B               	movf	___ftsub@f2,w,c
  5248  00274C  101C               	iorwf	___ftsub@f2+1,w,c
  5249  00274E  101D               	iorwf	___ftsub@f2+2,w,c
  5250  002750  B4D8               	btfsc	status,2,c
  5251  002752  D006               	goto	l674
  5252  002754  0E00               	movlw	0
  5253  002756  1A1B               	xorwf	___ftsub@f2,f,c
  5254  002758  0E00               	movlw	0
  5255  00275A  1A1C               	xorwf	___ftsub@f2+1,f,c
  5256  00275C  0E80               	movlw	128
  5257  00275E  1A1D               	xorwf	___ftsub@f2+2,f,c
  5258  002760                     l674:
  5259  002760  C018  F00C         	movff	___ftsub@f1,___ftadd@f1
  5260  002764  C019  F00D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5261  002768  C01A  F00E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5262  00276C  C01B  F00F         	movff	___ftsub@f2,___ftadd@f2
  5263  002770  C01C  F010         	movff	___ftsub@f2+1,___ftadd@f2+1
  5264  002774  C01D  F011         	movff	___ftsub@f2+2,___ftadd@f2+2
  5265  002778  ECFE  F00C         	call	___ftadd	;wreg free
  5266  00277C  C00C  F018         	movff	?___ftadd,?___ftsub
  5267  002780  C00D  F019         	movff	?___ftadd+1,?___ftsub+1
  5268  002784  C00E  F01A         	movff	?___ftadd+2,?___ftsub+2
  5269  002788  0012               	return	
  5270  00278A                     __end_of___ftsub:
  5271                           	opt stack 0
  5272                           tblptru	equ	0xFF8
  5273                           tblptrh	equ	0xFF7
  5274                           tblptrl	equ	0xFF6
  5275                           tablat	equ	0xFF5
  5276                           prodh	equ	0xFF4
  5277                           prodl	equ	0xFF3
  5278                           postinc0	equ	0xFEE
  5279                           wreg	equ	0xFE8
  5280                           postdec1	equ	0xFE5
  5281                           fsr1l	equ	0xFE1
  5282                           status	equ	0xFD8
  5283                           
  5284 ;; *************** function ___ftadd *****************
  5285 ;; Defined at:
  5286 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;  f1              3   11[COMRAM] float 
  5289 ;;  f2              3   14[COMRAM] float 
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;  exp1            1   22[COMRAM] unsigned char 
  5292 ;;  exp2            1   21[COMRAM] unsigned char 
  5293 ;;  sign            1   20[COMRAM] unsigned char 
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  3   11[COMRAM] float 
  5296 ;; Registers used:
  5297 ;;		wreg, status,2, status,0, cstack
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5303 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5304 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5305 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5306 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5307 ;;Total ram usage:       12 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    1
  5310 ;; This function calls:
  5311 ;;		___ftpack
  5312 ;; This function is called by:
  5313 ;;		_getHandleAngle
  5314 ;;		_main
  5315 ;;		_atan2
  5316 ;;		___ftsub
  5317 ;;		_atan
  5318 ;;		_eval_poly
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text24
  5323  0019FC                     __ptext24:
  5324                           	opt stack 0
  5325  0019FC                     ___ftadd:
  5326                           	opt stack 25
  5327                           
  5328                           ;incstack = 0
  5329  0019FC  C00E  F012         	movff	___ftadd@f1+2,??___ftadd
  5330  001A00  6A13               	clrf	(??___ftadd+1)& (0+255),c
  5331  001A02  6A14               	clrf	(??___ftadd+2)& (0+255),c
  5332  001A04  340D               	rlcf	___ftadd@f1+1,w,c
  5333  001A06  3612               	rlcf	??___ftadd& (0+255),f,c
  5334  001A08  E301               	bnc	u1601
  5335  001A0A  8013               	bsf	(??___ftadd+1)& (0+255),0,c
  5336  001A0C                     u1601:
  5337  001A0C  5012               	movf	??___ftadd,w,c
  5338  001A0E  6E17               	movwf	___ftadd@exp1,c
  5339  001A10  C011  F012         	movff	___ftadd@f2+2,??___ftadd
  5340  001A14  6A13               	clrf	(??___ftadd+1)& (0+255),c
  5341  001A16  6A14               	clrf	(??___ftadd+2)& (0+255),c
  5342  001A18  3410               	rlcf	___ftadd@f2+1,w,c
  5343  001A1A  3612               	rlcf	??___ftadd& (0+255),f,c
  5344  001A1C  E301               	bnc	u1611
  5345  001A1E  8013               	bsf	(??___ftadd+1)& (0+255),0,c
  5346  001A20                     u1611:
  5347  001A20  5012               	movf	??___ftadd,w,c
  5348  001A22  6E16               	movwf	___ftadd@exp2,c
  5349  001A24  5017               	movf	___ftadd@exp1,w,c
  5350  001A26  B4D8               	btfsc	status,2,c
  5351  001A28  D00B               	goto	u1640
  5352  001A2A  5016               	movf	___ftadd@exp2,w,c
  5353  001A2C  5C17               	subwf	___ftadd@exp1,w,c
  5354  001A2E  B0D8               	btfsc	status,0,c
  5355  001A30  D00E               	goto	l609
  5356  001A32  5017               	movf	___ftadd@exp1,w,c
  5357  001A34  0800               	sublw	0
  5358  001A36  2416               	addwf	___ftadd@exp2,w,c
  5359  001A38  6E12               	movwf	??___ftadd& (0+255),c
  5360  001A3A  0E18               	movlw	24
  5361  001A3C  6412               	cpfsgt	??___ftadd,c
  5362  001A3E  D007               	goto	l609
  5363  001A40                     u1640:
  5364  001A40  C00F  F00C         	movff	___ftadd@f2,?___ftadd
  5365  001A44  C010  F00D         	movff	___ftadd@f2+1,?___ftadd+1
  5366  001A48  C011  F00E         	movff	___ftadd@f2+2,?___ftadd+2
  5367  001A4C  0012               	return	
  5368  001A4E                     l609:
  5369  001A4E  5016               	movf	___ftadd@exp2,w,c
  5370  001A50  B4D8               	btfsc	status,2,c
  5371  001A52  D00B               	goto	u1670
  5372  001A54  5017               	movf	___ftadd@exp1,w,c
  5373  001A56  5C16               	subwf	___ftadd@exp2,w,c
  5374  001A58  B0D8               	btfsc	status,0,c
  5375  001A5A  D00E               	goto	l613
  5376  001A5C  5016               	movf	___ftadd@exp2,w,c
  5377  001A5E  0800               	sublw	0
  5378  001A60  2417               	addwf	___ftadd@exp1,w,c
  5379  001A62  6E12               	movwf	??___ftadd& (0+255),c
  5380  001A64  0E18               	movlw	24
  5381  001A66  6412               	cpfsgt	??___ftadd,c
  5382  001A68  D007               	goto	l613
  5383  001A6A                     u1670:
  5384  001A6A  C00C  F00C         	movff	___ftadd@f1,?___ftadd
  5385  001A6E  C00D  F00D         	movff	___ftadd@f1+1,?___ftadd+1
  5386  001A72  C00E  F00E         	movff	___ftadd@f1+2,?___ftadd+2
  5387  001A76  0012               	return	
  5388  001A78                     l613:
  5389  001A78  0E06               	movlw	6
  5390  001A7A  6E15               	movwf	___ftadd@sign,c
  5391  001A7C  BE0E               	btfsc	___ftadd@f1+2,7,c
  5392  001A7E  8E15               	bsf	___ftadd@sign,7,c
  5393  001A80  BE11               	btfsc	___ftadd@f2+2,7,c
  5394  001A82  8C15               	bsf	___ftadd@sign,6,c
  5395  001A84  8E0D               	bsf	___ftadd@f1+1,7,c
  5396  001A86  0EFF               	movlw	255
  5397  001A88  160C               	andwf	___ftadd@f1,f,c
  5398  001A8A  0EFF               	movlw	255
  5399  001A8C  160D               	andwf	___ftadd@f1+1,f,c
  5400  001A8E  0E00               	movlw	0
  5401  001A90  160E               	andwf	___ftadd@f1+2,f,c
  5402  001A92  8E10               	bsf	___ftadd@f2+1,7,c
  5403  001A94  0EFF               	movlw	255
  5404  001A96  160F               	andwf	___ftadd@f2,f,c
  5405  001A98  0EFF               	movlw	255
  5406  001A9A  1610               	andwf	___ftadd@f2+1,f,c
  5407  001A9C  0E00               	movlw	0
  5408  001A9E  1611               	andwf	___ftadd@f2+2,f,c
  5409  001AA0  5016               	movf	___ftadd@exp2,w,c
  5410  001AA2  5C17               	subwf	___ftadd@exp1,w,c
  5411  001AA4  B0D8               	btfsc	status,0,c
  5412  001AA6  D01B               	goto	l618
  5413  001AA8                     u1700:
  5414  001AA8  90D8               	bcf	status,0,c
  5415  001AAA  360F               	rlcf	___ftadd@f2,f,c
  5416  001AAC  3610               	rlcf	___ftadd@f2+1,f,c
  5417  001AAE  3611               	rlcf	___ftadd@f2+2,f,c
  5418  001AB0  0616               	decf	___ftadd@exp2,f,c
  5419  001AB2  5017               	movf	___ftadd@exp1,w,c
  5420  001AB4  1816               	xorwf	___ftadd@exp2,w,c
  5421  001AB6  B4D8               	btfsc	status,2,c
  5422  001AB8  D00D               	goto	l623
  5423  001ABA  0615               	decf	___ftadd@sign,f,c
  5424  001ABC  C015  F012         	movff	___ftadd@sign,??___ftadd
  5425  001AC0  0E07               	movlw	7
  5426  001AC2  1612               	andwf	??___ftadd,f,c
  5427  001AC4  B4D8               	btfsc	status,2,c
  5428  001AC6  D006               	goto	l623
  5429  001AC8  D7EF               	goto	u1700
  5430  001ACA  90D8               	bcf	status,0,c
  5431  001ACC  320E               	rrcf	___ftadd@f1+2,f,c
  5432  001ACE  320D               	rrcf	___ftadd@f1+1,f,c
  5433  001AD0  320C               	rrcf	___ftadd@f1,f,c
  5434  001AD2  2A17               	incf	___ftadd@exp1,f,c
  5435  001AD4                     l623:
  5436  001AD4  5016               	movf	___ftadd@exp2,w,c
  5437  001AD6  1817               	xorwf	___ftadd@exp1,w,c
  5438  001AD8  B4D8               	btfsc	status,2,c
  5439  001ADA  D01F               	goto	u1770
  5440  001ADC  D7F6               	goto	l624
  5441  001ADE                     l618:
  5442  001ADE  5017               	movf	___ftadd@exp1,w,c
  5443  001AE0  5C16               	subwf	___ftadd@exp2,w,c
  5444  001AE2  B0D8               	btfsc	status,0,c
  5445  001AE4  D01A               	goto	u1770
  5446  001AE6                     u1740:
  5447  001AE6  90D8               	bcf	status,0,c
  5448  001AE8  360C               	rlcf	___ftadd@f1,f,c
  5449  001AEA  360D               	rlcf	___ftadd@f1+1,f,c
  5450  001AEC  360E               	rlcf	___ftadd@f1+2,f,c
  5451  001AEE  0617               	decf	___ftadd@exp1,f,c
  5452  001AF0  5017               	movf	___ftadd@exp1,w,c
  5453  001AF2  1816               	xorwf	___ftadd@exp2,w,c
  5454  001AF4  B4D8               	btfsc	status,2,c
  5455  001AF6  D00D               	goto	l632
  5456  001AF8  0615               	decf	___ftadd@sign,f,c
  5457  001AFA  C015  F012         	movff	___ftadd@sign,??___ftadd
  5458  001AFE  0E07               	movlw	7
  5459  001B00  1612               	andwf	??___ftadd,f,c
  5460  001B02  B4D8               	btfsc	status,2,c
  5461  001B04  D006               	goto	l632
  5462  001B06  D7EF               	goto	u1740
  5463  001B08  90D8               	bcf	status,0,c
  5464  001B0A  3211               	rrcf	___ftadd@f2+2,f,c
  5465  001B0C  3210               	rrcf	___ftadd@f2+1,f,c
  5466  001B0E  320F               	rrcf	___ftadd@f2,f,c
  5467  001B10  2A16               	incf	___ftadd@exp2,f,c
  5468  001B12                     l632:
  5469  001B12  5016               	movf	___ftadd@exp2,w,c
  5470  001B14  1817               	xorwf	___ftadd@exp1,w,c
  5471  001B16  A4D8               	btfss	status,2,c
  5472  001B18  D7F7               	goto	l633
  5473  001B1A                     u1770:
  5474  001B1A  AE15               	btfss	___ftadd@sign,7,c
  5475  001B1C  D00C               	goto	l635
  5476  001B1E  0EFF               	movlw	255
  5477  001B20  1A0C               	xorwf	___ftadd@f1,f,c
  5478  001B22  0EFF               	movlw	255
  5479  001B24  1A0D               	xorwf	___ftadd@f1+1,f,c
  5480  001B26  0EFF               	movlw	255
  5481  001B28  1A0E               	xorwf	___ftadd@f1+2,f,c
  5482  001B2A  0E01               	movlw	1
  5483  001B2C  260C               	addwf	___ftadd@f1,f,c
  5484  001B2E  0E00               	movlw	0
  5485  001B30  220D               	addwfc	___ftadd@f1+1,f,c
  5486  001B32  0E00               	movlw	0
  5487  001B34  220E               	addwfc	___ftadd@f1+2,f,c
  5488  001B36                     l635:
  5489  001B36  AC15               	btfss	___ftadd@sign,6,c
  5490  001B38  D00C               	goto	l636
  5491  001B3A  0EFF               	movlw	255
  5492  001B3C  1A0F               	xorwf	___ftadd@f2,f,c
  5493  001B3E  0EFF               	movlw	255
  5494  001B40  1A10               	xorwf	___ftadd@f2+1,f,c
  5495  001B42  0EFF               	movlw	255
  5496  001B44  1A11               	xorwf	___ftadd@f2+2,f,c
  5497  001B46  0E01               	movlw	1
  5498  001B48  260F               	addwf	___ftadd@f2,f,c
  5499  001B4A  0E00               	movlw	0
  5500  001B4C  2210               	addwfc	___ftadd@f2+1,f,c
  5501  001B4E  0E00               	movlw	0
  5502  001B50  2211               	addwfc	___ftadd@f2+2,f,c
  5503  001B52                     l636:
  5504  001B52  0E00               	movlw	0
  5505  001B54  6E15               	movwf	___ftadd@sign,c
  5506  001B56  500C               	movf	___ftadd@f1,w,c
  5507  001B58  260F               	addwf	___ftadd@f2,f,c
  5508  001B5A  500D               	movf	___ftadd@f1+1,w,c
  5509  001B5C  2210               	addwfc	___ftadd@f2+1,f,c
  5510  001B5E  500E               	movf	___ftadd@f1+2,w,c
  5511  001B60  2211               	addwfc	___ftadd@f2+2,f,c
  5512  001B62  AE11               	btfss	___ftadd@f2+2,7,c
  5513  001B64  D00E               	goto	l637
  5514  001B66  0EFF               	movlw	255
  5515  001B68  1A0F               	xorwf	___ftadd@f2,f,c
  5516  001B6A  0EFF               	movlw	255
  5517  001B6C  1A10               	xorwf	___ftadd@f2+1,f,c
  5518  001B6E  0EFF               	movlw	255
  5519  001B70  1A11               	xorwf	___ftadd@f2+2,f,c
  5520  001B72  0E01               	movlw	1
  5521  001B74  260F               	addwf	___ftadd@f2,f,c
  5522  001B76  0E00               	movlw	0
  5523  001B78  2210               	addwfc	___ftadd@f2+1,f,c
  5524  001B7A  0E00               	movlw	0
  5525  001B7C  2211               	addwfc	___ftadd@f2+2,f,c
  5526  001B7E  0E01               	movlw	1
  5527  001B80  6E15               	movwf	___ftadd@sign,c
  5528  001B82                     l637:
  5529  001B82  C00F  F001         	movff	___ftadd@f2,___ftpack@arg
  5530  001B86  C010  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5531  001B8A  C011  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5532  001B8E  C017  F004         	movff	___ftadd@exp1,___ftpack@exp
  5533  001B92  C015  F005         	movff	___ftadd@sign,___ftpack@sign
  5534  001B96  ECDA  F011         	call	___ftpack	;wreg free
  5535  001B9A  C001  F00C         	movff	?___ftpack,?___ftadd
  5536  001B9E  C002  F00D         	movff	?___ftpack+1,?___ftadd+1
  5537  001BA2  C003  F00E         	movff	?___ftpack+2,?___ftadd+2
  5538  001BA6  0012               	return	
  5539  001BA8                     __end_of___ftadd:
  5540                           	opt stack 0
  5541                           tblptru	equ	0xFF8
  5542                           tblptrh	equ	0xFF7
  5543                           tblptrl	equ	0xFF6
  5544                           tablat	equ	0xFF5
  5545                           prodh	equ	0xFF4
  5546                           prodl	equ	0xFF3
  5547                           postinc0	equ	0xFEE
  5548                           wreg	equ	0xFE8
  5549                           postdec1	equ	0xFE5
  5550                           fsr1l	equ	0xFE1
  5551                           status	equ	0xFD8
  5552                           
  5553 ;; *************** function ___awtoft *****************
  5554 ;; Defined at:
  5555 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;  c               2    8[COMRAM] int 
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;  sign            1   11[COMRAM] unsigned char 
  5560 ;; Return value:  Size  Location     Type
  5561 ;;                  3    8[COMRAM] float 
  5562 ;; Registers used:
  5563 ;;		wreg, status,2, status,0, cstack
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5569 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5570 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5572 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5573 ;;Total ram usage:        4 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:    1
  5576 ;; This function calls:
  5577 ;;		___ftpack
  5578 ;; This function is called by:
  5579 ;;		_delayMs
  5580 ;;		_getHandleAngle
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584                           	psect	text25
  5585  0027C2                     __ptext25:
  5586                           	opt stack 0
  5587  0027C2                     ___awtoft:
  5588                           	opt stack 27
  5589                           
  5590                           ;incstack = 0
  5591  0027C2  0E00               	movlw	0
  5592  0027C4  6E0C               	movwf	___awtoft@sign,c
  5593  0027C6  AE0A               	btfss	___awtoft@c+1,7,c
  5594  0027C8  D006               	goto	l553
  5595  0027CA  6C09               	negf	___awtoft@c,c
  5596  0027CC  1E0A               	comf	___awtoft@c+1,f,c
  5597  0027CE  B0D8               	btfsc	status,0,c
  5598  0027D0  2A0A               	incf	___awtoft@c+1,f,c
  5599  0027D2  0E01               	movlw	1
  5600  0027D4  6E0C               	movwf	___awtoft@sign,c
  5601  0027D6                     l553:
  5602  0027D6  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5603  0027DA  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5604  0027DE  6A03               	clrf	___ftpack@arg+2,c
  5605  0027E0  0E8E               	movlw	142
  5606  0027E2  6E04               	movwf	___ftpack@exp,c
  5607  0027E4  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5608  0027E8  ECDA  F011         	call	___ftpack	;wreg free
  5609  0027EC  C001  F009         	movff	?___ftpack,?___awtoft
  5610  0027F0  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5611  0027F4  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5612  0027F8  0012               	return	
  5613  0027FA                     __end_of___awtoft:
  5614                           	opt stack 0
  5615                           tblptru	equ	0xFF8
  5616                           tblptrh	equ	0xFF7
  5617                           tblptrl	equ	0xFF6
  5618                           tablat	equ	0xFF5
  5619                           prodh	equ	0xFF4
  5620                           prodl	equ	0xFF3
  5621                           postinc0	equ	0xFEE
  5622                           wreg	equ	0xFE8
  5623                           postdec1	equ	0xFE5
  5624                           fsr1l	equ	0xFE1
  5625                           status	equ	0xFD8
  5626                           
  5627 ;; *************** function ___ftpack *****************
  5628 ;; Defined at:
  5629 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;  arg             3    0[COMRAM] unsigned um
  5632 ;;  exp             1    3[COMRAM] unsigned char 
  5633 ;;  sign            1    4[COMRAM] unsigned char 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;		None
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  3    0[COMRAM] float 
  5638 ;; Registers used:
  5639 ;;		wreg, status,2, status,0
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5645 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5647 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5648 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5649 ;;Total ram usage:        8 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; This function calls:
  5652 ;;		Nothing
  5653 ;; This function is called by:
  5654 ;;		___awtoft
  5655 ;;		___ftadd
  5656 ;;		___ftdiv
  5657 ;;		___ftmul
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           	psect	text26
  5662  0023B4                     __ptext26:
  5663                           	opt stack 0
  5664  0023B4                     ___ftpack:
  5665                           	opt stack 27
  5666                           
  5667                           ;incstack = 0
  5668  0023B4  5004               	movf	___ftpack@exp,w,c
  5669  0023B6  B4D8               	btfsc	status,2,c
  5670  0023B8  D005               	goto	u1530
  5671  0023BA  5001               	movf	___ftpack@arg,w,c
  5672  0023BC  1002               	iorwf	___ftpack@arg+1,w,c
  5673  0023BE  1003               	iorwf	___ftpack@arg+2,w,c
  5674  0023C0  A4D8               	btfss	status,2,c
  5675  0023C2  D00C               	goto	l578
  5676  0023C4                     u1530:
  5677  0023C4  0E00               	movlw	0
  5678  0023C6  6E01               	movwf	?___ftpack,c
  5679  0023C8  0E00               	movlw	0
  5680  0023CA  6E02               	movwf	?___ftpack+1,c
  5681  0023CC  0E00               	movlw	0
  5682  0023CE  6E03               	movwf	?___ftpack+2,c
  5683  0023D0  0012               	return	
  5684  0023D2  2A04               	incf	___ftpack@exp,f,c
  5685  0023D4  90D8               	bcf	status,0,c
  5686  0023D6  3203               	rrcf	___ftpack@arg+2,f,c
  5687  0023D8  3202               	rrcf	___ftpack@arg+1,f,c
  5688  0023DA  3201               	rrcf	___ftpack@arg,f,c
  5689  0023DC                     l578:
  5690  0023DC  0E00               	movlw	0
  5691  0023DE  1401               	andwf	___ftpack@arg,w,c
  5692  0023E0  6E06               	movwf	??___ftpack& (0+255),c
  5693  0023E2  0E00               	movlw	0
  5694  0023E4  1402               	andwf	___ftpack@arg+1,w,c
  5695  0023E6  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5696  0023E8  0EFE               	movlw	254
  5697  0023EA  1403               	andwf	___ftpack@arg+2,w,c
  5698  0023EC  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5699  0023EE  5006               	movf	??___ftpack,w,c
  5700  0023F0  1007               	iorwf	??___ftpack+1,w,c
  5701  0023F2  1008               	iorwf	??___ftpack+2,w,c
  5702  0023F4  B4D8               	btfsc	status,2,c
  5703  0023F6  D00C               	goto	l581
  5704  0023F8  D7EC               	goto	l579
  5705  0023FA  2A04               	incf	___ftpack@exp,f,c
  5706  0023FC  0E01               	movlw	1
  5707  0023FE  2601               	addwf	___ftpack@arg,f,c
  5708  002400  0E00               	movlw	0
  5709  002402  2202               	addwfc	___ftpack@arg+1,f,c
  5710  002404  0E00               	movlw	0
  5711  002406  2203               	addwfc	___ftpack@arg+2,f,c
  5712  002408  90D8               	bcf	status,0,c
  5713  00240A  3203               	rrcf	___ftpack@arg+2,f,c
  5714  00240C  3202               	rrcf	___ftpack@arg+1,f,c
  5715  00240E  3201               	rrcf	___ftpack@arg,f,c
  5716  002410                     l581:
  5717  002410  0E00               	movlw	0
  5718  002412  1401               	andwf	___ftpack@arg,w,c
  5719  002414  6E06               	movwf	??___ftpack& (0+255),c
  5720  002416  0E00               	movlw	0
  5721  002418  1402               	andwf	___ftpack@arg+1,w,c
  5722  00241A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5723  00241C  0EFF               	movlw	255
  5724  00241E  1403               	andwf	___ftpack@arg+2,w,c
  5725  002420  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5726  002422  5006               	movf	??___ftpack,w,c
  5727  002424  1007               	iorwf	??___ftpack+1,w,c
  5728  002426  1008               	iorwf	??___ftpack+2,w,c
  5729  002428  B4D8               	btfsc	status,2,c
  5730  00242A  D006               	goto	l584
  5731  00242C  D7E6               	goto	l582
  5732  00242E  0604               	decf	___ftpack@exp,f,c
  5733  002430  90D8               	bcf	status,0,c
  5734  002432  3601               	rlcf	___ftpack@arg,f,c
  5735  002434  3602               	rlcf	___ftpack@arg+1,f,c
  5736  002436  3603               	rlcf	___ftpack@arg+2,f,c
  5737  002438                     l584:
  5738  002438  BE02               	btfsc	___ftpack@arg+1,7,c
  5739  00243A  D003               	goto	u1570
  5740  00243C  0E02               	movlw	2
  5741  00243E  6004               	cpfslt	___ftpack@exp,c
  5742  002440  D7F6               	goto	l585
  5743  002442                     u1570:
  5744  002442  A004               	btfss	___ftpack@exp,0,c
  5745  002444  9E02               	bcf	___ftpack@arg+1,7,c
  5746  002446  90D8               	bcf	status,0,c
  5747  002448  3204               	rrcf	___ftpack@exp,f,c
  5748  00244A  5004               	movf	___ftpack@exp,w,c
  5749  00244C  1203               	iorwf	___ftpack@arg+2,f,c
  5750  00244E  5005               	movf	___ftpack@sign,w,c
  5751  002450  A4D8               	btfss	status,2,c
  5752  002452  8E03               	bsf	___ftpack@arg+2,7,c
  5753  002454  C001  F001         	movff	___ftpack@arg,?___ftpack
  5754  002458  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5755  00245C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5756  002460  0012               	return	
  5757  002462                     __end_of___ftpack:
  5758                           	opt stack 0
  5759                           tblptru	equ	0xFF8
  5760                           tblptrh	equ	0xFF7
  5761                           tblptrl	equ	0xFF6
  5762                           tablat	equ	0xFF5
  5763                           prodh	equ	0xFF4
  5764                           prodl	equ	0xFF3
  5765                           postinc0	equ	0xFEE
  5766                           wreg	equ	0xFE8
  5767                           postdec1	equ	0xFE5
  5768                           fsr1l	equ	0xFE1
  5769                           status	equ	0xFD8
  5770                           
  5771 ;; *************** function _ClearWatchDogTimer *****************
  5772 ;; Defined at:
  5773 ;;		line 749 in file "Main.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;		None
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;		None
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      void 
  5780 ;; Registers used:
  5781 ;;		None
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5791 ;;Total ram usage:        0 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; This function calls:
  5794 ;;		Nothing
  5795 ;; This function is called by:
  5796 ;;		_main
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           	psect	text27
  5801  0028C6                     __ptext27:
  5802                           	opt stack 0
  5803  0028C6                     _ClearWatchDogTimer:
  5804                           	opt stack 30
  5805                           
  5806                           ;incstack = 0
  5807  0028C6  0004               	clrwdt		;# 
  5808  0028C8  0012               	return		;funcret
  5809  0028CA                     __end_of_ClearWatchDogTimer:
  5810                           	opt stack 0
  5811                           tblptru	equ	0xFF8
  5812                           tblptrh	equ	0xFF7
  5813                           tblptrl	equ	0xFF6
  5814                           tablat	equ	0xFF5
  5815                           prodh	equ	0xFF4
  5816                           prodl	equ	0xFF3
  5817                           postinc0	equ	0xFEE
  5818                           wreg	equ	0xFE8
  5819                           postdec1	equ	0xFE5
  5820                           fsr1l	equ	0xFE1
  5821                           status	equ	0xFD8
  5822                           tblptru	equ	0xFF8
  5823                           tblptrh	equ	0xFF7
  5824                           tblptrl	equ	0xFF6
  5825                           tablat	equ	0xFF5
  5826                           prodh	equ	0xFF4
  5827                           prodl	equ	0xFF3
  5828                           postinc0	equ	0xFEE
  5829                           wreg	equ	0xFE8
  5830                           postdec1	equ	0xFE5
  5831                           fsr1l	equ	0xFE1
  5832                           status	equ	0xFD8
  5833                           
  5834                           	psect	rparam
  5835  0000                     tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           postinc0	equ	0xFEE
  5842                           wreg	equ	0xFE8
  5843                           postdec1	equ	0xFE5
  5844                           fsr1l	equ	0xFE1
  5845                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    52
    Data        14
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     92      95
    BANK0           160     72     122
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 18
		 -> atan@coeff_a(CODE[18]), atan@coeff_b(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_getHandleAngle
    _writeEEPromFloat->_writeSPI
    _readWaterSensor->_delayMs
    _delayMs->___fttol
    ___fttol->___ftmul
    _readEEPromFloat->_readSPI
    _getHandleAngle->_atan2
    _atan2->_atan
    _atan->_eval_poly
    _fabs->___ftneg
    ___ftneg->___ftpack
    _eval_poly->___ftmul
    ___ftmul->___ftdiv
    ___ftge->_fabs
    ___ftdiv->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftneg
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_getHandleAngle
    _getHandleAngle->_atan2

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   96648
                                             46 BANK0     26    26      0
                 _ClearWatchDogTimer
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            _delayMs
                     _getHandleAngle
                     _initialization
                    _readEEPromFloat
                            _readSPI
                    _readWaterSensor
                   _writeEEPromFloat
                           _writeSPI
 ---------------------------------------------------------------------------------
 (1) _writeEEPromFloat                                    17    11      6    2044
                                             13 COMRAM    17    11      6
                           _writeSPI
 ---------------------------------------------------------------------------------
 (1) _writeSPI                                            13     8      5    1431
                                              0 COMRAM    13     8      5
 ---------------------------------------------------------------------------------
 (1) _readWaterSensor                                      9     7      2    8120
                                             77 COMRAM     9     7      2
                            _delayMs
                   _digitalPinStatus
 ---------------------------------------------------------------------------------
 (2) _digitalPinStatus                                     5     3      2     908
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _delayMs                                              9     7      2    7187
                                             68 COMRAM     9     7      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     328
                                             53 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _readEEPromFloat                                     11     8      3    1748
                                             12 COMRAM    11     8      3
                            _readSPI
 ---------------------------------------------------------------------------------
 (1) _readSPI                                             12     7      5    1382
                                              0 COMRAM    12     7      5
 ---------------------------------------------------------------------------------
 (1) _initialization                                       0     0      0       0
                            _initAdc
                            _initSPI
 ---------------------------------------------------------------------------------
 (2) _initSPI                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initAdc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getHandleAngle                                      42    39      3   63368
                                             87 COMRAM     5     2      3
                                              9 BANK0     37    37      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                              _atan2
                            _readAdc
 ---------------------------------------------------------------------------------
 (2) _readAdc                                              6     4      2     197
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _atan2                                               15     9      6   45515
                                             81 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___ftsub
                               _atan
                               _fabs
 ---------------------------------------------------------------------------------
 (3) _atan                                                16    13      3   26799
                                             65 COMRAM    16    13      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (3) _fabs                                                 3     0      3     719
                                             11 COMRAM     3     0      3
                            ___ftneg
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     425
                                              8 COMRAM     3     0      3
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   10639
                                             53 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3830
                                             38 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    1200
                                             14 COMRAM     9     3      6
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3784
                                             23 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6209
                                             23 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5712
                                             11 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2785
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _ClearWatchDogTimer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearWatchDogTimer
   ___ftadd
     ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
     _fabs (ARG)
       ___ftneg
         ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftneg
     ___ftpack (ARG)
   _delayMs
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
   _getHandleAngle
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
       _fabs (ARG)
         ___ftneg
           ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     _atan2
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
       _atan (ARG)
         ___ftadd
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
           _fabs (ARG)
             ___ftneg
               ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg
           ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___wmul
         _fabs
           ___ftneg
             ___ftpack (ARG)
       _fabs (ARG)
         ___ftneg
           ___ftpack (ARG)
     _readAdc
   _initialization
     _initAdc
     _initSPI
   _readEEPromFloat
     _readSPI
   _readSPI
   _readWaterSensor
     _delayMs
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
     _digitalPinStatus
   _writeEEPromFloat
     _writeSPI
   _writeSPI

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E87      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     48      7A       5       76.3%
BITBANK14           88      0       0      33        0.0%
BANK14              88      0       0      34        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5C      5F       1      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D9       6        0.0%
DATA                 0      0      D9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu Oct 25 15:20:10 2018

                    __CFG_CP$OFF 000000                               _PI 0F07  
            ___wmul@multiplicand 0003                     ___ftadd@exp1 0017  
                   ___ftadd@exp2 0016                      __CFG_LVP$ON 000000  
                   ___ftadd@sign 0015                              l203 1DCC  
                            l300 1BF8                              l140 234C  
                            l132 2322                              l310 1C48  
                            l302 1C08                              l150 238A  
                            l207 1E50                              l135 2334  
                            l320 1C98                              l312 1C58  
                            l304 1C18                              l144 236E  
                            l233 2710                              l153 2398  
                            l137 235E                              l234 26FA  
                            l162 2666                              l330 1CE8  
                            l322 1CA8                              l314 1C68  
                            l306 1C28                              l138 2348  
                            l235 272E                              l243 108E  
                            l171 268A                              l147 237C  
                            l236 2700                              l180 2510  
                            l332 1CFC                              l324 1CB8  
                            l316 1C78                              l308 1C38  
                            l156 23A6                              l260 14D4  
                            l245 10BC                              l165 2672  
                            l261 1566                              l238 2732  
                            l174 2696                              l182 2514  
                            l334 1D12                              l326 1CC8  
                            l318 1C88                              l262 15A6  
                            l254 12D4                              l183 2522  
                            l168 267E                              l328 1CD8  
                            l185 257E                              l265 15B2  
                            l257 1496                              l186 2578  
                            l267 15D4                              l259 14B2  
                            l292 1BB8                              l613 1A78  
                            l294 1BC8                              l198 1D8A  
                            l623 1AD4                              l632 1B12  
                            l624 1ACA                              l480 163C  
                            l296 1BD8                              l553 27D6  
                            l633 1B08                              l609 1A4E  
                            l481 164A                              l618 1ADE  
                            l642 206A                              l650 25CA  
                            l490 1832                              l298 1BE8  
                            l635 1B36                              l651 25FA  
                            l483 1682                              l636 1B52  
                            l644 2092                              l660 1FD0  
                            l484 1690                              l581 2410  
                            l637 1B82                              l645 20D0  
                            l661 1FE0                              l485 177C  
                            l582 23FA                              l646 20F6  
                            l478 160E                              l663 1FF8  
                            l559 281C                              l487 1746  
                            l584 2438                              l664 2008  
                            l488 176E                              l680 1EFC  
                            l585 242E                              l657 1F76  
                            l489 180A                              l681 1EEC  
                            l578 23DC                              l674 2760  
                            l579 23D2                              l659 1F9E  
                            l668 288E                              l940 18CA  
                            l941 19CC                              l686 1F20  
                            l678 1E86                              l943 19DE  
                            l687 1F14                              l689 1F3C  
                            l938 1874                              l948 22CC  
                            l949 224C                     __CFG_CPD$OFF 000000  
                            wreg 000FE8                     __CFG_ZCD$OFF 000000  
                   ___ftdiv@cntr 0021                     ___ftdiv@sign 0026  
                           l1883 2626                             u2000 1898  
                           u2010 189A                             u2120 1F26  
                           u2061 1E6A                             u2080 1EA4  
                           u1601 1A0C                             u1530 23C4  
                           u1611 1A20                             u1700 1AA8  
                           u2085 1E9C                             u1640 1A40  
                           u2280 2532                             u1570 2442  
                           u1811 1F5E                             u1740 1AE6  
                           u1901 207A                             u1670 1A6A  
                           u1831 1F86                             u2711 1CF6  
                           u1770 1B1A                             u2900 1DC8  
                           u2920 1E0A                             u2840 248C  
                           u1881 2052                             u2850 21B2  
                           u2738 1D0C                             u2860 1D48  
                           u2845 2484                             u2855 21AA  
                           u2880 1D86                             _TMR0 000FD3  
                           _Pin4 00D4                    __CFG_FCMEN$ON 000000  
                           _fabs 27FA                 ??_initialization 0001  
                           _atan 1840                             _main 12C6  
                   ___ftpack@arg 0001                             _hour 00C8  
                   ___ftpack@exp 0004                             fsr1l 000FE1  
             _ClearWatchDogTimer 28C6                             prodh 000FF4  
                           prodl 000FF3                             start 0000  
                  __CFG_CSWEN$ON 000000                     ___ftmul@cntr 0034  
                   ___param_bank 000000                     ___ftmul@sign 0035  
              readSPI@local_data 000C              ?_ClearWatchDogTimer 0001  
              writeSPI@EEaddress 0003                    __CFG_SCANE$ON 000000  
                   ___fttol@exp1 0044                     ___fttol@lval 0040  
       __end_of_digitalPinStatus 1D1C                            ?_fabs 000C  
                          ?_atan 0042                            ?_main 0001  
                          _ADCLK 000F57                            _ADRES 000F63  
                __end_of___ftadd 1BA8                    __CFG_WDTE$OFF 000000  
                __end_of___ftdiv 2128                  __end_of___ftneg 289C  
                __end_of___ftmul 2042                  __end_of___ftsub 278A  
                __end_of___fttol 1F4E                   __CFG_DEBUG$OFF 000000  
                   main@newAngle 009A                            _TRISA 000F88  
                          _TRISB 000F89                            _TRISC 000F8A  
                __end_of_delayMs 259A                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                 __CFG_EBTR3$OFF 000000                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
           ??_ClearWatchDogTimer 0001        __size_of_writeEEPromFloat 00A4  
                 __CFG_EBTRB$OFF 000000                            _atan2 15E2  
                  ___awtoft@sign 000C                  __end_of_initAdc 28B8  
                __end_of_initSPI 2852                  __end_of_readAdc 274A  
                __end_of_readSPI 26A4                            _xAxis 0F12  
                          fabs@d 000C                            _yAxis 0F10  
                          _errno 00C6                            atan@f 0042  
                          atan@x 0048                            atan@y 0045  
                          _rxPin 00D2               __CFG_MCLRE$EXTMCLR 000000  
                  ___ftpack@sign 0005                            tablat 000FF5  
      writeEEPromFloat@EEaddress 0011                            status 000FD8  
       __size_of_readEEPromFloat 00E0                  __initialization 278A  
                   __end_of_fabs 282A                     __end_of_atan 19FC  
                   __end_of_main 15E2                           ??_fabs 000F  
                         ??_atan 0045                           ??_main 005D  
                  ___fttol@sign1 003F                    __activetblptr 000003  
         _TimeSinceLastHourCheck 00CA                           ?_atan2 0052  
               __end_of___awtoft 27FA                           _ANSELA 000F11  
                         _ANSELB 000F19                           _ANSELC 000F21  
               __end_of___ftpack 2462          __size_of_getHandleAngle 0390  
               main@angleCurrent 0091                           _RC3PPS 000EFA  
                         _RC5PPS 000EFC                   __CFG_WDTCCS$SC 000000  
                _readWaterSensor 1D1C                    main@readWater 00A3  
                 __CFG_PWRTE$OFF 000000                   __CFG_XINST$OFF 000000  
      __CFG_RSTOSC$HFINTOSC_1MHZ 000000                           ___ftge 259A  
                         ___wmul 2852                        ??___ftadd 0012  
                 __CFG_STVREN$ON 000000      __end_of_pulseWidthThreshold 0F0C  
                         _angle1 00C3                           _angle2 00C0  
                         _angle3 00BD                           _angle4 00BA  
                         _angle5 00B7                           _angle6 00B4  
                         _angle7 00B1                           _angle8 00AE  
                      ??___ftdiv 001E                           _angle9 00AB  
                      ??___ftneg 000C                        ??___ftmul 002D  
                      ??___ftsub 001E                        ??___fttol 003A  
                 readSPI@AdrsMid 000A                   readSPI@AdrsLsb 000B  
                 readSPI@AdrsMsb 0009                           atan2@v 0066  
                         atan2@x 0055                           atan2@y 0052  
                         clear_0 27B0              getHandleAngle@angle 008B  
                      ??_delayMs 0047            ___ftmul@f3_as_product 0031  
                      ??_initAdc 0001                        ??_initSPI 0001  
                      ??_readAdc 0003                        ??_readSPI 0006  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                 main@adcVoltage 008E              main@EEPromFloatData 0097  
               __end_of_writeSPI 23B4                       __accesstop 0060  
        __end_of__initialization 27BC                       ___ftadd@f1 000C  
                     ___ftadd@f2 000F                       ___ftge@ff1 000F  
                     ___ftge@ff2 0012                     eval_poly@res 003F  
                  ___rparam_used 000001                       ___ftdiv@f1 0018  
                     ___ftdiv@f2 001B                       ___ftdiv@f3 0022  
                     ___ftneg@f1 0009                       ___awtoft@c 0009  
        _handleMovementThreshold 0F01                       ___ftmul@f1 0027  
                     ___ftmul@f2 002A                       ___ftsub@f1 0018  
                     ___ftsub@f2 001B                       ___fttol@f1 0036  
                 __pcstackCOMRAM 0001                     __pidataBANK0 28B8  
                  __end_of_atan2 1840                    __end_of_xAxis 0F14  
                  __end_of_yAxis 0F12                ??_readEEPromFloat 0010  
                     __end_of_PI 0F0A                       _atan2$1856 0063  
                     _atan2$1857 0060                   main@angleDelta 0094  
                 main@deltaAngle 00A5                 _writeEEPromFloat 2462  
        __end_of_readWaterSensor 1E5A                          ??_atan2 0058  
                     __pbssBANK0 00A8               __size_of_eval_poly 00DA  
                   readSPI@dummy 0001                          ?___ftge 000F  
            _angleThresholdSmall 0F04                          ?___wmul 0001  
                __CFG_PPS1WAY$ON 000000                        ?___awtoft 0009  
                      ?___ftpack 0001                ?_digitalPinStatus 0001  
             ??_digitalPinStatus 0003                          _SSP1BUF 000F92  
                 _getHandleAngle 0F36                main@anglePrevious 009D  
                      _ADPCHbits 000F5F                        _ADREFbits 000F58  
                        __Hparam 0000                          __Lparam 0000  
                __size_of___ftge 0090                          ___ftadd 19FC  
                        ___ftdiv 2042                          ___ftneg 2878  
                __size_of___wmul 0026                          ___ftmul 1F4E  
                        ___ftsub 274A                          ___fttol 1E5A  
                   __psmallconst 0F00                          _angle10 00A8  
                        __pcinit 278A                       ??___awtoft 000C  
                        _delayMs 2506                       ??___ftpack 0006  
              __end_of_eval_poly 22E2                          __ramtop 0F00  
                      ?_writeSPI 0001                          __ptext0 12C6  
                        __ptext1 2462                          __ptext2 22E2  
                        __ptext3 1D1C                          __ptext4 1BA8  
                        __ptext5 2506                          __ptext6 1E5A  
                        __ptext7 2128                          __ptext8 262A  
                        __ptext9 26A4                        _T1CONbits 000FCF  
                        _initAdc 289C                          _initSPI 282A  
                        _readAdc 26F8                          _readSPI 262A  
                atan@val_squared 004C                        _T3CONbits 000FC9  
                readAdc@adcValue 0005                          atan@val 004F  
         __end_of_getHandleAngle 12C6             getHandleAngle@xValue 0087  
           getHandleAngle@yValue 0089                 ?_readWaterSensor 004E  
        readWaterSensor@varToSee 0053      __size_of_ClearWatchDogTimer 0004  
           end_of_initialization 27BC      writeEEPromFloat@output_data 000E  
          _xAxisAccelerometerPin 00D0                          postdec1 000FE5  
                        postinc0 000FEE            writeEEPromFloat@Data0 001D  
          writeEEPromFloat@Data1 001B            writeEEPromFloat@Data2 0019  
        __size_of_initialization 0054       getHandleAngle@averageAngle 0069  
          __CFG_WDTCPS$WDTCPS_31 000000  __end_of_handleMovementThreshold 0F04  
                     ??_writeSPI 0006                        _PORTAbits 000F8D  
                      _PORTBbits 000F8E                        _PORTCbits 000F8F  
                _batteryLevelPin 00CC                        _TRISAbits 000F88  
                      _TRISBbits 000F89                        _TRISCbits 000F8A  
                ?_getHandleAngle 0058                 __CFG_FEXTOSC$OFF 000000  
               _upstrokeInterval 0F0C                  _readEEPromFloat 2128  
                    ___ftdiv@exp 0025              writeSPI@output_data 0001  
                    ___ftmul@exp 0030                  writeSPI@AdrsMid 000A  
                writeSPI@AdrsLsb 000B                  writeSPI@AdrsMsb 0009  
       __end_of_writeEEPromFloat 2506         readEEPromFloat@EEaddress 000D  
                 __end_of___ftge 262A                   _depthSensorPin 00D6  
                 __end_of___wmul 2878              start_initialization 278A  
                     eval_poly@d 0039                       eval_poly@n 003B  
                     eval_poly@x 0036                       readAdc@pin 0001  
               delayMs@end_count 004C                 __CFG_LPBOREN$OFF 000000  
    readWaterSensor@WaterPresent 0055                         ??___ftge 0015  
                       ??___wmul 0005       __end_of_signedNumAdjustADC 0F10  
                    __pdataBANK0 00CC                __size_of___awtoft 0038  
              __size_of___ftpack 00AE                      __pbssCOMRAM 005D  
                  __pcstackBANK0 0060          __end_of_readEEPromFloat 2208  
      __size_of_digitalPinStatus 0174               writeSPI@local_data 000C  
                       ?___ftadd 000C                   _initialization 26A4  
                       ?___ftdiv 0018                         ?___ftneg 0009  
                       ?___ftmul 0027                         ?___ftsub 0018  
                       ?___fttol 0036                         ?_delayMs 0045  
       digitalPinStatus@pinValue 0004                         ?_initAdc 0001  
                       ?_initSPI 0001                      __smallconst 0F00  
                       ?_readAdc 0001                         ?_readSPI 0001  
              __size_of_writeSPI 00D2                        _eval_poly 2208  
                 __size_of_atan2 025E                        delayMs@ms 0045  
                 ___wmul@product 0005                     delayMs@debug 004A  
                      atan@recip 004B           __end_of_initialization 26F8  
               ??_getHandleAngle 005B         __end_of_upstrokeInterval 0F0E  
                     _ADCON0bits 000F60      __end_of_angleThresholdSmall 0F07  
              ___wmul@multiplier 0001                       ?_eval_poly 0036  
     __end_of_ClearWatchDogTimer 28CA              __end_ofatan@coeff_a 0F26  
            __end_ofatan@coeff_b 0F35                 ?_readEEPromFloat 000D  
                      copy_data0 279E                 readSPI@EEaddress 0003  
       __size_of_readWaterSensor 013E              _pulseWidthThreshold 0F0A  
                 main@EEPROMdata 00A2                         __Hrparam 0000  
                ?_initialization 0001                         __Lrparam 0000  
             __CFG_BOREN$SBORDIS 000000            _yAxisAccelerometerPin 00CE  
              ?_writeEEPromFloat 000E                 __size_of___ftadd 01AC  
               __size_of___ftdiv 00E6                 __size_of___ftneg 0024  
               __size_of___ftmul 00F4                 __size_of___ftsub 0040  
               __size_of___fttol 00F4               ??_writeEEPromFloat 0014  
                       ___awtoft 27C2                         ___ftpack 23B4  
               __size_of_delayMs 0094                       _ANSELAbits 000F11  
                     _T0CON0bits 000FD5                 __size_of_initAdc 001C  
                     _T0CON1bits 000FD6                 __size_of_initSPI 0028  
               __size_of_readAdc 0052                 __size_of_readSPI 007A  
            digitalPinStatus@pin 0001                         __ptext10 282A  
                       __ptext11 289C                         __ptext20 1F4E  
                       __ptext12 0F36                         __ptext21 259A  
                       __ptext13 26F8                       _T1GCONbits 000FD0  
                       __ptext22 2042                         __ptext14 15E2  
                       __ptext23 274A                         __ptext15 1840  
                       __ptext24 19FC                         __ptext16 27FA  
                       __ptext25 27C2                         __ptext17 2878  
                       __ptext26 23B4                         __ptext18 2208  
                       __ptext27 28C6                         __ptext19 2852  
                   _SSP1CON1bits 000F96                     _SSP1CON3bits 000F98  
               _digitalPinStatus 1BA8             readEEPromFloat@Data0 0017  
           readEEPromFloat@Data1 0016             readEEPromFloat@Data2 0015  
                  __size_of_fabs 0030                    __size_of_atan 01BC  
                  __size_of_main 031C             __CFG_WDTCWS$WDTCWS_7 000000  
                   _SSP1STATbits 000F95                       _EEPromData 005D  
                       _writeSPI 22E2                      atan@coeff_a 0F14  
                    atan@coeff_b 0F26                      ??_eval_poly 003D  
                    _TMR1CLKbits 000FD2               _signedNumAdjustADC 0F0E  
                    _TMR3CLKbits 000FCC                __CFG_CLKOUTEN$OFF 000000  
              ??_readWaterSensor 0050              _getHandleAngle$1850 0075  
            _getHandleAngle$1851 0078              _getHandleAngle$1852 007B  
            _getHandleAngle$1853 007E              _getHandleAngle$1854 0081  
            _getHandleAngle$1855 0084              _getHandleAngle$1847 006C  
            _getHandleAngle$1848 006F              _getHandleAngle$1849 0072  
                     _SSP1DATPPS 000EB8           _waterPresenceSensorPin 00D8  
             main@handleMovement 00A0  
